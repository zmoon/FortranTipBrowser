# This data is used to generate the tip pages

tips:

  # 17-Dec-2021

  - title: Hello World
    intro: |
      [Hello World](https://en.wikipedia.org/wiki/%22Hello,_World!%22_program) in Fortran is
    file: hello-world.f90
    concl: |
      (Every Fortran program must have an `end` statement.)
    url: https://twitter.com/fortrantip/status/1471887565745799173
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Hello World in Fortran is<br><br>print*,&quot;Hello, World.&quot;<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471887565745799173?ref_src=twsrc%5Etfw">December 17, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: Intrinsic data types
    intro: |
      Fortran has 5 intrinsic data types: integer, real, complex, logical, and character.
      The types have various `kind`s that determine the range of data they can represent.
    file: ~
    url: https://twitter.com/fortrantip/status/1471890355561943054
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran has 5 intrinsic data types: integer, real, complex, logical, and character. The types have various KINDs that determine the range of data they can represent.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471890355561943054?ref_src=twsrc%5Etfw">December 17, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: '`do` loop'
    intro: |
      The primary looping construct in Fortran is `do` ... `end do`.
      A program to print the sum the squares of the integers from 1 to 5 is
    file: do-enddo.f90
    url: https://twitter.com/fortrantip/status/1471891644370796550
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The primary looping construct in Fortran is do ... end do. A program to print the sum the squares of the integers from 1 to 5 is<br><br>implicit none<br>integer :: i,ssq<br>ssq = 0<br>do i=1,5<br> ssq = ssq + i**2<br>end do<br>print*,&quot;sum of squares is &quot;,ssq<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471891644370796550?ref_src=twsrc%5Etfw">December 17, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: '`exit`ing a `do` loop'
    intro: |
      You `exit` a loop as shown in the code below,
      which accumulates the sums of squared integers until the sum exceeds 100.
    file: do-exit.f90
    url: https://twitter.com/fortrantip/status/1471895490346291206
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">You EXIT a loop as shown in the code below, which accumulates the sums of squared integers until the sum exceeds 100<br><br>implicit none<br>integer :: i,ssq<br>ssq = 0<br>i = 0<br>do<br> i = i+1<br> ssq = ssq + i**2<br> if (ssq &gt; 100) exit<br>end do <br>print*,&quot;sum of squares from 1 to &quot;,i,&quot; is&quot;,ssq<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471895490346291206?ref_src=twsrc%5Etfw">December 17, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: Fortran compilers and tutorials
    intro: |
      Two good sites to get started with Fortran are
      <https://fortran-lang.org> and <https://fortranwiki.org/fortran/show/HomePage>.
      A good free compiler is `gfortran`, part of GCC.
      Intel Fortran is also free.
      LFortran is an interactive compiler that covers most but not yet all of Fortran.
    file: ~
    url: https://twitter.com/fortrantip/status/1471897319671046147
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Two good sites to get started with Fortran are <a href="https://t.co/i6lkcIfPqy">https://t.co/i6lkcIfPqy</a> and <a href="https://t.co/uxmVspKsPm">https://t.co/uxmVspKsPm</a> . A good free compiler is gfortran, part of gcc. Intel Fortran is also free. LFortran is an interactive compiler that covers most but not yet all of Fortran.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471897319671046147?ref_src=twsrc%5Etfw">December 17, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: '`**` is the exponentiation operator'
    intro: |
      The exponentiation operator in Fortran is `**`, as in Python.
    file: expon.f90
    concl: |
      Many Fortran operators and intrinsic functions are elemental, and brackets denote arrays.
    url: https://twitter.com/fortrantip/status/1471903802185986050
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The exponentiation operator in Fortran is **, as in Python. <br><br>print*,1.2**2<br><br>gives 1.44<br><br>Many Fortran operators and intrinsic functions are elemental, and brackets denote arrays, so<br><br>print*,[1.0,1.1,1.2,1.3]**2<br><br>gives<br><br>1.00000000 1.21000004 1.44000006 1.68999982</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471903802185986050?ref_src=twsrc%5Etfw">December 17, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: Integer division truncates
    intro: ~
    file: int-trunc.f90
    concl: |
      2/3 = 0 in Fortran because the quotient of two integers is truncated to an integer.
      The quotient of an integer and a real is a real.
    url: https://twitter.com/fortrantip/status/1471936756857643008
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">print*,2+3,2-3,2*3,2/3,2/3.0,2.0/3,2**3<br><br>gives<br><br>5 -1 6 0 0.6666667 0.6666667 8<br><br>2/3 = 0 in Fortran because the quotient of two integers is truncated to an integer. The quotient of an integer and a real is a real.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471936756857643008?ref_src=twsrc%5Etfw">December 17, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: 'Array intrinsic functions: `sum`, `minval`, `maxval`, `minloc`, `findloc`'
    intro: |
      Fortran has many array intrinsic functions. Below, `!` starts a comment.
    file: array-intrinsics.f90
    url: https://twitter.com/fortrantip/status/1471989760046641153
    embed: '<blockquote class="twitter-tweet"><p lang="fr" dir="ltr">Fortran has many array intrinsic functions. Below, ! starts a comment.<br><br>integer, parameter :: vec(3) = [4,1,9]<br>print*,minval(vec),maxval(vec) ! output: 1 9<br>print*,sum(vec),product(vec) ! 14 36<br>print*,minloc(vec),maxloc(vec) ! 2 3<br>print*,findloc(vec,9),findloc(vec,8) ! 3 0<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471989760046641153?ref_src=twsrc%5Etfw">December 17, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: Fortran array sections contain both endpoints
    intro: |
      Fortran array sections contain both endpoints like Julia, Matlab and R, unlike Python.
    file: array-sections.f90
    url: https://twitter.com/fortrantip/status/1471994100161388545
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran array sections contain both endpoints like Julia, Matlab and R, unlike Python.<br><br>integer, parameter :: v(3) = [10,20,30]<br>print*,v(1:2) ! output 10 20<br>print*,v(:2) ! 10 20<br>print*,v(2:3) ! 20 30<br>print*,v(2:) ! 20 30<br>print*,v(::2) ! 10 30 -- stride of 2</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471994100161388545?ref_src=twsrc%5Etfw">December 18, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: Fortran arrays can have any lower bound (the default is 1)
    intro: |
      Fortran arrays can have any lower bound. 
      The default is 1.
      Array functions have optional mask arguments to determine the elements used.    
    file: array-lbound.f90
    url: https://twitter.com/fortrantip/status/1471997763848183810
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran arrays can have any lower bound. <br>The default is 1. Array functions have optional mask arguments to determine the elements used.<br><br>integer :: v(-1:1) = [1,-2,3]<br>print*,lbound(v),ubound(v),size(v) ! -1 1 3<br>print*,sum(v) ! 2<br>print*,sum(v,mask=v&gt;0) ! 4 -- sum excludes -2<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471997763848183810?ref_src=twsrc%5Etfw">December 18, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: '`sum` and other array functions have an optional `dim`ension argument'
    intro: ~
    file: sum-dim.f90
    url: https://twitter.com/fortrantip/status/1472018791525720069
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">sum and other array functions have an optional dim(ension) argument<br><br>integer :: v(2,3) ! 2x3 matrix<br>v(1,:) = [1,2,3]<br>v(2,:) = 10*v(1,:) ! set to [10,20,30]<br>print*,sum(v) ! all elements: 66<br>print*,sum(v,dim=1) ! sum each row: 6 60<br>print*,sum(v,dim=2) ! sum each col: 11 22 33</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472018791525720069?ref_src=twsrc%5Etfw">December 18, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 18-Dec-2021

  - title: Fortran has allocation-on-assignment
    intro: |
      Fortran has allocation on assignment,
      but you cannot use the `allocate` statement for an array that is already allocated.
    file: alloc-on-assign.f90
    url: https://twitter.com/fortrantip/status/1472181598833549316
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran has allocation on assignment, but you cannot use the ALLOCATE statement for an array that is allocated<br><br>integer, allocatable :: v(:)<br>v = [4,9]<br>deallocate(v) ! necessary for line below to work<br>allocate (v,source=[4,9]) ! same as above</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472181598833549316?ref_src=twsrc%5Etfw">December 18, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
    
  - title: 'New Fortran code should use free source form and `.f90` suffix'
    intro: |
      New Fortran code should be written using free source form and stored in a file with a `.f90` file extension.
      Free form was introduced in the Fortran 90 standard,
      but using the `.f90` suffix does NOT mean the code is restricted to Fortran 90 features.
      Don't use the `.f95`, `.f08`, `.f18` suffixes, which are not recognized by many tools.
    file: ~
    url: https://twitter.com/fortrantip/status/1472183935044145157
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">New Fortran code should be written using free source form and stored in a file with the .f90 suffix. Free form was introduced in the Fortran 90 standard, but using the .f90 suffix does NOT mean the code is restricted to Fortran 90 features. Don&#39;t use .f95 .f08 .f18 suffixes.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472183935044145157?ref_src=twsrc%5Etfw">December 18, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: '`if`-`else if`-`end if` block'
    intro: ~
    file: if-block.f90
    url: https://twitter.com/fortrantip/status/1472202678054920196
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If-elseif-endif block:<br><br>integer :: i<br>do i=-1,1<br> print*,i<br> if (i &lt; 0) then<br> print*,&quot;negative&quot;<br> else if (i == 0) then<br> print*,&quot;zero&quot;<br> else<br> print*,&quot;positive&quot;<br> end if<br>end do<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472202678054920196?ref_src=twsrc%5Etfw">December 18, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: '`merge(x, y, cond)`'
    intro: |
      `merge(x, y, cond)` returns `x` if the condition `cond` is true, otherwise `y`.
      We can get the same result as the previous tip:
    file: merge.f90
    concl: |
      Similar to the three-argument usage of
      [`numpy.where`](https://numpy.org/doc/stable/reference/generated/numpy.where.html).
    url: https://twitter.com/fortrantip/status/1472205323763073026
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">merge(x,y,condition) returns x if condition is true, otherwise y. Same output as previous:<br><br>integer :: i<br>do i=-1,1<br> print*,i<br> ! &quot;zero&quot; padded to have same length as &quot;negative&quot;<br> print*,merge(&quot;negative&quot;,merge(&quot;zero &quot;, &amp; <br> &quot;positive&quot;,i==0),i&lt;0)<br>end do<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472205323763073026?ref_src=twsrc%5Etfw">December 18, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: 'An array of character variables has elements of the same `len`gth'
    intro: ~
    file: char-array.f90
    url: https://twitter.com/fortrantip/status/1472207576133783564
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">An array of character variables has elements of the same LEN(gth).<br><br>character(len=5) :: w(3)<br>w = [&quot;one&quot;,&quot;four&quot;,&quot;seven&quot;] ! invalid<br>w = [&quot;one &quot;,&quot;four &quot;,&quot;seven&quot;] ! same as below<br>w = [character(5) :: &quot;one&quot;,&quot;four&quot;,&quot;seven&quot;] <br>print*,w<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472207576133783564?ref_src=twsrc%5Etfw">December 18, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: Character variables are padded with spaces at the end if necessary
    intro: |
      Fortran character variables are padded with spaces at the end if necessary.
      The `//` operator concatenates.
      `trim` removes trailing spaces.[^1]

      [^1]: Use `trim(adjustl(s))` to remove both leading and trailing spaces.
    file: char-pad.f90
    url: https://twitter.com/fortrantip/status/1472209602074849285
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran character variables are padded with spaces at the end if necessary. The // operator concatenates. Trim removes trailing spaces.<br><br>character (len=5) :: v = &quot;one&quot;<br>print*,&quot;&#39;&quot; // v // &quot;&#39;&quot; ! &#39;one &#39;<br>print*,&quot;&#39;&quot; // trim(v) // &quot;&#39;&quot; ! &#39;one&#39;<br>print*,len(v),len_trim(v) ! 5 3<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472209602074849285?ref_src=twsrc%5Etfw">December 18, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: 'Fortran has a one-line `if`'
    intro: |
      In addition to `if`-`else if`, Fortran has a one-line `if`:

      ```text
      if (condition) executable_statement
      ```
    file: if-one-line.f90
    url: https://twitter.com/fortrantip/status/1472365082067755017
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In addition to if-elseif, Fortran has a one-line if:<br>if (condition) executable_statement<br><br>integer :: i<br>do i=-1,1<br> if (i /= 0) print*,i,1/i ! one-line if equivalent to below<br> if (i /= 0) then<br> print*,i,1/i<br> end if<br>end do<br>end<br>! output:<br>! -1 -1<br>! -1 -1<br>! 1 1<br>! 1 1</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472365082067755017?ref_src=twsrc%5Etfw">December 19, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 19-Dec-2021 (first day that stored some source files in the Beliavsky/FortranTip repo)

  - title: '`associate` creates an alias for expressions or variables'
    intro: ~
    file: assoc.f90
    url: https://twitter.com/fortrantip/status/1472565511628197891
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Associate creates an alias for expressions or variables.<br><br>integer, allocatable :: u(:)<br>u = [4,9]<br>associate (v =&gt; u)<br>v = v - 2<br>print*,v ! 2 7<br>print*,u ! 2 7<br>associate (w =&gt; [4,9])<br>print*,w<br>w = w - 2 ! illegal since w set to a constant expression<br>end associate<br>end associate<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472565511628197891?ref_src=twsrc%5Etfw">December 19, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: Loop variable after completion
    intro: |
      The loop variable equals the upper bound plus the stride
      after normal completion of a loop.
    file: loop-var.f90
    url: https://twitter.com/fortrantip/status/1472598697489965061
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The loop variable equals the upper bound plus the stride<br>after normal completion of a loop<br><br>integer :: i<br>do i=1,3<br> if (i &gt; 1) exit<br>end do<br>print*,i ! 2<br>do i=1,3 ! stride of 1<br> continue ! placeholder<br>end do<br>print*,i ! 4<br>do i=1,3,2 ! stride of 2<br> continue<br>end do<br>print*,i ! 5<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472598697489965061?ref_src=twsrc%5Etfw">December 19, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>' 

  - title: '`pack` selects elements'
    intro: ~
    file: pack.f90
    url: https://twitter.com/fortrantip/status/1472600871192125451
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Pack selects elements<br><br>integer :: v(3) = [1,-4,9]<br>print*,pack(v,v&gt;0) ! 1 9 -- keep values &gt; 0<br>print*,count(v&gt;0) ! 2 -- count values &gt; 0<br>print*,size(v) ! 3<br>print*,sum(v) ! 6<br>print*,sum(v,v&gt;0) ! 10 -- sum has optional mask<br>print*,sum(pack(v,v&gt;0)) ! 10<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472600871192125451?ref_src=twsrc%5Etfw">December 19, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: Functions should be `pure` and have `intent(in)` arguments
    intro: |
      `intent(in)` arguments cannot be changed.
      `pure` = no side effects.
      Use `subroutine` instead for a procedure with side effects.
    file: func.f90
    concl: |
      `real` in the function definition line indicates the type of the return value.
      By default, the value corresponding to a variable with the same name as the function
      is returned (here `area`).
    url: https://twitter.com/fortrantip/status/1472603894886932482
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Demo of a Fortran function. Intent(in) arguments<br>cannot be changed. Function arguments should be intent(in). Pure = no side-effects.<br><br>print*,area(3.,4.) ! 12<br>contains<br>real pure function area(length,width)<br>real, intent(in) :: length,width<br>area = length*width<br>end function area<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472603894886932482?ref_src=twsrc%5Etfw">December 19, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: '`elemental` functions broadcast arguments'
    intro: ~
    file: elemental.f90
    url: https://twitter.com/fortrantip/status/1472606914857078793
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Elemental functions broadcast arguments. Neat Fortran feature!<br><br>print*,area(3,4) ! 12<br>print*,area(3,[4,5]) ! 12 15<br>print*,area([3,4],[4,5]) ! 12 20<br>contains<br>integer elemental function area(length,width)<br>integer, intent(in) :: length,width<br>area = length*width<br>end function area<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472606914857078793?ref_src=twsrc%5Etfw">December 19, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: Put functions and subroutines in modules to ensure that interfaces are checked
    intro: |
      Fortran procedures should be defined in modules to
      ensure that interfaces are checked.
    file: mod.f90
    url: https://twitter.com/fortrantip/status/1472610403884670976
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran procedures should be defined in modules to<br>ensure that interfaces are checked.<br><br>module m<br>contains<br>integer function area(length,width)<br>integer, intent(in) :: length,width<br>area = length*width<br>end<br>end module m<br>program main<br>use m<br>print*,area(3,4) ! 12<br>end program main</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472610403884670976?ref_src=twsrc%5Etfw">December 19, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: 'Avoid polluting the namespace by using `use`-`only`'
    intro: |
      In Fortran, 
      ```fortran
      use m
      ```
      is equivalent to Python
      ```python
      from m import *
      ```
      It is better to write
      ```fortran
      use m, only: foo, bar
      ```
      to avoid polluting the namespace and to clarify the origin of imported entities.
    file: ~
    url: https://twitter.com/fortrantip/status/1472613921886552065
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In Fortran, <br><br>use m<br><br>is equivalent to Python<br><br>from m import *<br><br>It is better to write <br><br>use m, only: foo, bar<br><br>to avoid polluting the namespace and to clarify the origin of imported entities.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472613921886552065?ref_src=twsrc%5Etfw">December 19, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # This is the first one with source code file in the FortranTip repo
  - title: Function overloading using an interface with module procedures
    intro: ~
    file: interface.f90
    file0: same
    url: https://twitter.com/fortrantip/status/1472629090758836229
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a href="https://t.co/qsfPFLVUkl">pic.twitter.com/qsfPFLVUkl</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472629090758836229?ref_src=twsrc%5Etfw">December 19, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO: maybe split into two?
  - title: Optional arguments (and the `random_number` intrinsic)
    intro: ~
    file: optional.f90
    file0: same
    concl: |
      ```{important}
      Within a procedure, you should test that an optional argument is present
      (with the `present` intrinsic function) before attempting to use it.
      Using an optional argument that is not present is a common cause of program crashes.
      ```
    url: https://twitter.com/fortrantip/status/1472684194765672450
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a href="https://t.co/ZNqwgg3Wgq">pic.twitter.com/ZNqwgg3Wgq</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472684194765672450?ref_src=twsrc%5Etfw">December 19, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: Define and call a subroutine
    intro: ~
    file: subroutine.f90
    file0: subroutine.f90
    concl: |
      Subroutines are commonly used to return multiple values,
      although a function can return an array or a user-defined type that contains multiple values.
      Use functions when possible, but subroutines are often needed.
      The subroutine is invoked with the `call` statement.
    url: https://twitter.com/fortrantip/status/1472692305522044932
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a href="https://t.co/Wi7Imqi5vW">pic.twitter.com/Wi7Imqi5vW</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472692305522044932?ref_src=twsrc%5Etfw">December 19, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: 'Subroutines can have `intent(in out)` arguments, but functions should not'
    intro: |
      A procedure argument can be `intent(in out)`,
      which means that it is an input that can be overwritten.
      Functions should not have such arguments, but subroutines often do.
      `intent(out)` means the argument is set to uninitialized upon entering the procedure.
    file: intent-in-out.f90
    file0: intent_in_out.f90
    url: https://twitter.com/fortrantip/status/1472696912541364224
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a href="https://t.co/3FjJkJUHSn">pic.twitter.com/3FjJkJUHSn</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472696912541364224?ref_src=twsrc%5Etfw">December 19, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: 'Specify function and subroutine `intent`s'
    intro: |
      Function and subroutine argument `intent`s were introduced in the Fortran 90 standard.
      Much Fortran code does not specify intents, which is legal, but all new code should.
      Arguments should be `intent(in)` or `intent(out)` unless `intent(in out)` is necessary.
    file: ~
    url: https://twitter.com/fortrantip/status/1472698233298333699
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Function and subroutine argument INTENTs were introduced in the Fortran 90 standard. Much Fortran code does not specify intents, which is legal, but all new code should. Arguments should be intent(in) or intent(out) unless intent(in out) is necessary.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472698233298333699?ref_src=twsrc%5Etfw">December 19, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: Procedures can be recursive
    intro: |
      Fortran procedures declared `recursive` can call themselves.
    file: recursive.f90
    file0: recursive.f90
    concl: |
      ````{warning}

      In GFortran v9 and v10 (and lower versions, presumably),
      this isn't allowed, and we get:
      ```text
      Error: ELEMENTAL attribute conflicts with RECURSIVE attribute
      ```
      ````
    url: https://twitter.com/fortrantip/status/1472702427740745728
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a href="https://t.co/czICWzekYU">pic.twitter.com/czICWzekYU</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472702427740745728?ref_src=twsrc%5Etfw">December 19, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: Use `parameter`s in modules to define constants
    intro: |
      A physical or mathematical constant such as $\pi$ that will be used 
      in many parts of a program should be defined as a `parameter` in a 
      module that is `use`d where needed.
      In the code below, `pi` is used both in module `m` and the main program.
    file: module-parameter.f90
    file0: module_parameter.f90
    concl: |
      One should declare a module `private` and list as `public`
      the entities that will be referenced outside the module.
      Module entities are public by default.
    url: https://twitter.com/fortrantip/status/1472718436040073226
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a href="https://t.co/vWJuAwle97">pic.twitter.com/vWJuAwle97</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472718436040073226?ref_src=twsrc%5Etfw">December 20, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: 'Declare floating point variables with `kind`s'
    intro: |
      Although floating point variables can still be declared just `real`
      or `double precision` in Fortran, they should not be.
      Instead, the `kind` of `real` should be specified as a parameter
      that is used throughout the program.

      The code below can be changed from double to single or quadruple precision
      by simply changing the definition of `wp` (working precision) in `kind_mod`
      using the `kind` constants from the intrinsic `iso_fortran_env` module.

      Note the `_wp` suffix used in the literal constants for $\pi$ and $10.0$.
      Any literal constant without a suffix is considered single precision in Fortran,
      regardless of the number of digits provided.

      See <https://fortran-lang.org/learn/best_practices/floating_point> for more discussion.
    file: real-precision.f90
    file0: kind.f90
    url: https://twitter.com/fortrantip/status/1472771842242920451
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a href="https://t.co/Pxu7PbR5b6">pic.twitter.com/Pxu7PbR5b6</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472771842242920451?ref_src=twsrc%5Etfw">December 20, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # Note: this one is a comment on the previous tweet
  - title: 'Replace non-standard `REAL*8` declaration with `real(kind=real64)`'
    intro: |
      In older code, declarations such as[^1]
      ```fortran
      REAL*8 x
      ```
      are common but non-standard.
      They should be replaced by
      ```fortran
      real(kind=real64) :: x
      ```
      or 
      ```fortran
      real(kind=wp) :: x
      ```
      with `wp`[^wp] set appropriately (e.g., `use iso_fortran_env, only: wp => real64`).

      [^1]: Here indicating double precision (8-byte)
      [^wp]: "Working precision"
    file: ~
    url: https://twitter.com/fortrantip/status/1472772577600942083
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In older code, declarations such as<br><br>real*8 x<br><br>are common but non-standard. They should be replaced by<br><br>real(kind=real64) :: x<br><br>or <br><br>real(kind=wp) :: x<br><br>with wp set appropriately.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472772577600942083?ref_src=twsrc%5Etfw">December 20, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 20-Dec-2021

  - title: '`select case` for conditional execution'
    intro: |
      > A `select case` construct conditionally executes one block of
      > constructs or statements depending on the value of a scalar expression
      > in a select case statement.

      --- <https://riptutorial.com/fortran/example/5584/select-case-construct>

      `select case` is more restrictive and clear than an `if` block
      and should be used when it is possible, especially when there are many branches.
    file: select-case.f90
    file0: select_case.f90
    url: https://twitter.com/fortrantip/status/1472930444572336128
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a href="https://t.co/5R6yeSnvpY">pic.twitter.com/5R6yeSnvpY</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472930444572336128?ref_src=twsrc%5Etfw">December 20, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: Reading user input
    intro: |
      The `read` statement is used to get data from the terminal or a file.
      To handle errors, set the `iostat` in the `read` call and check afterwards if it is zero.
      
      This program prompts the user for integers, one at a time, and prints their sum.
    file: read-sum.f90
    inputs: ["1", "1", "2", "3", "0"]
    file0: read_sum.f90
    url: https://twitter.com/fortrantip/status/1472941850218700805
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a href="https://t.co/pzKMXlNriJ">pic.twitter.com/pzKMXlNriJ</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472941850218700805?ref_src=twsrc%5Etfw">December 20, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: Using `read` and `write` for file I/O
    intro: |
      To `read` or `write` data from a file, it must first be connected to a unit.
      The `newunit` specifier, introduced in Fortran 2008, finds a free unit number.
      
      The program below writes some data to a file and then reads it back.
      When the number of records[^1] in a file is unknown, set and check the `iostat` of `read`,
      as shown[^2].

      [^1]: lines
      [^2]: and as in the previous tip
    file: write-read-file.f90
    concl: |
      ```{note}
      The initial (unset) value of `iunit` here is compiler-dependent,
      and the used `iunit` values created by using `newunit` are compiler- and situation-dependent.
      ```
    file0: read_write_file.f90
    url: https://twitter.com/fortrantip/status/1472999893631447043
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Using READ and WRITE for file i/o. <a href="https://t.co/Be3gH8SLnL">pic.twitter.com/Be3gH8SLnL</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472999893631447043?ref_src=twsrc%5Etfw">December 20, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 21-Dec-2021

  - title: Use unformatted stream of Fortran 2003 for large-scale I/O
    intro: |
      Consider using unformatted stream I/O introduced in Fortran 2003 for 
      large data sets. Formatted I/O converts numerical data to and from ASCII 
      and is much slower than unformatted.
      
      This program times the writing and reading of $10^6$ double precision floats[^size]
      using formatted and unformatted stream I/O.

      [^size]: float64; $10^6 \times 64\,\text{bits} = 8\,\text{MB}$
    file: stream-io.f90
    file0: stream_io.f90
    concl: |
      The degree of enhancement depends on $n$ and your hardware, but it should be considerable.

      ```{note}
      The Tweet, using $n=10^7$, reported that unformatted stream write and read were, respectively,
      25 and 260 times faster than formatted.
      ```

      ```{note}
      Using 64-bit integer arguments when calling `system_clock` allows for greater timing precision[^sys-clock].
      For 32-bit integers (default) or smaller, we only get millisecond precision, which was consistently
      not sufficient to measure the unformatted write time on my laptop.
      ```

      [^sys-clock]: <https://gcc.gnu.org/onlinedocs/gfortran/SYSTEM_005fCLOCK.html>
    url: https://twitter.com/fortrantip/status/1473261954244435973
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use unformatted stream of Fortran 2003 for large-scale I/O. <a href="https://t.co/I2PHa3YiaA">pic.twitter.com/I2PHa3YiaA</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473261954244435973?ref_src=twsrc%5Etfw">December 21, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: Name modules and the source files containing them consistently, with one module per file
    intro: |
      The convention @Beliavsky uses is that a module named `m_mod` is defined in a source file `m.f90`.
      That way if you see
      ```fortran
      use m_mod, only: foo
      ```
      in the code you know to look in `m.f90` for the definition of `foo`[^c].
      This also helps to avoid name clashes, since otherwise
      "it is quite frequent to have a procedure with the same name,
      or a type with the same name as the module"[^a][^b].

      This type of convention is not uncommon. For example:

      - Curcic's *Modern Fortran* ([code examples](https://github.com/modern-fortran)),
        where the modules are named `mod_<name>` and the files `mod_<name>.f90`

      - The [Community Land Model](https://github.com/ESCOMP/CTSM/tree/master/src),
        where *some* module names and their source file names are suffixed with `Mod`,
        or `Type` if the main purpose of the module is to define a single type

      - @everythingfunctional [recommends](https://everythingfunctional.gitlab.io/fortran-style-guide/)
        suffixing module names with `_m` (and types with `_t`) and naming the source file with 
        suffix `_m.f90`

      Additional recommendations:

      - > Prefix module names with the library name to avoid name clashes
        > when used as dependency in other projects

        --- <https://fortran-lang.org/learn/best_practices/modules_programs>

      ```{note}
      Similar to the `<name>_mod` module naming convention, since Fortran code is case-insensitive,
      a convention for naming types is to use `<name>_type`.
      ```

      [^a]: <https://everythingfunctional.gitlab.io/fortran-style-guide/>
      [^b]: <https://github.com/Fortran-FOSS-Programmers/Best_Practices#-entities-disambiguation>
      [^c]: Note that modern development environments, like [this VS Code extension](https://marketplace.visualstudio.com/items?itemName=hansec.fortran-ls)
        will generally provide go-to-definition functionality.
    file: ~
    file0: ~
    url: https://twitter.com/fortrantip/status/1473340740055015431
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Name modules and the source files containing them consistently, with one module per file. The convention I use is that a module named  m_mod is defined in a source file m.f90. That way if I see <br><br>use m_mod, only: foo<br><br>in my code I know to look in m.f90 for the definition of foo.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473340740055015431?ref_src=twsrc%5Etfw">December 21, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 22-Dec-2021

  - title: If allocation errors must be handled, use `allocatable` rather than automatic arrays in procedures
    intro: |
      If allocation errors must be handled, use `allocatable` rather than automatic arrays in procedures,
      and check the `stat` of `allocate` in order to handle errors.
    file: alloc-stat.f90
    file0: automatic.f90
    concl: |
      From the Tweet, an example of handling this in a subroutine,
      considering the case of insufficient memory:
      ```fortran
      subroutine foo(x)
         implicit none

         real, intent(in) :: x(:)
         real :: y(size(x))
         ! ^ Automatic array -- program crashes if there is no memory for it
         real, allocatable :: z(:)
         integer :: ierr
   
         allocate (z(size(x)), stat=ierr)
         if (ierr /= 0) then  ! Handle allocation errors
            print *, "could not allocate z in foo"
            return
         end if

      end subroutine foo
      ```
    url: https://twitter.com/fortrantip/status/1473636468405030913
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If allocation errors must be handled, use ALLOCATABLE rather than automatic arrays in procedures, and check the STAT of ALLOCATE. <a href="https://t.co/EV4jE4pfdx">pic.twitter.com/EV4jE4pfdx</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473636468405030913?ref_src=twsrc%5Etfw">December 22, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: 'Use `g0.d` and `:` edit descriptors with infinite repeat count to write delimited (CSV, etc.) output'
    intro: |
      - `g0.d` will appropriately format any intrinsic type.
      - `:` causes processing to stop until the next I/O list item.
      - `*` repeats a format group as many times as necessary.
    file: csv.f90
    file0: ~
    concl: |
      ```{note}
      Intrinsic function `norm2` is part of the Fortran 2008 standard.
      ```
    url: https://twitter.com/fortrantip/status/1473680777279852553
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Combine the G0.d and colon edit descriptors, along with infinite repeat count, to write delimited (CSV, etc.) output. <a href="https://t.co/QfMmdEj7Fn">pic.twitter.com/QfMmdEj7Fn</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473680777279852553?ref_src=twsrc%5Etfw">December 22, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: Zero-size array constructor
    intro: |
      `[data_type ::]` is a zero-size array of type `data_type`.
      See examples below.
    file: zero-size.f90
    file0: zero_size.f90
    concl: |
      From the Tweet comments, one potential use for this is that
      "if a procedure has a required argument that is an integer array,
      you can pass `[integer ::]` from the caller."

      ```{note}
      The `associate` construct, used here,
      "yields simple abbreviations for more complex statements.
      It can be an alias for expressions or variables."[^a]
      ```

      [^a]: <https://fortranwiki.org/fortran/show/associate>
    url: https://twitter.com/fortrantip/status/1473848675566858242
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">[data_type :: ] is a zero-size array of type data_type.<a href="https://t.co/XmBx5W4ZBG">pic.twitter.com/XmBx5W4ZBG</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473848675566858242?ref_src=twsrc%5Etfw">December 23, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 23-Dec-2021

  - title: Comparing Fortran and NumPy syntax
    intro: |
      Used to NumPy?
      Many of the Fortran intrinsics to deal with arrays will already be familiar to you.

      ```{eval-rst}

      .. list-table:: A bit of Fortran vs NumPy
         :header-rows: 1
         :widths: 2 2 3
         
         * - Fortran
           - NumPy equivalent
           - Value

         * - .. code-block:: fortran

                integer :: a(2, 3)

           - .. code-block :: python
         
                np.empty(
                  (2, 3),
                  dtype=np.int32
                )
              
           - Empty 2x3 array of int32

         * - .. code-block:: fortran
                
                a = 1

           - .. code-block :: python
         
                a[:] = 1
              
           - All array elements set to 1

         * - .. code-block:: fortran

                size(a)
              
           - .. code-block :: python
         
                a.size
              
           - 6

         * - .. code-block:: fortran

                shape(a)
              
           - .. code-block :: python
         
                a.shape
              
           - (2, 3)

         * - .. code-block:: fortran

                a(1,1) = 100
              
           - .. code-block :: python
         
                a[0,0] = 100
              
           - Element in first row and first column set to 100

         * - .. code-block:: fortran

                maxval(a)
              
           - .. code-block :: python
         
                a.max()
              
           - 100

         * - .. code-block:: fortran

                minval(a)
              
           - .. code-block :: python
         
                a.min()
              
           - 1

         * - .. code-block:: fortran

                sum(a)
              
           - .. code-block :: python
         
                a.sum()
              
           - 105

         * - .. code-block:: fortran

                sum(a, dim=1)
              
           - .. code-block :: python
         
                a.sum(axis=0)
              
           - (101, 2, 2)
      ```

      **Notes**[^a]

      * The NumPy examples assume
        ```python
        import numpy as np
        ```

      * In Fortran, the "empty" array may get values set to zero,
        but this is not guaranteed (compiler and hardware(?) dependence).
        With NumPy, the unintialized array elements will not (all) be zero.

      * With NumPy,
        ```python
        a = np.full((m, n), value, dtype=np.int32)
        ```
        could be used  to achieve the result of the first two steps.

      * In Fortran, remember that the array elements are stored in
        column-major order.
        In NumPy, row-major order is the default, though you can specify
        [on creation](https://numpy.org/doc/stable/reference/generated/numpy.empty.html)
        or [transform to](https://numpy.org/doc/stable/reference/generated/numpy.asfortranarray.html)
        column-major order.

      * Fortran supports the shorthand for setting all elements (`a = 1` above),
        but if you do that in Python, `a` becomes a single Python integer (`int`).

      * Fortran also supports setting all elements with colon syntax,
        but you must specify a `:` for each dimension.

      * In NumPy, `a[:]` and `a[...]` both work as shorthand for the entire array
        regardless of the number of dimensions,
        whereas in Fortran we need to give a colon for each dimension: `a(:,:)`.

      * For Fortran allocatable arrays, `a = ...` might re-allocate the array[^b],
        whereas explicit `a(:,:) = ...` would not.

      * `shape(a)` (Fortran) returns an integer array,
        whereas `a.shape` (NumPy) returns a tuple of Python `int`s
        (i.e., not NumPy integers).

      [^a]: rST footnote links inside the rST `list-table` inside the MyST `{eval-rst}` fence
        didn't work, though I tried...
      [^b]: If it has already been allocated and the RHS is an array with
        a different shape from the LHS.
        `a = 1` like in our example still just sets all elements to 1.

      ---
    file: cf-numpy.f90
    file0: ~
    concl: |
      ```{note}
      NumPy also provides a functional API that makes it look more like Fortran.
      See such comparisons and more here:
      <https://www.fortran90.org/src/rosetta.html>
      ```
    url: https://twitter.com/fortrantip/status/1473958733571104773
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Used to NumPy? Lots of the Fortran intrinsics to deal with arrays will already be familiar to you. <a href="https://t.co/GnKnbscsDX">pic.twitter.com/GnKnbscsDX</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473958733571104773?ref_src=twsrc%5Etfw">December 23, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: List-directed vs. explicitly formatted output
    intro: |
      List-directed output (format *) is convenient, but don't use it when you care about layout as you'll lose control over spacing, line breaks and number of significant digits. If you care, use explicit formats instead.
    file: ~
    file0: ~
    url: https://twitter.com/fortrantip/status/1474105626611662857
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">List-directed output (format *) is convenient, but don&#39;t use it when you care about layout as you&#39;ll lose control over spacing, line breaks and number of significant digits. If you care, use explicit formats instead.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1474105626611662857?ref_src=twsrc%5Etfw">December 23, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: Derived type definition, initialization, and operator overloading
    intro: |
      How to define a derived type, initialize it, access its components, convert it to a string, and define operators for it.
    file: ~
    file0: date.f90
    url: https://twitter.com/fortrantip/status/1474169072665440259
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">How to define a derived type, initialize it, access its components, convert it to a string, and define operators for it. <a href="https://t.co/jcai3Usy25">pic.twitter.com/jcai3Usy25</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1474169072665440259?ref_src=twsrc%5Etfw">December 24, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 24-Dec-2021

  # TODO
  - title: Use GAMMA to compute factorials
    intro: |
      Why does Fortran not have a factorial function? It does, as for positive whole values of X the Gamma function simplifies to the factorial function for (X-1).
      That is,

      x! == gamma(x+1)

      Thanks to urbanjost for tip!
    file: ~
    file0: factorial.f90
    url: https://twitter.com/fortrantip/status/1474357943667671060
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Why does Fortran not have a factorial function? It does, as for positive whole values of X the Gamma function simplifies to the factorial function for (X-1).<br>That is,<br><br>x! == gamma(x+1)<br><br>Thanks to urbanjost for tip! <a href="https://t.co/fTAPvhKEpr">pic.twitter.com/fTAPvhKEpr</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1474357943667671060?ref_src=twsrc%5Etfw">December 24, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: RESHAPE with the optional ORDER and PAD arguments
    intro: |
      RESHAPE returns an array with a different shape than the SOURCE array. Optional ORDER argument changes the order of elements of SOURCE from the usual column major. Optional PAD argument fills the result, with recycling, after source is exhausted.
    file: ~
    file0: reshape_array.f90
    url: https://twitter.com/fortrantip/status/1474394605890244614
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">RESHAPE returns an array with a different shape than the SOURCE array. Optional ORDER argument changes the order of elements of SOURCE from the usual column major. Optional PAD argument fills the result, with recycling, after source is exhausted. <a href="https://t.co/Xb3RCZ6LcW">pic.twitter.com/Xb3RCZ6LcW</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1474394605890244614?ref_src=twsrc%5Etfw">December 24, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: CMPLX should be used with a KIND argument
    intro: |
      CMPLX(X,Y,[KIND]) returns a single precision complex variable, even if X and Y are double precision, unless a KIND is specified. 

      Merry Christmas and Happy Holidays! Posts may be sparse until the new year.
    file: ~
    file0: cmplx.f90
    url: https://twitter.com/fortrantip/status/1474537984066301959
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">CMPLX(X,Y,[KIND]) returns a single precision complex variable, even if X and Y are double precision, unless a KIND is specified. <br><br>Merry Christmas and Happy Holidays! Posts may be sparse until the new year. <a href="https://t.co/MD9tCw4pTB">pic.twitter.com/MD9tCw4pTB</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1474537984066301959?ref_src=twsrc%5Etfw">December 25, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 26-Dec-2021

  # TODO
  - title: Fortran is column-major
    intro: |
      The order you loop through multidimensional arrays can have a big impact on speed. Fortran is column-major, meaning consecutive elements of a column are stored next to each other in memory, and you should loop through arrays in this order.
    file: ~
    file0: column_major.f90
    url: https://twitter.com/fortrantip/status/1475049356155883524
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The order you loop through multidimensional arrays can have a big impact on speed. Fortran is column-major, meaning consecutive elements of a column are stored next to each other in memory, and you should loop through arrays in this order. <a href="https://t.co/oEtrOaMbzC">pic.twitter.com/oEtrOaMbzC</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475049356155883524?ref_src=twsrc%5Etfw">December 26, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: Store data as an array of derived types or a derived type with array components?
    intro: |
      Whether to store data as an array of derived types or a derived type with array components also depends on how the data will typically be accessed.
    file: ~
    file0: derived_type_array.f90
    url: https://twitter.com/fortrantip/status/1475133178763427848
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Whether to store data as an array of derived types or a derived type with array components also depends on how the data will typically be accessed.<a href="https://t.co/UUqiYkaLO7">pic.twitter.com/UUqiYkaLO7</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475133178763427848?ref_src=twsrc%5Etfw">December 26, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 27-Dec-2021

  # TODO
  - title: Doubled delimiter in a string is regarded as a single character of the constant
    intro: |
      A doubled delimiter in a string without any embedded intervening blanks is regarded as a single character of the constant. One can also put a single quote in double quotes or a double quote in single quotes. Thanks to Amir Shahmoradi for tip.
    file: ~
    file0: doubled_delim.f90
    url: https://twitter.com/fortrantip/status/1475453317526528003
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A doubled delimiter in a string without any embedded intervening blanks is regarded as a single character of the constant. One can also put a single quote in double quotes or a double quote in single quotes. Thanks to Amir Shahmoradi for tip.<br> <a href="https://t.co/JSneWjHZgo">pic.twitter.com/JSneWjHZgo</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475453317526528003?ref_src=twsrc%5Etfw">December 27, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: Intel Fortran Compiler (ifx)
    intro: |
      The Intel� Fortran Compiler (ifx), available in the oneAPI HPC Toolkit 2022.1, is production-ready for CPUs and GPUs. ifx is based on the Intel� Fortran Compiler Classic (ifort) frontend and runtime libraries, but uses LLVM backend compiler technology.
    file: ~
    file0: ~
    url: https://twitter.com/fortrantip/status/1475494838074318852
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The Intel� Fortran Compiler (ifx), available in the oneAPI HPC Toolkit 2022.1, is production-ready for CPUs and GPUs. ifx is based on the Intel� Fortran Compiler Classic (ifort) frontend and runtime libraries, but uses LLVM backend compiler technology.  <a href="https://t.co/YC72lJcOVC">https://t.co/YC72lJcOVC</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475494838074318852?ref_src=twsrc%5Etfw">December 27, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 28-Dec-2021

  # TODO
  - title: Use ALL(A==B) to test for array equality
    intro: |
      If size(A)==size(B), use ALL(A==B) to test for equality of arrays A and B and ANY(A==B) to test for equality of any corresponding elements.
    file: ~
    file0: all_any.f90
    url: https://twitter.com/fortrantip/status/1475822105358913540
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If size(A)==size(B), use ALL(A==B) to test for equality of arrays A and B and ANY(A==B) to test for equality of any corresponding elements. <a href="https://t.co/sx1gxm5XIh">pic.twitter.com/sx1gxm5XIh</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475822105358913540?ref_src=twsrc%5Etfw">December 28, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: Consider using a tolerance to compare floats
    intro: |
      If the arrays are INTEGER or CHARACTER, then the comparison can be exact. For REAL or COMPLEX arrays, you should consider using a suitably small tolerance when comparing values. This and the previous tip are from urbanjost.
    file: ~
    file0: compare_floats.f90
    url: https://twitter.com/fortrantip/status/1475826650835214338
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If the arrays are INTEGER or CHARACTER, then the comparison can be exact. For REAL or COMPLEX arrays, you should consider using a suitably small tolerance when comparing values. This and the previous tip are from urbanjost. <a href="https://t.co/qjaMf5T06W">pic.twitter.com/qjaMf5T06W</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475826650835214338?ref_src=twsrc%5Etfw">December 28, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: ANY and ALL may not be the most efficient methods to compare arrays.
    intro: |
      ANY and ALL may not be the most efficient methods to compare arrays. They
      may generate a logical array the size of the input arrays or always test all elements, depending on how they are
      implemented. More from urbanjost:
    file: ~
    file0: ~
    url: https://twitter.com/fortrantip/status/1475829444543717378
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">ANY and ALL may not be the most efficient methods to compare arrays. They<br>may generate a logical array the size of the input arrays or always test all elements, depending on how they are<br>implemented. More from urbanjost:<a href="https://t.co/8I5ed7nnDT">pic.twitter.com/8I5ed7nnDT</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475829444543717378?ref_src=twsrc%5Etfw">December 28, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: Standards committee has approved conditional expressions
    intro: |
      @arclight The standards committee has approved conditional expressions, with 

      y = ( i&gt;=1 .And. i&lt;=Size(a) ? a(i) : -Huge(y) )

      equivalent to

      if (i&gt;=1 .And. i&lt;=Size(a)) then
         y = a(i)
      else
         y = -Huge(y)
      end if
    file: ~
    file0: ~
    url: https://twitter.com/fortrantip/status/1475840940791279616
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The standards committee has approved conditional expressions, with <br><br>y = ( i&gt;=1 .And. i&lt;=Size(a) ? a(i) : -Huge(y) )<br><br>equivalent to<br><br>if (i&gt;=1 .And. i&lt;=Size(a)) then<br>   y = a(i)<br>else<br>   y = -Huge(y)<br>end if<a href="https://t.co/NKcB9wR2kU">https://t.co/NKcB9wR2kU</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475840940791279616?ref_src=twsrc%5Etfw">December 28, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: Use .true. and .false. for Booleans, not 1 and 0
    intro: |
      Use .true. and .false. for Booleans and use the expression 

      merge(1,0,logical_variable)

      if needed. Fortran standards have never specified an equivalence between integers and Booleans.
    file: ~
    file0: ~
    url: https://twitter.com/fortrantip/status/1475905587774959616
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use .true. and .false. for Booleans and use the expression <br><br>merge(1,0,logical_variable)<br><br>if needed. Fortran standards have never specified an equivalence between integers and Booleans. <a href="https://t.co/V1ZfGdxAWT">https://t.co/V1ZfGdxAWT</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475905587774959616?ref_src=twsrc%5Etfw">December 28, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 29-Dec-2021

  # TODO
  - title: To learn about Fortran beyond F95, read the New Features articles of John Reid
    intro: |
      To learn about Fortran beyond F95, read the 3 articles of John Reid, convenor (chairman) of the standards committee 1999-2017 on the New Features of Fortran 2018, 2008, and 2003
    file: ~
    file0: ~
    url: https://twitter.com/fortrantip/status/1476150602866511873
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">To learn about Fortran beyond F95, read the 3 articles of John Reid, convenor (chairman) of the standards committee 1999-2017 on the New Features of Fortran 2018, 2008, and 2003 <a href="https://t.co/y7bBC94ZdB">https://t.co/y7bBC94ZdB</a><a href="https://t.co/NrcHEeED8r">https://t.co/NrcHEeED8r</a><a href="https://t.co/tPtqc8BU3J">https://t.co/tPtqc8BU3J</a><br>and his co-authored book.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1476150602866511873?ref_src=twsrc%5Etfw">December 29, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: LEN of a character variable may be deferred in Fortran 2003 on
    intro: |
      The LEN of a character variable may be deferred in F2003 on.

      character (len=:), allocatable :: s,t(:)

      declares a scalar and an array of such variables. The LEN is taken from the RHS of an assignment but not from a READ. Elements of t(:) have same LEN.
    file: ~
    file0: deferred_character.f90
    url: https://twitter.com/fortrantip/status/1476201645885337611
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The LEN of a character variable may be deferred in F2003 on.<br><br>character (len=:), allocatable :: s,t(:)<br><br>declares a scalar and an array of such variables. The LEN is taken from the RHS of an assignment but not from a READ. Elements of t(:) have same LEN.<br> <a href="https://t.co/wP6lXJ3XL2">pic.twitter.com/wP6lXJ3XL2</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1476201645885337611?ref_src=twsrc%5Etfw">December 29, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: Many compilers evaluate ALL(x==y) efficiently with short-circuiting
    intro: |
      For a code that evaluates ALL(x==y) with a short-circuiting function and the intrinsic, gfortran, ifort, and nvfortran seem to short-circuit the intrinsic, so it may be OK to use ALL for large expressions.
    file: ~
    file0: ~
    url: https://twitter.com/fortrantip/status/1476255945923641347
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">For a code that evaluates ALL(x==y) with a short-circuiting function and the intrinsic, gfortran, ifort, and nvfortran seem to short-circuit the intrinsic, so it may be OK to use ALL for large expressions.<a href="https://t.co/n99MPh7rKt">https://t.co/n99MPh7rKt</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1476255945923641347?ref_src=twsrc%5Etfw">December 29, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: Compiler Support for the Fortran 2008 and 2018 Standards
    intro: |
      @jeff_replies @axccl @OndrejCertik There is a paper "Compiler Support for the Fortran 2008 and 2018 Standards" April 2020 by Chivers &amp; Sleightholme covering Absoft Arm Cray Fujitsu gfortran IBM Intel Nag NEC Oracle PGI
    file: ~
    file0: ~
    url: https://twitter.com/fortrantip/status/1476281645011505162
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">There is a paper &quot;Compiler Support for the Fortran 2008 and 2018 Standards&quot; April 2020 by Chivers &amp; Sleightholme covering Absoft Arm Cray Fujitsu gfortran IBM Intel Nag NEC Oracle PGI <a href="https://t.co/dPp0cZaLBs">https://t.co/dPp0cZaLBs</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1476281645011505162?ref_src=twsrc%5Etfw">December 29, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 30-Dec-2021

  # TODO
  - title: MODULO vs. MOD function
    intro: |
      Fortran has similar MODULO and MOD functions.
      MODULO (MOD) takes the sign of the 2nd (1st) argument.

      print*,modulo([-1,0,1],2)  !   1 0  1
      print*,mod([-1,0,1],2)        ! -1 0  1
      print*,modulo([-1,0,1],-2) ! -1 0 -1
      print*,mod([-1,0,1],-2)      ! -1 0   1
      end
    file: ~
    file0: ~
    url: https://twitter.com/fortrantip/status/1476541936681066501
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran has similar MODULO and MOD functions.<br>MODULO (MOD) takes the sign of the 2nd (1st) argument.<br><br>print*,modulo([-1,0,1],2)  !   1 0  1<br>print*,mod([-1,0,1],2)        ! -1 0  1<br>print*,modulo([-1,0,1],-2) ! -1 0 -1<br>print*,mod([-1,0,1],-2)      ! -1 0   1<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1476541936681066501?ref_src=twsrc%5Etfw">December 30, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: Returning multiple values from a subroutine or function
    intro: |
      Fortran cannot return multiple values with syntax like

      c, d = f(x)

      You can use a subroutine

      call f(x,c,d)

      or a function that returns a derived type containing c and d or a function that returns a size-2 array if c and d have the same type.
    file: ~
    file0: subroutine_dt.f90
    url: https://twitter.com/fortrantip/status/1476724929299197962
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran cannot return multiple values with syntax like<br><br>c, d = f(x)<br><br>You can use a subroutine<br><br>call f(x,c,d)<br><br>or a function that returns a derived type containing c and d or a function that returns a size-2 array if c and d have the same type. <a href="https://t.co/vYr5h8FsMw">pic.twitter.com/vYr5h8FsMw</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1476724929299197962?ref_src=twsrc%5Etfw">December 31, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 01-Jan-2022

  # TODO
  - title: Case insensitivity
    intro: |
      Fortran used to be written entirely in UPPERCASE, but is now case insensitive. However, whilst the following example is completely valid, to ensure legibility it's highly recommended to choose a case convention and stick to it!
    file: ~
    file0: case_insensitivity.f90
    url: https://twitter.com/fortrantip/status/1477230568781795334
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran used to be written entirely in UPPERCASE, but is now case insensitive. However, whilst the following example is completely valid, to ensure legibility it&#39;s highly recommended to choose a case convention and stick to it! <a href="https://t.co/AMXjjEVsOE">pic.twitter.com/AMXjjEVsOE</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477230568781795334?ref_src=twsrc%5Etfw">January 1, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: Fortran-lang suggested variable naming conventions
    intro: |
      Fortran-lang Best Practices:
      1. Use lower case for all Fortran constructs, such as do, end do, if, then
      2. Follow short mathematical notation for mathematical variables/functions
      3. For other names use all lower case

      Details at
    file: ~
    file0: ~
    url: https://twitter.com/fortrantip/status/1477282631553269764
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran-lang Best Practices:<br>1. Use lower case for all Fortran constructs, such as do, end do, if, then<br>2. Follow short mathematical notation for mathematical variables/functions<br>3. For other names use all lower case<br><br>Details at<a href="https://t.co/WHTD1MAbFq">https://t.co/WHTD1MAbFq</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477282631553269764?ref_src=twsrc%5Etfw">January 1, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: Do case-insensitive string comparisons by converting to lower case
    intro: |
      Character variables are case-sensitive, and to compare two strings ignoring case you can first convert them to lower case.
    file: ~
    file0: lower_case.f90
    url: https://twitter.com/fortrantip/status/1477278656376590340
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Character variables are case-sensitive, and to compare two strings ignoring case you can first convert them to lower case. <a href="https://t.co/D4tnPO8tLE">pic.twitter.com/D4tnPO8tLE</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477278656376590340?ref_src=twsrc%5Etfw">January 1, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 02-Jan-2022

  # TODO
  - title: How size of an array function result can depend on function arguments
    intro: |
      The SIZE of a function result can be an argument, depend on an intrinsic function of an argument such as SIZE, or have an arbitrary dependence if the result is allocatable.
    file: ~
    file0: array_func.f90
    url: https://twitter.com/fortrantip/status/1477606275643019269
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The SIZE of a function result can be an argument, depend on an intrinsic function of an argument such as SIZE, or have an arbitrary dependence if the result is allocatable. <a href="https://t.co/MKlJOXn4yZ">pic.twitter.com/MKlJOXn4yZ</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477606275643019269?ref_src=twsrc%5Etfw">January 2, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: Len of character variable function result can depend on arguments
    intro: |
      The LEN of a character variable function RESULT can also depend on intrinsic functions of the arguments.
    file: ~
    file0: join.f90
    url: https://twitter.com/fortrantip/status/1477632693617799169
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The LEN of a character variable function RESULT can also depend on intrinsic functions of the arguments.  <a href="https://t.co/6vXoO79BAK">pic.twitter.com/6vXoO79BAK</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477632693617799169?ref_src=twsrc%5Etfw">January 2, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: Advance="no" specifier of WRITE
    intro: |
      WRITE inserts a newline at the end, which can be avoided with the
      advance="no" specifier. This is useful for prompting input and reading it from the same line and for printing an unknown amount of data with one format before another format. From zoziha.
    file: ~
    file0: advance_no.f90
    url: https://twitter.com/fortrantip/status/1477788560359141382
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">WRITE inserts a newline at the end, which can be avoided with the<br>advance=&quot;no&quot; specifier. This is useful for prompting input and reading it from the same line and for printing an unknown amount of data with one format before another format. From zoziha.<a href="https://t.co/38h3L99q8Q">pic.twitter.com/38h3L99q8Q</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477788560359141382?ref_src=twsrc%5Etfw">January 2, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 03-Jan-2022

  # TODO
  - title: Real and integer KIND constants from iso_fortran_env; HUGE() and TINY()
    intro: |
      Module iso_fortran_env has KIND constants int8, int16, int32, int64 for integers with those storage sizes and real32, real64, real128 for reals.
      Use huge(x) and tiny(x) to get the largest and smallest numbers of type real x and huge(i) for integer i.
    file: ~
    file0: iso_kinds.f90
    url: https://twitter.com/fortrantip/status/1477985901145993221
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Module iso_fortran_env has KIND constants int8, int16, int32, int64 for integers with those storage sizes and real32, real64, real128 for reals.<br>Use huge(x) and tiny(x) to get the largest and smallest numbers of type real x and huge(i) for integer i.<a href="https://t.co/1T3srjZIsX">pic.twitter.com/1T3srjZIsX</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477985901145993221?ref_src=twsrc%5Etfw">January 3, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: KindFinder code finds all KIND Values implemented by a compiler
    intro: |
      The KindFinder Fortran 90 code of Werner Schulz can also find
      all KIND Values implemented by a compiler, list the properties of the associated numeric models, and generate a KIND parameter module.
    file: ~
    file0: kindfind.f90
    url: https://twitter.com/fortrantip/status/1478030318485577728
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The KindFinder Fortran 90 code of Werner Schulz can also find<br>all KIND Values implemented by a compiler, list the properties of the associated numeric models, and generate a KIND parameter module.<a href="https://t.co/RY5uLdCMXl">pic.twitter.com/RY5uLdCMXl</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478030318485577728?ref_src=twsrc%5Etfw">January 3, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: Fortran 2008 introduced z%re and z%im as alternatives to real(z) and aimag(z)
    intro: |
      Fortran 2008 introduced z%re and z%im as alternatives to real(z) and aimag(z) to refer to the real and imaginary parts of a complex variable z, either scalar or array. The %re and %im syntax does not apply to expressions, so (2*z)%im is disallowed.
    file: ~
    file0: im_re.f90
    url: https://twitter.com/fortrantip/status/1478160269671124993
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran 2008 introduced z%re and z%im as alternatives to real(z) and aimag(z) to refer to the real and imaginary parts of a complex variable z, either scalar or array. The %re and %im syntax does not apply to expressions, so (2*z)%im is disallowed. <a href="https://t.co/GcspgfI4zB">pic.twitter.com/GcspgfI4zB</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478160269671124993?ref_src=twsrc%5Etfw">January 4, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 04-Jan-2022

  # TODO
  - title: Use parameters to dimension fixed-size arrays to make a code easier to change
    intro: |
      Use parameters to dimension fixed-size arrays to make a code easier to change, for example

      integer, parameter :: n1=3,n2=5
      real :: x(n1,n2),y(n1,n2),z(n1,n2)

      or

      real, dimension(n1,n2) :: x,y,z

      Numbers other than 0 or 1 should not appear repeatedly and should be parameters.
    file: ~
    file0: ~
    url: https://twitter.com/fortrantip/status/1478331686412861440
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use parameters to dimension fixed-size arrays to make a code easier to change, for example<br><br>integer, parameter :: n1=3,n2=5<br>real :: x(n1,n2),y(n1,n2),z(n1,n2)<br><br>or<br><br>real, dimension(n1,n2) :: x,y,z<br><br>Numbers other than 0 or 1 should not appear repeatedly and should be parameters.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478331686412861440?ref_src=twsrc%5Etfw">January 4, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: Avoid implicit save
    intro: |
      A variable given a value in the declaration has the implicit SAVE attribute and is not re-initialized in later calls to the procedure. Write

      integer :: i
      i = 0

      instead of 

      integer :: i = 0

      If SAVE is intended be explicit:

      integer, save :: i = 0
    file: ~
    file0: ~
    url: https://twitter.com/fortrantip/status/1478363292028784645
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A variable given a value in the declaration has the implicit SAVE attribute and is not re-initialized in later calls to the procedure. Write<br><br>integer :: i<br>i = 0<br><br>instead of <br><br>integer :: i = 0<br><br>If SAVE is intended be explicit:<br><br>integer, save :: i = 0<a href="https://t.co/X1ZUSZblZX">pic.twitter.com/X1ZUSZblZX</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478363292028784645?ref_src=twsrc%5Etfw">January 4, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: KIND numbers of types are not portable across compilers and should not be used directly.
    intro: |
      KIND numbers of types are not portable across compilers and should not be used directly. It's better to use the named constants from iso_fortran_env. For both gfortran and Intel Fortran

      use iso_fortran_env
      print*,int8,int16,int32,int64

      gives 1 2 4 8, but NAG gives 1 2 3 4.
    file: ~
    file0: ~
    url: https://twitter.com/fortrantip/status/1478526602136981511
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">KIND numbers of types are not portable across compilers and should not be used directly. It&#39;s better to use the named constants from iso_fortran_env. For both gfortran and Intel Fortran<br><br>use iso_fortran_env<br>print*,int8,int16,int32,int64<br><br>gives 1 2 4 8, but NAG gives 1 2 3 4.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478526602136981511?ref_src=twsrc%5Etfw">January 5, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 05-Jan-2022

  # TODO
  - title: Use d0 or \_kind to make a constant double precision.
    intro: |
      Use d0 or _kind to make a constant double precision. Merely having many decimal places in a literal constant does not do so.

      real(kind(1.0d0)) :: pi
      pi = 3.14159265358979323846 ! RHS is single precision

      probably does not do what the programmer intends!
    file: ~
    file0: precision.f90
    url: https://twitter.com/fortrantip/status/1478713534850736129
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use d0 or _kind to make a constant double precision. Merely having many decimal places in a literal constant does not do so.<br><br>real(kind(1.0d0)) :: pi<br>pi = 3.14159265358979323846 ! RHS is single precision<br><br>probably does not do what the programmer intends! <a href="https://t.co/T9hNCwfcE2">pic.twitter.com/T9hNCwfcE2</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478713534850736129?ref_src=twsrc%5Etfw">January 5, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: Use integer powers when possible.
    intro: |
      Use integer powers when possible, writing x**2 instead of x**2.0, since depending on the compiler option used, the latter may be computed as exp(2*log(x)), which is slower.
    file: ~
    file0: pow_real.f90
    url: https://twitter.com/fortrantip/status/1478765410405298176
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use integer powers when possible, writing x**2 instead of x**2.0, since depending on the compiler option used, the latter may be computed as exp(2*log(x)), which is slower. <a href="https://t.co/vlBznFvWIf">pic.twitter.com/vlBznFvWIf</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478765410405298176?ref_src=twsrc%5Etfw">January 5, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 06-Jan-2022

  # TODO
  - title: Parenthesize a variable to copy it "on the fly".
    intro: |
      Parenthesize a variable to copy it "on the fly" to avoid overlapping INTENT(IN) and INTENT(OUT) arguments, which is non-standard, for example writing

      call double((i),i)

      instead of

      call double(i,i) ! bad if args are intent(in) and intent(out)
    file: ~
    file0: overlapping_arg.f90
    url: https://twitter.com/fortrantip/status/1479071485859962880
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Parenthesize a variable to copy it &quot;on the fly&quot; to avoid overlapping INTENT(IN) and INTENT(OUT) arguments, which is non-standard, for example writing<br><br>call double((i),i)<br><br>instead of<br><br>call double(i,i) ! bad if args are intent(in) and intent(out)<a href="https://t.co/WqS0AvVcCE">pic.twitter.com/WqS0AvVcCE</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1479071485859962880?ref_src=twsrc%5Etfw">January 6, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: Substrings of character variable arrays
    intro: |
      For variables

      character (len=10) :: s, v(5)

      s(2:4) is the substring from positions 2 to 4 and v(1:3)(2:4) is an array of substrings from 
      positions 2 to 4 of the elements v(1) to v(3).
    file: ~
    file0: substring.f90
    url: https://twitter.com/fortrantip/status/1479128610623606787
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">For variables<br><br>character (len=10) :: s, v(5)<br><br>s(2:4) is the substring from positions 2 to 4 and v(1:3)(2:4) is an array of substrings from <br>positions 2 to 4 of the elements v(1) to v(3). <a href="https://t.co/h5AIaZwYL2">pic.twitter.com/h5AIaZwYL2</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1479128610623606787?ref_src=twsrc%5Etfw">January 6, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 07-Jan-2022

  # TODO
  - title: Intrinsic character functions
    intro: |
      Character functions:

      scan(x,y): first position of a character in x found in y
      verify(x,y): first position in x NOT found in y
      index(x,y): first position of substring y in x
      adjustl/adjustr: remove leading/trailing spaces and pad to preserve LEN
    file: ~
    file0: string_func.f90
    url: https://twitter.com/fortrantip/status/1479391930744283144
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Character functions:<br><br>scan(x,y): first position of a character in x found in y<br>verify(x,y): first position in x NOT found in y<br>index(x,y): first position of substring y in x<br>adjustl/adjustr: remove leading/trailing spaces and pad to preserve LEN<a href="https://t.co/ZQZUyRq86b">pic.twitter.com/ZQZUyRq86b</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1479391930744283144?ref_src=twsrc%5Etfw">January 7, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: Syntax for character array without manual padding
    intro: |
      Fortran 2003 lets you write an array of character variables as

      s = [character (len=4) :: "one","two","five"]

      instead of

      s = ["one ","two ","five"] ! "one" and "two" padded

      Manually padding large arrays of strings is a pain.
    file: ~
    file0: character_array.f90
    url: https://twitter.com/fortrantip/status/1479487784205402116
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran 2003 lets you write an array of character variables as<br><br>s = [character (len=4) :: &quot;one&quot;,&quot;two&quot;,&quot;five&quot;]<br><br>instead of<br><br>s = [&quot;one &quot;,&quot;two &quot;,&quot;five&quot;] ! &quot;one&quot; and &quot;two&quot; padded<br><br>Manually padding large arrays of strings is a pain.<a href="https://t.co/TH7x2tQ5Wz">pic.twitter.com/TH7x2tQ5Wz</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1479487784205402116?ref_src=twsrc%5Etfw">January 7, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: Two types of syntax for defining a function
    intro: |
      Ways of defining a function:

      1. Function and result name are the same.

      2. RESULT has a different name within the function, which can be used
      to return an array.

      RETURN, when needed, is used to exit the function, not set its value.
    file: ~
    file0: ~
    url: https://twitter.com/fortrantip/status/1479641195898826754
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Ways of defining a function:<br><br>1. Function and result name are the same.<br><br>2. RESULT has a different name within the function, which can be used<br>to return an array.<br><br>RETURN, when needed, is used to exit the function, not set its value. <a href="https://t.co/TYdVDZPwCz">pic.twitter.com/TYdVDZPwCz</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1479641195898826754?ref_src=twsrc%5Etfw">January 8, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 08-Jan-2022

  # TODO
  - title: Propagation of an optional argument
    intro: |
      A procedure with an OPTIONAL argument can call a procedure with that argument if it is OPTIONAL there too. The PRESENT status of the argument propagates to called procedures. The optval function of the Fortran stdlib project exploits this.
    file: ~
    file0: optional_use.f90
    url: https://twitter.com/fortrantip/status/1479805991382360066
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A procedure with an OPTIONAL argument can call a procedure with that argument if it is OPTIONAL there too. The PRESENT status of the argument propagates to called procedures. The optval function of the Fortran stdlib project exploits this. <a href="https://t.co/amhSL1cbY7">pic.twitter.com/amhSL1cbY7</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1479805991382360066?ref_src=twsrc%5Etfw">January 8, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 09-Jan-2022

  # TODO
  - title: DIMENSION can be used to declare several arrays of the same SHAPE
    intro: |
      DIMENSION can be used to declare several arrays of the same SHAPE, which can be overridden on the same line.

      real, dimension(3,4) :: x, y, z(5,6)

      is legal but should be written

      real, dimension(3,4) :: x, y
      real :: z(5,6)

      for clarity.
    file: ~
    file0: dimension.f90
    url: https://twitter.com/fortrantip/status/1480162604559523840
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">DIMENSION can be used to declare several arrays of the same SHAPE, which can be overridden on the same line.<br><br>real, dimension(3,4) :: x, y, z(5,6)<br><br>is legal but should be written<br><br>real, dimension(3,4) :: x, y<br>real :: z(5,6)<br><br>for clarity.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1480162604559523840?ref_src=twsrc%5Etfw">January 9, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 10-Jan-2022

  # TODO
  - title: UnALLOCATED variable passed to a procedure is not PRESENT there.
    intro: |
      A variable that is not ALLOCATED, when passed as an OPTIONAL, non-allocatable argument to a procedure, is considered not PRESENT there. This Fortran 2008 feature can simplify code.
    file: ~
    file0: ~
    url: https://twitter.com/fortrantip/status/1480585104997163018
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A variable that is not ALLOCATED, when passed as an OPTIONAL, non-allocatable argument to a procedure, is considered not PRESENT there. This Fortran 2008 feature can simplify code. <a href="https://t.co/TdSd5Jv0Pt">https://t.co/TdSd5Jv0Pt</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1480585104997163018?ref_src=twsrc%5Etfw">January 10, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 11-Jan-2022

  # TODO
  - title: Procedures can be called with a mix of named and positional arguments.
    intro: |
      Procedures can be called with a mix of named and positional arguments, but positional arguments cannot follow named ones. Naming arguments makes it easier to add arguments without breaking code. It's good to
      name OPTIONAL arguments.
    file: ~
    file0: arguments.f90
    url: https://twitter.com/fortrantip/status/1480893840068390913
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Procedures can be called with a mix of named and positional arguments, but positional arguments cannot follow named ones. Naming arguments makes it easier to add arguments without breaking code. It&#39;s good to<br>name OPTIONAL arguments.<a href="https://t.co/rIl2jM0DTA">pic.twitter.com/rIl2jM0DTA</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1480893840068390913?ref_src=twsrc%5Etfw">January 11, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 12-Jan-2022

  # TODO
  - title: Use the same name for analogous procedures defined in different modules using an INTERFACE
    intro: |
      Using an INTERFACE, one can use the same name for analogous procedures that operate on derived types defined in different modules, for example str to convert a derived type to a string.
    file: ~
    file0: shared_interface.f90
    url: https://twitter.com/fortrantip/status/1481247763048407042
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Using an INTERFACE, one can use the same name for analogous procedures that operate on derived types defined in different modules, for example str to convert a derived type to a string.<a href="https://t.co/VeqDzgg5AE">pic.twitter.com/VeqDzgg5AE</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1481247763048407042?ref_src=twsrc%5Etfw">January 12, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 13-Jan-2022

  # TODO
  - title: How to rename an imported module entity
    intro: |
      An imported module entity can be renamed with the syntax

      use mod, only: local_name =&gt; use_name

      or

      use mod, local_name =&gt; use_name

      This is necessary when importing procedures with the same name, not in interfaces, from different
      modules.
    file: ~
    file0: rename.f90
    url: https://twitter.com/fortrantip/status/1481597325499842563
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">An imported module entity can be renamed with the syntax<br><br>use mod, only: local_name =&gt; use_name<br><br>or<br><br>use mod, local_name =&gt; use_name<br><br>This is necessary when importing procedures with the same name, not in interfaces, from different<br>modules. <a href="https://t.co/89mRx3jsWV">pic.twitter.com/89mRx3jsWV</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1481597325499842563?ref_src=twsrc%5Etfw">January 13, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 14-Jan-2022

  # TODO
  - title: Module entities are PUBLIC by default.
    intro: |
      Module entities are PUBLIC by default, but if a blank PRIVATE statement is used, any public entities must be labeled so explicitly. Doing this clarifies what is exported from the module.
    file: ~
    file0: private.f90
    url: https://twitter.com/fortrantip/status/1481970740475932676
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Module entities are PUBLIC by default, but if a blank PRIVATE statement is used, any public entities must be labeled so explicitly. Doing this clarifies what is exported from the module.<a href="https://t.co/4eJZDbU7CZ">pic.twitter.com/4eJZDbU7CZ</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1481970740475932676?ref_src=twsrc%5Etfw">January 14, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 15-Jan-2022

  # TODO
  - title: An unqualified USE foo statement imports public entities defined in foo and what foo imported.
    intro: |
      use foo

      imports not only the public entities defined in module foo but also the entities that foo imports from module bar. To avoid inadvertent imports and clarify what is imported, write

      use foo, only: &lt;imports&gt;
      use bar, only: &lt;imports&gt; ! if any
    file: ~
    file0: imports.f90
    url: https://twitter.com/fortrantip/status/1482328990798987266
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">use foo<br><br>imports not only the public entities defined in module foo but also the entities that foo imports from module bar. To avoid inadvertent imports and clarify what is imported, write<br><br>use foo, only: &lt;imports&gt;<br>use bar, only: &lt;imports&gt; ! if any<a href="https://t.co/9s78tF1V5Q">pic.twitter.com/9s78tF1V5Q</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1482328990798987266?ref_src=twsrc%5Etfw">January 15, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 16-Jan-2022

  # TODO
  - title: Use iostat and iomsg to handle READ errors
    intro: |
      The Fortran 2003 module iso_fortran_env has constants 

      iostat_eor -- end of record
      iostat_end -- end of file

      to which the iostat of a READ statement will be set if that error occurs. READ also has an iomsg specifier returning a text error message.
    file: ~
    file0: iomsg.f90
    url: https://twitter.com/fortrantip/status/1482687630877892608
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The Fortran 2003 module iso_fortran_env has constants <br><br>iostat_eor -- end of record<br>iostat_end -- end of file<br><br>to which the iostat of a READ statement will be set if that error occurs. READ also has an iomsg specifier returning a text error message.<a href="https://t.co/Rm6DmsKPP9">pic.twitter.com/Rm6DmsKPP9</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1482687630877892608?ref_src=twsrc%5Etfw">January 16, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: List of Fortran compilers, build tools, text editors, etc.
    intro: |
      I keep a list of Fortran compilers, build tools, text editors and plug-ins, linters, preprocessors, translators to and from Fortran, profilers, tools for refactoring, interoperability, and automatic documentation, and unit testing frameworks.
    file: ~
    file0: ~
    url: https://twitter.com/fortrantip/status/1482709817466707969
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">I keep a list of Fortran compilers, build tools, text editors and plug-ins, linters, preprocessors, translators to and from Fortran, profilers, tools for refactoring, interoperability, and automatic documentation, and unit testing frameworks.<a href="https://t.co/fnWwF04z5D">https://t.co/fnWwF04z5D</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1482709817466707969?ref_src=twsrc%5Etfw">January 16, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 17-Jan-2022

  # TODO
  - title: Fortran 2008 introduced IMPURE ELEMENTAL procedures
    intro: |
      Fortran 2008 allows procedures to be labeled IMPURE ELEMENTAL. Such procedures can do external I/O and have a STOP or ERROR STOP statement. They can simulate a loop over a collection. The plain ELEMENTAL designation means the same as PURE ELEMENTAL.
    file: ~
    file0: impure_elemental.f90
    url: https://twitter.com/fortrantip/status/1483063464562204672
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran 2008 allows procedures to be labeled IMPURE ELEMENTAL. Such procedures can do external I/O and have a STOP or ERROR STOP statement. They can simulate a loop over a collection. The plain ELEMENTAL designation means the same as PURE ELEMENTAL.<a href="https://t.co/e5Z6K7MvvC">pic.twitter.com/e5Z6K7MvvC</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1483063464562204672?ref_src=twsrc%5Etfw">January 17, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 18-Jan-2022

  # TODO
  - title: Impure elemental procedure can be used to generate array of non-uniform variates
    intro: |
      The RANDOM_NUMBER intrinsic returns a scalar or an array of uniform variates. An impure elemental subroutine can do the same for normal variates, given an algorithm to generate a single normal variate, possibly using RANDOM_NUMBER.
    file: ~
    file0: random_normal.f90
    url: https://twitter.com/fortrantip/status/1483430581232967684
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The RANDOM_NUMBER intrinsic returns a scalar or an array of uniform variates. An impure elemental subroutine can do the same for normal variates, given an algorithm to generate a single normal variate, possibly using RANDOM_NUMBER.<a href="https://t.co/udthsbMT7T">pic.twitter.com/udthsbMT7T</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1483430581232967684?ref_src=twsrc%5Etfw">January 18, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 19-Jan-2022

  # TODO
  - title: Array constructor with [] was introduced in Fortran 2003. Still valid is (//)
    intro: |
      Using [] for an array constructor was introduced in Fortran 2003, although many Fortran 95 compilers supported it. The older syntax (//) is still valid.

      print*, all([4,9] == (/4,9/)) ! T
    file: ~
    file0: ~
    url: https://twitter.com/fortrantip/status/1483773578839474180
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Using [] for an array constructor was introduced in Fortran 2003, although many Fortran 95 compilers supported it. The older syntax (//) is still valid.<br><br>print*, all([4,9] == (/4,9/)) ! T</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1483773578839474180?ref_src=twsrc%5Etfw">January 19, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 20-Jan-2022

  # TODO
  - title: PROTECTED module variables cannot be changed outside the module.
    intro: |
      If a module variable is PROTECTED, an attribute introduced in Fortran 2003, it can only be modified by a procedure in the module where it is declared. It is useful for PUBLIC module variables that can be accessed but should not changed outside the module.
    file: ~
    file0: protected.f90
    url: https://twitter.com/fortrantip/status/1484136749924245509
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If a module variable is PROTECTED, an attribute introduced in Fortran 2003, it can only be modified by a procedure in the module where it is declared. It is useful for PUBLIC module variables that can be accessed but should not changed outside the module.<a href="https://t.co/HoABECoBdO">pic.twitter.com/HoABECoBdO</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1484136749924245509?ref_src=twsrc%5Etfw">January 20, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 21-Jan-2022

  # TODO
  - title: Use INTRINSIC to specify that compiler-provided procedures and modules are referenced
    intro: |
      You can supply procedures and modules with the same names as intrinsics. To specify that the intrinsic procedure or module provided by the compiler is used write

      use, intrinsic :: iso_fortran_env
      intrinsic :: sin
    file: ~
    file0: intrinsic.f90
    url: https://twitter.com/fortrantip/status/1484517091738886147
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">You can supply procedures and modules with the same names as intrinsics. To specify that the intrinsic procedure or module provided by the compiler is used write<br><br>use, intrinsic :: iso_fortran_env<br>intrinsic :: sin <a href="https://t.co/NydDt6a9eD">pic.twitter.com/NydDt6a9eD</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1484517091738886147?ref_src=twsrc%5Etfw">January 21, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 22-Jan-2022

  # TODO
  - title: VALUE attribute for procedure arguments introduced in Fortran 2003
    intro: |
      If an argument has the VALUE attribute, added in Fortran 2003, changes to the dummy argument in the procedure do not change the actual argument in the the caller.
    file: ~
    file0: value.f90
    url: https://twitter.com/fortrantip/status/1484874794352918528
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If an argument has the VALUE attribute, added in Fortran 2003, changes to the dummy argument in the procedure do not change the actual argument in the the caller.<a href="https://t.co/SVdZjbaw5v">pic.twitter.com/SVdZjbaw5v</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1484874794352918528?ref_src=twsrc%5Etfw">January 22, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 23-Jan-2022

  # TODO
  - title: Turn compiler warnings into errors to force code defects to be fixed.
    intro: |
      To ensure that code defects are fixed, use options to turn the relevant compiler warnings into errors in the build system. For example

      gfortran -Werror=unused-variable -Werror=unused-function

      rejects the code below. Mere warnings are often ignored.
    file: ~
    file0: warnings.f90
    url: https://twitter.com/fortrantip/status/1485235396179079173
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">To ensure that code defects are fixed, use options to turn the relevant compiler warnings into errors in the build system. For example<br><br>gfortran -Werror=unused-variable -Werror=unused-function<br><br>rejects the code below. Mere warnings are often ignored.<a href="https://t.co/OiYA1EWwcj">pic.twitter.com/OiYA1EWwcj</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1485235396179079173?ref_src=twsrc%5Etfw">January 23, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 24-Jan-2022

  # TODO
  - title: An INTENT(OUT) argument is undefined at the beginning of a procedure
    intro: |
      A non-allocatable INTENT(OUT) dummy argument is undefined at the beginning of a procedure. Although most compilers will set it to the value of the actual argument, you should declare the argument 
      INTENT(IN OUT) to mandate this behavior.
    file: ~
    file0: intent_out_undefined.f90
    url: https://twitter.com/fortrantip/status/1485594671300632576
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A non-allocatable INTENT(OUT) dummy argument is undefined at the beginning of a procedure. Although most compilers will set it to the value of the actual argument, you should declare the argument <br>INTENT(IN OUT) to mandate this behavior. <a href="https://t.co/3dLZA7aWwP">pic.twitter.com/3dLZA7aWwP</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1485594671300632576?ref_src=twsrc%5Etfw">January 24, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 25-Jan-2022

  # TODO
  - title: ALLOCATABLE INTENT(OUT) argument is deallocated.
    intro: |
      An ALLOCATABLE INTENT(OUT) dummy argument is deallocated at the beginning of a procedure, as are the ALLOCATABLE components of an INTENT(OUT) derived type.
    file: ~
    file0: intent_out_allocatable.f90
    url: https://twitter.com/fortrantip/status/1485957543990018053
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">An ALLOCATABLE INTENT(OUT) dummy argument is deallocated at the beginning of a procedure, as are the ALLOCATABLE components of an INTENT(OUT) derived type.<a href="https://t.co/gtBVzGD0nv">pic.twitter.com/gtBVzGD0nv</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1485957543990018053?ref_src=twsrc%5Etfw">January 25, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 26-Jan-2022

  # TODO
  - title: Dummy argument that is changed must be definable in the caller.
    intro: |
      If a dummy argument without the VALUE attribute is changed in a procedure, the actual argument must be definable in the caller -- a variable, not a constant or expression.
    file: ~
    file0: definable_arg.f90
    url: https://twitter.com/fortrantip/status/1486313053092208645
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If a dummy argument without the VALUE attribute is changed in a procedure, the actual argument must be definable in the caller -- a variable, not a constant or expression.<a href="https://t.co/cpxhod0nN7">pic.twitter.com/cpxhod0nN7</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1486313053092208645?ref_src=twsrc%5Etfw">January 26, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 27-Jan-2022

  # TODO
  - title: IEEE_ARITHMETIC module has functions to test numerical conditions.
    intro: |
      Fortran 2003 introduced an ieee_arithmetic module with elemental functions ieee_is_nan, ieee_is_finite, 
      ieee_is_negative, and ieee_is_normal, which test for those conditions. They have a real argument and logical RESULT.
    file: ~
    file0: ieee_arithmetic.f90
    url: https://twitter.com/fortrantip/status/1486706121335263246
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran 2003 introduced an ieee_arithmetic module with elemental functions ieee_is_nan, ieee_is_finite, <br>ieee_is_negative, and ieee_is_normal, which test for those conditions. They have a real argument and logical RESULT.<a href="https://t.co/82On9iDxXQ">pic.twitter.com/82On9iDxXQ</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1486706121335263246?ref_src=twsrc%5Etfw">January 27, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 28-Jan-2022

  # TODO
  - title: Call ieee_set_halting_mode() to set floating point conditions that halt program.
    intro: |
      Call ieee_set_halting_mode() of F2003 module ieee_exceptions to set the floating point conditions (NaN, overflow, underflow, divide-by-zero, inexact) that will halt a program. Similar compiler options include 
      gfortran -ffpe-trap=invalid
      ifort -fpe0.
    file: ~
    file0: ieee_exceptions.f90
    url: https://twitter.com/fortrantip/status/1487084606780325889
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Call ieee_set_halting_mode() of F2003 module ieee_exceptions to set the floating point conditions (NaN, overflow, underflow, divide-by-zero, inexact) that will halt a program. Similar compiler options include <br>gfortran -ffpe-trap=invalid<br>ifort -fpe0.<a href="https://t.co/gHjgCZMQU0">pic.twitter.com/gHjgCZMQU0</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1487084606780325889?ref_src=twsrc%5Etfw">January 28, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 29-Jan-2022

  # TODO
  - title: A procedure can have an argument that is another PROCEDURE with an INTERFACE.
    intro: |
      A procedure can have an argument that is another PROCEDURE with an INTERFACE, which is useful for writing a procedure that minimizes or integrates a function.
    file: ~
    file0: trapezoid.f90
    url: https://twitter.com/fortrantip/status/1487410814919356419
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A procedure can have an argument that is another PROCEDURE with an INTERFACE, which is useful for writing a procedure that minimizes or integrates a function.<a href="https://t.co/NtVYKTbltS">pic.twitter.com/NtVYKTbltS</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1487410814919356419?ref_src=twsrc%5Etfw">January 29, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # TODO
  - title: Google foo filetype:f90 or foo filetype:f to find Fortran code with foo.
    intro: |
      Since Fortran source files usually have the .f90 or .f suffix, you can Google, for example, "finite element" filetype:f90 and "finite element" filetype:f to find finite element codes.
    file: ~
    file0: ~
    url: https://twitter.com/fortrantip/status/1487557071818084357
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Since Fortran source files usually have the .f90 or .f suffix, you can Google, for example, &quot;finite element&quot; filetype:f90 and &quot;finite element&quot; filetype:f to find finite element codes.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1487557071818084357?ref_src=twsrc%5Etfw">January 29, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 30-Jan-2022

  # TODO
  - title: Polyhedron suggested compiler optimization options and Fortran 95 benchmarks
    intro: |
      Polyhedron has suggested compiler options for optimization and compared compiler speed on some Fortran 95 codes.
    file: ~
    file0: ~
    url: https://twitter.com/fortrantip/status/1487791193710866437
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Polyhedron has suggested compiler options for optimization and compared compiler speed on some Fortran 95 codes. <a href="https://t.co/3zrgBY9TPM">https://t.co/3zrgBY9TPM</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1487791193710866437?ref_src=twsrc%5Etfw">January 30, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 31-Jan-2022

  # TODO
  - title: Vector subscript can be used for non-contiguous array sections.
    intro: |
      A vector subscript can be used for non-contiguous array sections, for example 

      real :: x(5)
      print*,x([2,4])

      An array section with a vector subscript cannot be passed as an intent(out) or intent(in out) argument.
    file: ~
    file0: vector_subscript.f90
    url: https://twitter.com/fortrantip/status/1488132722761609216
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A vector subscript can be used for non-contiguous array sections, for example <br><br>real :: x(5)<br>print*,x([2,4])<br><br>An array section with a vector subscript cannot be passed as an intent(out) or intent(in out) argument. <a href="https://t.co/kTdDGksivR">pic.twitter.com/kTdDGksivR</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1488132722761609216?ref_src=twsrc%5Etfw">January 31, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 01-Feb-2022

  # TODO
  - title: Setting the values of an array section
    intro: |
      Fortran array indices must be integers, so you cannot write

      v(v&lt;0) = -1

      as in R, but alternatives are

      where (v&lt;0) v = -1
      v = merge(-1,v,v&lt;0)
      v(truloc(v&lt;0)) = -1

      where truloc is a user function that creates a vector subscript from a logical mask.
    file: ~
    file0: truloc.f90
    url: https://twitter.com/fortrantip/status/1488492649166295043
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran array indices must be integers, so you cannot write<br><br>v(v&lt;0) = -1<br><br>as in R, but alternatives are<br><br>where (v&lt;0) v = -1<br>v = merge(-1,v,v&lt;0)<br>v(truloc(v&lt;0)) = -1<br><br>where truloc is a user function that creates a vector subscript from a logical mask.<a href="https://t.co/Z8BM3iUNOF">pic.twitter.com/Z8BM3iUNOF</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1488492649166295043?ref_src=twsrc%5Etfw">February 1, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 02-Feb-2022

  # TODO
  - title: Mistakes in Fortran 90 Programs That Might Surprise You, by Szymanski
    intro: |
      Here is a a survey of Fortran 90 pitfalls. Most are still relevant, but now
      (1) Derived types can have allocatable components.
      (2) A pointer can be initialized to null() in the
      declaration.
      (3) Stream I/O is an alternative to record-based I/O.
    file: ~
    file0: ~
    url: https://twitter.com/fortrantip/status/1488844789575569408
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Here is a a survey of Fortran 90 pitfalls. Most are still relevant, but now<br>(1) Derived types can have allocatable components.<br>(2) A pointer can be initialized to null() in the<br>declaration.<br>(3) Stream I/O is an alternative to record-based I/O.<a href="https://t.co/P4tRJyN0Y6">https://t.co/P4tRJyN0Y6</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1488844789575569408?ref_src=twsrc%5Etfw">February 2, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 03-Feb-2022

  # TODO
  - title: Execute_command_line() to pass a command to the shell.
    intro: |
      execute_command_line(command [,wait,exitstat]) is a Fortran 2008 subroutine that issues a command to the shell and returns the exit code exitstat of the command. The program pauses until the command is finished unless wait is PRESENT and .FALSE.
    file: ~
    file0: execute.f90
    url: https://twitter.com/fortrantip/status/1489212898777964545
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">execute_command_line(command [,wait,exitstat]) is a Fortran 2008 subroutine that issues a command to the shell and returns the exit code exitstat of the command. The program pauses until the command is finished unless wait is PRESENT and .FALSE.<a href="https://t.co/XF3s5THxv8">pic.twitter.com/XF3s5THxv8</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1489212898777964545?ref_src=twsrc%5Etfw">February 3, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 04-Feb-2022

  # TODO
  - title: Execute_command_line() can call gnuplot to display a plot during a run.
    intro: |
      &nbsp;
    file: ~
    file0: ~
    url: https://twitter.com/fortrantip/status/1489580579653918729
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://t.co/UW5eVxka7J">https://t.co/UW5eVxka7J</a> <br>execute_command_line() can call gnuplot to display a plot during a run, as done in GitHub project ogpf. Another use is execute_command_line(&quot;ls data/*.csv &gt; list.txt&quot;) to create a list of files to process.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1489580579653918729?ref_src=twsrc%5Etfw">February 4, 2022</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
