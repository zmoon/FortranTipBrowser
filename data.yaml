#

tips:

  # 17-Dec-2021

  - title: Hello World
    intro: |
      [Hello World](https://en.wikipedia.org/wiki/%22Hello,_World!%22_program) in Fortran is
    file: hello-world.f90
    concl: |
      (Every Fortran program must have an `end` statement.)
    url: https://twitter.com/fortrantip/status/1471887565745799173
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Hello World in Fortran is<br><br>print*,&quot;Hello, World.&quot;<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471887565745799173?ref_src=twsrc%5Etfw">December 17, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: Intrinsic data types
    intro: |
      Fortran has 5 intrinsic data types: integer, real, complex, logical, and character.
      The types have various `kind`s that determine the range of data they can represent.
    file: ~
    url: https://twitter.com/fortrantip/status/1471890355561943054
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran has 5 intrinsic data types: integer, real, complex, logical, and character. The types have various KINDs that determine the range of data they can represent.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471890355561943054?ref_src=twsrc%5Etfw">December 17, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: '`do` loop'
    intro: |
      The primary looping construct in Fortran is `do` ... `end do`.
      A program to print the sum the squares of the integers from 1 to 5 is
    file: do-enddo.f90
    url: https://twitter.com/fortrantip/status/1471891644370796550
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The primary looping construct in Fortran is do ... end do. A program to print the sum the squares of the integers from 1 to 5 is<br><br>implicit none<br>integer :: i,ssq<br>ssq = 0<br>do i=1,5<br> ssq = ssq + i**2<br>end do<br>print*,&quot;sum of squares is &quot;,ssq<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471891644370796550?ref_src=twsrc%5Etfw">December 17, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: '`exit`ing a `do` loop'
    intro: |
      You `exit` a loop as shown in the code below,
      which accumulates the sums of squared integers until the sum exceeds 100.
    file: do-exit.f90
    url: https://twitter.com/fortrantip/status/1471895490346291206
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">You EXIT a loop as shown in the code below, which accumulates the sums of squared integers until the sum exceeds 100<br><br>implicit none<br>integer :: i,ssq<br>ssq = 0<br>i = 0<br>do<br> i = i+1<br> ssq = ssq + i**2<br> if (ssq &gt; 100) exit<br>end do <br>print*,&quot;sum of squares from 1 to &quot;,i,&quot; is&quot;,ssq<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471895490346291206?ref_src=twsrc%5Etfw">December 17, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: Fortran compilers and tutorials
    intro: |
      Two good sites to get started with Fortran are
      <https://fortran-lang.org> and <https://fortranwiki.org/fortran/show/HomePage>.
      A good free compiler is `gfortran`, part of GCC.
      Intel Fortran is also free.
      LFortran is an interactive compiler that covers most but not yet all of Fortran.
    file: ~
    url: https://twitter.com/fortrantip/status/1471897319671046147
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Two good sites to get started with Fortran are <a href="https://t.co/i6lkcIfPqy">https://t.co/i6lkcIfPqy</a> and <a href="https://t.co/uxmVspKsPm">https://t.co/uxmVspKsPm</a> . A good free compiler is gfortran, part of gcc. Intel Fortran is also free. LFortran is an interactive compiler that covers most but not yet all of Fortran.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471897319671046147?ref_src=twsrc%5Etfw">December 17, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: '`**` is the exponentiation operator'
    intro: |
      The exponentiation operator in Fortran is `**`, as in Python.
    file: expon.f90
    concl: |
      Many Fortran operators and intrinsic functions are elemental, and brackets denote arrays.
    url: https://twitter.com/fortrantip/status/1471903802185986050
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The exponentiation operator in Fortran is **, as in Python. <br><br>print*,1.2**2<br><br>gives 1.44<br><br>Many Fortran operators and intrinsic functions are elemental, and brackets denote arrays, so<br><br>print*,[1.0,1.1,1.2,1.3]**2<br><br>gives<br><br>1.00000000 1.21000004 1.44000006 1.68999982</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471903802185986050?ref_src=twsrc%5Etfw">December 17, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: Integer division truncates
    intro: ~
    file: int-trunc.f90
    concl: |
      2/3 = 0 in Fortran because the quotient of two integers is truncated to an integer.
      The quotient of an integer and a real is a real.
    url: https://twitter.com/fortrantip/status/1471936756857643008
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">print*,2+3,2-3,2*3,2/3,2/3.0,2.0/3,2**3<br><br>gives<br><br>5 -1 6 0 0.6666667 0.6666667 8<br><br>2/3 = 0 in Fortran because the quotient of two integers is truncated to an integer. The quotient of an integer and a real is a real.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471936756857643008?ref_src=twsrc%5Etfw">December 17, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: 'Array intrinsic functions: `sum`, `minval`, `maxval`, `minloc`, `findloc`'
    intro: |
      Fortran has many array intrinsic functions. Below, `!` starts a comment.
    file: array-intrinsics.f90
    url: https://twitter.com/fortrantip/status/1471989760046641153
    embed: '<blockquote class="twitter-tweet"><p lang="fr" dir="ltr">Fortran has many array intrinsic functions. Below, ! starts a comment.<br><br>integer, parameter :: vec(3) = [4,1,9]<br>print*,minval(vec),maxval(vec) ! output: 1 9<br>print*,sum(vec),product(vec) ! 14 36<br>print*,minloc(vec),maxloc(vec) ! 2 3<br>print*,findloc(vec,9),findloc(vec,8) ! 3 0<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471989760046641153?ref_src=twsrc%5Etfw">December 17, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: Fortran array sections contain both endpoints
    intro: |
      Fortran array sections contain both endpoints like Julia, Matlab and R, unlike Python.
    file: array-sections.f90
    url: https://twitter.com/fortrantip/status/1471994100161388545
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran array sections contain both endpoints like Julia, Matlab and R, unlike Python.<br><br>integer, parameter :: v(3) = [10,20,30]<br>print*,v(1:2) ! output 10 20<br>print*,v(:2) ! 10 20<br>print*,v(2:3) ! 20 30<br>print*,v(2:) ! 20 30<br>print*,v(::2) ! 10 30 -- stride of 2</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471994100161388545?ref_src=twsrc%5Etfw">December 18, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: Fortran arrays can have any lower bound (the default is 1)
    intro: |
      Fortran arrays can have any lower bound. 
      The default is 1.
      Array functions have optional mask arguments to determine the elements used.    
    file: array-lbound.f90
    url: https://twitter.com/fortrantip/status/1471997763848183810
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran arrays can have any lower bound. <br>The default is 1. Array functions have optional mask arguments to determine the elements used.<br><br>integer :: v(-1:1) = [1,-2,3]<br>print*,lbound(v),ubound(v),size(v) ! -1 1 3<br>print*,sum(v) ! 2<br>print*,sum(v,mask=v&gt;0) ! 4 -- sum excludes -2<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471997763848183810?ref_src=twsrc%5Etfw">December 18, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: '`sum` and other array functions have an optional `dim`ension argument'
    intro: ~
    file: sum-dim.f90
    url: https://twitter.com/fortrantip/status/1472018791525720069
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">sum and other array functions have an optional dim(ension) argument<br><br>integer :: v(2,3) ! 2x3 matrix<br>v(1,:) = [1,2,3]<br>v(2,:) = 10*v(1,:) ! set to [10,20,30]<br>print*,sum(v) ! all elements: 66<br>print*,sum(v,dim=1) ! sum each row: 6 60<br>print*,sum(v,dim=2) ! sum each col: 11 22 33</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472018791525720069?ref_src=twsrc%5Etfw">December 18, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 18-Dec-2021

  - title: Fortran has allocation-on-assignment
    intro: |
      Fortran has allocation on assignment,
      but you cannot use the `allocate` statement for an array that is already allocated.
    file: alloc-on-assign.f90
    url: https://twitter.com/fortrantip/status/1472181598833549316
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran has allocation on assignment, but you cannot use the ALLOCATE statement for an array that is allocated<br><br>integer, allocatable :: v(:)<br>v = [4,9]<br>deallocate(v) ! necessary for line below to work<br>allocate (v,source=[4,9]) ! same as above</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472181598833549316?ref_src=twsrc%5Etfw">December 18, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
    
  - title: 'New Fortran code should use free source form and `.f90` suffix'
    intro: |
      New Fortran code should be written using free source form and stored in a file with a `.f90` file extension.
      Free form was introduced in the Fortran 90 standard,
      but using the `.f90` suffix does NOT mean the code is restricted to Fortran 90 features.
      Don't use the `.f95`, `.f08`, `.f18` suffixes, which are not recognized by many tools.
    file: ~
    url: https://twitter.com/fortrantip/status/1472183935044145157
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">New Fortran code should be written using free source form and stored in a file with the .f90 suffix. Free form was introduced in the Fortran 90 standard, but using the .f90 suffix does NOT mean the code is restricted to Fortran 90 features. Don&#39;t use .f95 .f08 .f18 suffixes.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472183935044145157?ref_src=twsrc%5Etfw">December 18, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: '`if`-`else if`-`end if` block'
    intro: ~
    file: if-block.f90
    url: https://twitter.com/fortrantip/status/1472202678054920196
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If-elseif-endif block:<br><br>integer :: i<br>do i=-1,1<br> print*,i<br> if (i &lt; 0) then<br> print*,&quot;negative&quot;<br> else if (i == 0) then<br> print*,&quot;zero&quot;<br> else<br> print*,&quot;positive&quot;<br> end if<br>end do<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472202678054920196?ref_src=twsrc%5Etfw">December 18, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: '`merge(x, y, cond)`'
    intro: |
      `merge(x, y, cond)` returns `x` if the condition `cond` is true, otherwise `y`.
      We can get the same result as the previous tip:
    file: merge.f90
    concl: |
      Similar to the three-argument usage of
      [`numpy.where`](https://numpy.org/doc/stable/reference/generated/numpy.where.html).
    url: https://twitter.com/fortrantip/status/1472205323763073026
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">merge(x,y,condition) returns x if condition is true, otherwise y. Same output as previous:<br><br>integer :: i<br>do i=-1,1<br> print*,i<br> ! &quot;zero&quot; padded to have same length as &quot;negative&quot;<br> print*,merge(&quot;negative&quot;,merge(&quot;zero &quot;, &amp; <br> &quot;positive&quot;,i==0),i&lt;0)<br>end do<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472205323763073026?ref_src=twsrc%5Etfw">December 18, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: 'An array of character variables has elements of the same `len`gth'
    intro: ~
    file: char-array.f90
    url: https://twitter.com/fortrantip/status/1472207576133783564
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">An array of character variables has elements of the same LEN(gth).<br><br>character(len=5) :: w(3)<br>w = [&quot;one&quot;,&quot;four&quot;,&quot;seven&quot;] ! invalid<br>w = [&quot;one &quot;,&quot;four &quot;,&quot;seven&quot;] ! same as below<br>w = [character(5) :: &quot;one&quot;,&quot;four&quot;,&quot;seven&quot;] <br>print*,w<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472207576133783564?ref_src=twsrc%5Etfw">December 18, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: Character variables are padded with spaces at the end if necessary
    intro: |
      Fortran character variables are padded with spaces at the end if necessary.
      The `//` operator concatenates.
      Trim removes trailing spaces.
    file: char-pad.f90
    url: https://twitter.com/fortrantip/status/1472209602074849285
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran character variables are padded with spaces at the end if necessary. The // operator concatenates. Trim removes trailing spaces.<br><br>character (len=5) :: v = &quot;one&quot;<br>print*,&quot;&#39;&quot; // v // &quot;&#39;&quot; ! &#39;one &#39;<br>print*,&quot;&#39;&quot; // trim(v) // &quot;&#39;&quot; ! &#39;one&#39;<br>print*,len(v),len_trim(v) ! 5 3<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472209602074849285?ref_src=twsrc%5Etfw">December 18, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  - title: 'Fortran has a one-line `if`'
    intro: |
      In addition to `if`-`else if`, Fortran has a one-line `if`:

      ```text
      if (condition) executable_statement
      ```
    file: if-one-line.f90
    url: https://twitter.com/fortrantip/status/1472365082067755017
    embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In addition to if-elseif, Fortran has a one-line if:<br>if (condition) executable_statement<br><br>integer :: i<br>do i=-1,1<br> if (i /= 0) print*,i,1/i ! one-line if equivalent to below<br> if (i /= 0) then<br> print*,i,1/i<br> end if<br>end do<br>end<br>! output:<br>! -1 -1<br>! -1 -1<br>! 1 1<br>! 1 1</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472365082067755017?ref_src=twsrc%5Etfw">December 19, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'

  # 19-Dec-2021 (first day that stored source files in the Beliavsky/FortranTip repo)


  # ...

  - title: Function overloading using an interface with module procedures
    intro: Demonstrate overloading with an interface and module procedures.
    file: interface.f90
    url: https://twitter.com/fortrantip/status/1472629090758836229
