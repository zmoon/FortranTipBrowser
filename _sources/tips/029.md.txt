# 029. Subroutines can have `intent(in out)` arguments, but functions should not

A procedure argument can be `intent(in out)`,
which means that it is an input that can be overwritten.
Functions should not have such arguments, but subroutines often do.
`intent(out)` means the argument is set to uninitialized upon entering the procedure.

```{literalinclude} ../../src/intent-in-out.f90
:language: fortran
:caption: intent-in-out.f90 | <a href="https://github.com/zmoon/FortranTipBrowser/blob/main/src/intent-in-out.f90" target="_blank" title="See this source on GitHub"><i class="fab fa-github"></i></a> | <a href="https://github.com/Beliavsky/FortranTip/blob/main/intent_in_out.f90" target="_blank" title="See the original source on Beliavsky/FortranTip GitHub"><i class="fab fa-github"></i><sub>0</sub></a> | <a href="https://godbolt.org/#g:!((g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:fortran,selection:(endColumn:1,endLineNumber:19,positionColumn:1,positionLineNumber:19,selectionStartColumn:1,selectionStartLineNumber:19,startColumn:1,startLineNumber:19),source:'program+intent_in_out%0A+++implicit+none%0A+++real+::+x(3)%0A%0A+++x+%3D+%5B1.,+4.,+5.%5D%0A+++call+normalize(x)%0A+++print+*,+x++!!+0.1+0.4+0.5%0A%0Acontains%0A%0A+++subroutine+normalize(x)%0A++++++!!+Scale+%60x%60+so+that+%60sum(x)%60+%3D+1.%0A++++++real,+intent(in+out)+::+x(:)%0A++++++real+++++++++++++++++::+xsum%0A++++++xsum+%3D+sum(x)%0A++++++if+(xsum+/%3D+0)+x+%3D+x/xsum%0A+++end+subroutine+normalize%0A%0Aend+program+intent_in_out%0A'),l:'5',n:'0',o:'Fortran+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:gfortran112,filters:(b:'0',binary:'1',commentOnly:'0',demangle:'0',directives:'0',execute:'0',intel:'0',libraryCode:'0',trim:'1'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:fortran,libs:!(),options:'',selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1,tree:'1'),l:'5',n:'0',o:'x86-64+gfortran+11.2+(Fortran,+Editor+%231,+Compiler+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',m:62.300683371298405,n:'0',o:'',t:'0'),(g:!((h:output,i:(compiler:1,editor:1,fontScale:14,fontUsePx:'0',tree:'1',wrap:'1'),l:'5',n:'0',o:'Output+of+x86-64+gfortran+11.2+(Compiler+%231)',t:'0')),header:(),l:'4',m:37.699316628701595,n:'0',o:'',s:0,t:'0')),l:'3',n:'0',o:'',t:'0')),version:4" target="_blank" title="Open in Godbolt Compiler Explorer"><img src="https://raw.githubusercontent.com/compiler-explorer/compiler-explorer/main/views/resources/site-logo.svg" alt="Godbolt Compiler Explorer logo" width="55.11" height="16.7" class="align-text-bottom" /></a>
```

```{code-block} text
:caption: Output[^gfortran-version]

  0.100000001      0.400000006      0.500000000    

```

[^gfortran-version]: Compiled using `GNU Fortran (Ubuntu 11.1.0-1ubuntu1~20.04) 11.1.0` with no flags

---

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a href="https://t.co/3FjJkJUHSn">pic.twitter.com/3FjJkJUHSn</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472696912541364224?ref_src=twsrc%5Etfw">December 19, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>