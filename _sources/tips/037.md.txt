# <span class='text-muted'>037.</span> Using `read` and `write` for file I/O

<span style='font-size: small;' class='text-muted'>topic: {ref}`input-and-output`</span>

To `read` or `write` data from a file, it must first be connected to a unit.
The `newunit` specifier, introduced in Fortran 2008, finds a free unit number.

The program below writes some data to a file and then reads it back.
When the number of records[^1] in a file is unknown, set and check the `iostat` of `read`,
as shown[^2].

[^1]: lines
[^2]: and as in the previous tip

```{literalinclude} ../../src/write-read-file.f90
:language: fortran
:caption: write-read-file.f90 | <a href="https://github.com/zmoon/FortranTipBrowser/blob/main/src/write-read-file.f90" target="_blank" title="See this source on GitHub"><i class="fab fa-github"></i></a> | <a href="https://github.com/Beliavsky/FortranTip/blob/main/read_write_file.f90" target="_blank" title="See the original source on Beliavsky/FortranTip GitHub"><i class="fab fa-github"></i><sub>0</sub></a> | <a href="https://godbolt.org/#g:!((g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:fortran,selection:(endColumn:1,endLineNumber:35,positionColumn:1,positionLineNumber:35,selectionStartColumn:1,selectionStartLineNumber:35,startColumn:1,startLineNumber:35),source:'program+read_write%0A+++implicit+none%0A+++%0A+++integer,+parameter+::+max_read+%3D+10**6%0A+++integer+::+i,+ierr,+iunit,+nread%0A+++integer,+allocatable+::+vec_write(:),+vec_read(:)%0A+++character(len%3D*),+parameter+::+data_file+%3D+%22temp.txt%22%0A+++%0A+++vec_write+%3D+%5B1,+4,+9%5D%0A%0A+++!!+Connect+file+to+unit+%60iunit%60+for+writing%0A+++print+*,+%22initial+(unset)+iunit+%3D%22,+iunit%0A+++open+(newunit%3Diunit,+file%3Ddata_file,+action%3D%22write%22,+status%3D%22replace%22)%0A+++print+*,+%22iunit+for+writing+%3D%22,+iunit%0A+++do+i+%3D+1,+size(vec_write)%0A++++++write+(iunit,+*)+vec_write(i)++!!+Write+one+element+of+%60vec_write%60+per+line%0A+++end+do%0A+++close+(iunit)++!!+Close+the+connection+to+the+file%0A%0A+++!!+Connect+file+to+unit+%60iunit%60+for+reading%0A+++open+(newunit%3Diunit,+file%3Ddata_file,+action%3D%22read%22,+status%3D%22old%22)%0A+++print+*,+%22iunit+for+reading+%3D%22,+iunit%0A+++allocate+(vec_read(max_read))%0A+++nread+%3D+max_read%0A+++do+i+%3D+1,+max_read%0A++++++read+(iunit,+*,+iostat%3Dierr)+vec_read(i)++!!+Read+one+element+of+%60vec_read%60+per+line%0A++++++if+(ierr+/%3D+0)+then++!!+Reached+end+of+file%0A+++++++++nread+%3D+i+-+1%0A+++++++++exit%0A++++++end+if%0A+++end+do%0A+++print+*,+%22%23+read+%3D%22,+nread%0A+++print+*,+%22data+read+%3D%22,+vec_read(:nread)%0A%0Aend+program+read_write%0A'),l:'5',n:'0',o:'Fortran+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:gfortran112,filters:(b:'0',binary:'1',commentOnly:'0',demangle:'0',directives:'0',execute:'0',intel:'0',libraryCode:'0',trim:'1'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:fortran,libs:!(),options:'',selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1,tree:'1'),l:'5',n:'0',o:'x86-64+gfortran+11.2+(Fortran,+Editor+%231,+Compiler+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',m:62.300683371298405,n:'0',o:'',t:'0'),(g:!((h:output,i:(compiler:1,editor:1,fontScale:14,fontUsePx:'0',tree:'1',wrap:'1'),l:'5',n:'0',o:'Output+of+x86-64+gfortran+11.2+(Compiler+%231)',t:'0')),header:(),l:'4',m:37.699316628701595,n:'0',o:'',s:0,t:'0')),l:'3',n:'0',o:'',t:'0')),version:4" target="_blank" title="Open in Godbolt Compiler Explorer"><img src="https://raw.githubusercontent.com/compiler-explorer/compiler-explorer/main/views/resources/site-logo.svg" alt="Godbolt Compiler Explorer logo" width="55.11" height="16.7" class="align-text-bottom" /></a>
```

```{code-block} text
:caption: Output[^gfortran-version]

 initial (unset) iunit =           0
 iunit for writing =         -10
 iunit for reading =         -10
 # read =           3
 data read =           1           4           9

```

[^gfortran-version]: Compiled using `GNU Fortran (Ubuntu 11.2.0-19ubuntu1) 11.2.0` with no flags

```{note}
The initial (unset) value of `iunit` here is compiler-dependent,
and the used `iunit` values created by using `newunit` are compiler- and situation-dependent.
```

---

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Using READ and WRITE for file i/o. <a href="https://t.co/Be3gH8SLnL">pic.twitter.com/Be3gH8SLnL</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472999893631447043?ref_src=twsrc%5Etfw">December 20, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>