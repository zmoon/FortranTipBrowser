# <span class='text-muted'>040.</span> If allocation errors must be handled, use `allocatable` rather than automatic arrays in procedures

<span style='font-size: small;' class='text-muted'>topic: {ref}`allocation`</span>

If allocation errors must be handled, use `allocatable` rather than automatic arrays in procedures,
and check the `stat` of `allocate` in order to handle errors.

```{literalinclude} ../../src/alloc-stat.f90
:language: fortran
:caption: alloc-stat.f90 | <a href="https://github.com/zmoon/FortranTipBrowser/blob/main/src/alloc-stat.f90" target="_blank" title="See this source on GitHub"><i class="fab fa-github"></i></a> | <a href="https://github.com/Beliavsky/FortranTip/blob/main/automatic.f90" target="_blank" title="See the original source on Beliavsky/FortranTip GitHub"><i class="fab fa-github"></i><sub>0</sub></a> | <a href="https://godbolt.org/#g:!((g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:fortran,selection:(endColumn:1,endLineNumber:19,positionColumn:1,positionLineNumber:19,selectionStartColumn:1,selectionStartLineNumber:19,startColumn:1,startLineNumber:19),source:'program+alloc_stat%0A+++implicit+none%0A%0A+++real,+allocatable+::+x(:)%0A+++integer+::+ierr%0A%0A+++!!+Initial+allocation%0A+++allocate+(x(5))%0A+++print+*,+allocated(x)++!!+Confirm%0A%0A+++!!+Trying+to+allocate+again+will+error%0A+++allocate+(x(42),+stat%3Dierr)%0A+++if+(ierr+/%3D+0)+then%0A++++++print+*,+%22error%22,+ierr%0A+++else%0A++++++print+*,+%22it+worked%22%0A+++end+if%0A%0Aend+program+alloc_stat%0A'),l:'5',n:'0',o:'Fortran+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:gfortran112,filters:(b:'0',binary:'1',commentOnly:'0',demangle:'0',directives:'0',execute:'0',intel:'0',libraryCode:'0',trim:'1'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:fortran,libs:!(),options:'',selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1,tree:'1'),l:'5',n:'0',o:'x86-64+gfortran+11.2+(Fortran,+Editor+%231,+Compiler+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',m:62.300683371298405,n:'0',o:'',t:'0'),(g:!((h:output,i:(compiler:1,editor:1,fontScale:14,fontUsePx:'0',tree:'1',wrap:'1'),l:'5',n:'0',o:'Output+of+x86-64+gfortran+11.2+(Compiler+%231)',t:'0')),header:(),l:'4',m:37.699316628701595,n:'0',o:'',s:0,t:'0')),l:'3',n:'0',o:'',t:'0')),version:4" target="_blank" title="Open in Godbolt Compiler Explorer"><img src="https://raw.githubusercontent.com/compiler-explorer/compiler-explorer/main/views/resources/site-logo.svg" alt="Godbolt Compiler Explorer logo" width="55.11" height="16.7" class="align-text-bottom" /></a> | <a href="https://play.fortran-lang.org/?code=program%20alloc_stat%0A%20%20%20implicit%20none%0A%0A%20%20%20real%2C%20allocatable%20%3A%3A%20x%28%3A%29%0A%20%20%20integer%20%3A%3A%20ierr%0A%0A%20%20%20%21%20Initial%20allocation%0A%20%20%20allocate%20%28x%285%29%29%0A%20%20%20print%20%2A%2C%20allocated%28x%29%20%20%21%20Confirm%0A%0A%20%20%20%21%20Trying%20to%20allocate%20again%20will%20error%0A%20%20%20allocate%20%28x%2842%29%2C%20stat%3Dierr%29%0A%20%20%20if%20%28ierr%20/%3D%200%29%20then%0A%20%20%20%20%20%20print%20%2A%2C%20%22error%22%2C%20ierr%0A%20%20%20else%0A%20%20%20%20%20%20print%20%2A%2C%20%22it%20worked%22%0A%20%20%20end%20if%0A%0Aend%20program%20alloc_stat%0A" target="_blank" title="Open in Fortran Playground"><img src="https://raw.githubusercontent.com/fortran-lang/playground/main/frontend/src/fortran-logo.png" alt="Fortran logo" height="15.5" class="align-text-bottom" /></a>
```

```{code-block} text
:caption: Output[^gfortran-version]

 T
 error        5014

```

[^gfortran-version]: Compiled using `GNU Fortran (Ubuntu 11.2.0-19ubuntu1) 11.2.0` with no flags

From the Tweet, an example of handling this in a subroutine,
considering the case of insufficient memory:
```fortran
subroutine foo(x)
   implicit none

   real, intent(in) :: x(:)
   real :: y(size(x))
   ! ^ Automatic array -- program crashes if there is no memory for it
   real, allocatable :: z(:)
   integer :: ierr

   allocate (z(size(x)), stat=ierr)
   if (ierr /= 0) then  ! Handle allocation errors
      print *, "could not allocate z in foo"
      return
   end if

end subroutine foo
```

---

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If allocation errors must be handled, use ALLOCATABLE rather than automatic arrays in procedures, and check the STAT of ALLOCATE. <a href="https://t.co/EV4jE4pfdx">pic.twitter.com/EV4jE4pfdx</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473636468405030913?ref_src=twsrc%5Etfw">December 22, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>