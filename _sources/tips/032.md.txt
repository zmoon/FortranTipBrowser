# 032. Use `parameter`s in modules to define constants

A physical or mathematical constant such as $\pi$ that will be used 
in many parts of a program should be defined as a `parameter` in a 
module that is `use`d where needed.
In the code below, `pi` is used both in module `m` and the main program.

```{literalinclude} ../../src/module-parameter.f90
:language: fortran
:caption: module-parameter.f90 | <a href="https://github.com/zmoon/FortranTipBrowser/blob/main/src/module-parameter.f90" target="_blank"><i class="fab fa-github"></i></a> | <a href="https://github.com/Beliavsky/FortranTip/blob/main/module_parameter.f90" target="_blank"><i class="fab fa-github"></i><sub>0</sub></a> | <a href="https://godbolt.org/#g:!((g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:fortran,selection:(endColumn:1,endLineNumber:34,positionColumn:1,positionLineNumber:34,selectionStartColumn:1,selectionStartLineNumber:34,startColumn:1,startLineNumber:34),source:'module+constants_mod%0A+++implicit+none%0A+++private%0A+++public+::+pi%0A%0A+++real,+parameter+::+pi+%3D+3.14159%0A%0Aend+module+constants_mod%0A%0Amodule+m%0A+++use+constants_mod,+only:+pi%0A+++implicit+none%0A+++private%0A+++public+::+area_circle%0A%0Acontains%0A%0A+++real+pure+elemental+function+area_circle(radius)+result(area)%0A++++++real,+intent(in)+::+radius%0A++++++area+%3D+pi*radius**2%0A+++end+function+area_circle%0A%0Aend+module+m%0A%0Aprogram+main%0A+++use+constants_mod,+only:+pi%0A+++use+m,+only:+area_circle%0A+++implicit+none%0A%0A+++real,+parameter+::+radius+%3D+10.0%0A%0A+++print+*,+%22circumference,+area+%3D%22,+2*pi*radius,+area_circle(radius)%0A%0Aend+program+main%0A'),l:'5',n:'0',o:'Fortran+source+%231',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:gfortran112,filters:(b:'0',binary:'1',commentOnly:'0',demangle:'0',directives:'0',execute:'0',intel:'0',libraryCode:'0',trim:'1'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:fortran,libs:!(),options:'',selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1,tree:'1'),l:'5',n:'0',o:'x86-64+gfortran+11.2+(Fortran,+Editor+%231,+Compiler+%231)',t:'0')),k:50,l:'4',n:'0',o:'',s:0,t:'0')),l:'2',m:62.300683371298405,n:'0',o:'',t:'0'),(g:!((h:output,i:(compiler:1,editor:1,fontScale:14,fontUsePx:'0',tree:'1',wrap:'1'),l:'5',n:'0',o:'Output+of+x86-64+gfortran+11.2+(Compiler+%231)',t:'0')),header:(),l:'4',m:37.699316628701595,n:'0',o:'',s:0,t:'0')),l:'3',n:'0',o:'',t:'0')),version:4" target="_blank">GodBolt</a>
```

```{code-block} text
:caption: Output[^gfortran-version]

 circumference, area =   62.8318024       314.158997    

```

[^gfortran-version]: Compiled using `GNU Fortran (Ubuntu 11.1.0-1ubuntu1~20.04) 11.1.0` with no flags

One should declare a module `private` and list as `public`
the entities that will be referenced outside the module.
Module entities are public by default.

---

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a href="https://t.co/vWJuAwle97">pic.twitter.com/vWJuAwle97</a></p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472718436040073226?ref_src=twsrc%5Etfw">December 20, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>