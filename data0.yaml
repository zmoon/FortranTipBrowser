# !! This file is autogenerated by auto-data.py !!
- datetime: 2022-01-11 08:26:00
  file_links:
  - target: ./arguments.f90
    text: arguments.f90
  title: Procedures can be called with a mix of named and positional arguments.
  tweet_created_at: '2022-01-11T13:26:19.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Procedures
    can be called with a mix of named and positional arguments, but positional arguments
    cannot follow named ones. Naming arguments makes it easier to add arguments without
    breaking code. It&#39;s good to<br>name OPTIONAL arguments.<a href="https://t.co/rIl2jM0DTA">pic.twitter.com/rIl2jM0DTA</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1480893840068390913?ref_src=twsrc%5Etfw">January
    11, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1480893840068390913'
  tweet_text: 'Procedures can be called with a mix of named and positional arguments,
    but positional arguments cannot follow named ones. Naming arguments makes it easier
    to add arguments without breaking code. It''s good to

    name OPTIONAL arguments.

    https://t.co/rIl2jM0DTA'
- datetime: 2022-01-10 11:59:00
  file_links: []
  title: UnALLOCATED variable passed to a procedure is not PRESENT there.
  tweet_created_at: '2022-01-10T16:59:31.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A variable
    that is not ALLOCATED, when passed as an OPTIONAL, non-allocatable argument to
    a procedure, is considered not PRESENT there. This Fortran 2008 feature can simplify
    code. <a href="https://t.co/TdSd5Jv0Pt">https://t.co/TdSd5Jv0Pt</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1480585104997163018?ref_src=twsrc%5Etfw">January
    10, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1480585104997163018'
  tweet_text: A variable that is not ALLOCATED, when passed as an OPTIONAL, non-allocatable
    argument to a procedure, is considered not PRESENT there. This Fortran 2008 feature
    can simplify code. https://t.co/TdSd5Jv0Pt
- datetime: 2022-01-09 08:00:00
  file_links:
  - target: ./dimension.f90
    text: dimension.f90
  title: DIMENSION can be used to declare several arrays of the same SHAPE
  tweet_created_at: '2022-01-09T13:00:39.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">DIMENSION
    can be used to declare several arrays of the same SHAPE, which can be overridden
    on the same line.<br><br>real, dimension(3,4) :: x, y, z(5,6)<br><br>is legal
    but should be written<br><br>real, dimension(3,4) :: x, y<br>real :: z(5,6)<br><br>for
    clarity.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1480162604559523840?ref_src=twsrc%5Etfw">January
    9, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1480162604559523840'
  tweet_text: 'DIMENSION can be used to declare several arrays of the same SHAPE,
    which can be overridden on the same line.


    real, dimension(3,4) :: x, y, z(5,6)


    is legal but should be written


    real, dimension(3,4) :: x, y

    real :: z(5,6)


    for clarity.'
- datetime: 2022-01-08 08:23:00
  file_links:
  - target: ./optional_use.f90
    text: optional_use.f90
  title: Propagation of an optional argument
  tweet_created_at: '2022-01-08T13:23:36.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A procedure
    with an OPTIONAL argument can call a procedure with that argument if it is OPTIONAL
    there too. The PRESENT status of the argument propagates to called procedures.
    The optval function of the Fortran stdlib project exploits this. <a href="https://t.co/amhSL1cbY7">pic.twitter.com/amhSL1cbY7</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1479805991382360066?ref_src=twsrc%5Etfw">January
    8, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1479805991382360066'
  tweet_text: A procedure with an OPTIONAL argument can call a procedure with that
    argument if it is OPTIONAL there too. The PRESENT status of the argument propagates
    to called procedures. The optval function of the Fortran stdlib project exploits
    this. https://t.co/amhSL1cbY7
- datetime: 2022-01-07 21:28:00
  file_links:
  - target: ./function.txt
    text: function.f90](./function.f90) [function.txt
  title: Two types of syntax for defining a function
  tweet_created_at: '2022-01-08T02:28:46.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Ways of defining
    a function:<br><br>1. Function and result name are the same.<br><br>2. RESULT
    has a different name within the function, which can be used<br>to return an array.<br><br>RETURN,
    when needed, is used to exit the function, not set its value. <a href="https://t.co/TYdVDZPwCz">pic.twitter.com/TYdVDZPwCz</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1479641195898826754?ref_src=twsrc%5Etfw">January
    8, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1479641195898826754'
  tweet_text: 'Ways of defining a function:


    1. Function and result name are the same.


    2. RESULT has a different name within the function, which can be used

    to return an array.


    RETURN, when needed, is used to exit the function, not set its value. https://t.co/TYdVDZPwCz'
- datetime: 2022-01-07 11:19:00
  file_links:
  - target: ./character_array.f90
    text: character_array.f90
  title: Syntax for character array without manual padding
  tweet_created_at: '2022-01-07T16:19:09.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran 2003
    lets you write an array of character variables as<br><br>s = [character (len=4)
    :: &quot;one&quot;,&quot;two&quot;,&quot;five&quot;]<br><br>instead of<br><br>s
    = [&quot;one &quot;,&quot;two &quot;,&quot;five&quot;] ! &quot;one&quot; and &quot;two&quot;
    padded<br><br>Manually padding large arrays of strings is a pain.<a href="https://t.co/TH7x2tQ5Wz">pic.twitter.com/TH7x2tQ5Wz</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1479487784205402116?ref_src=twsrc%5Etfw">January
    7, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1479487784205402116'
  tweet_text: 'Fortran 2003 lets you write an array of character variables as


    s = [character (len=4) :: "one","two","five"]


    instead of


    s = ["one ","two ","five"] ! "one" and "two" padded


    Manually padding large arrays of strings is a pain.

    https://t.co/TH7x2tQ5Wz'
- datetime: 2022-01-07 04:58:00
  file_links:
  - target: ./string_func.f90
    text: string_func.f90
  title: Intrinsic character functions
  tweet_created_at: '2022-01-07T09:58:16.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Character
    functions:<br><br>scan(x,y): first position of a character in x found in y<br>verify(x,y):
    first position in x NOT found in y<br>index(x,y): first position of substring
    y in x<br>adjustl/adjustr: remove leading/trailing spaces and pad to preserve
    LEN<a href="https://t.co/ZQZUyRq86b">pic.twitter.com/ZQZUyRq86b</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1479391930744283144?ref_src=twsrc%5Etfw">January
    7, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1479391930744283144'
  tweet_text: 'Character functions:


    scan(x,y): first position of a character in x found in y

    verify(x,y): first position in x NOT found in y

    index(x,y): first position of substring y in x

    adjustl/adjustr: remove leading/trailing spaces and pad to preserve LEN

    https://t.co/ZQZUyRq86b'
- datetime: 2022-01-06 11:31:00
  file_links:
  - target: ./substring.f90
    text: substring.f90
  title: Substrings of character variable arrays
  tweet_created_at: '2022-01-06T16:31:56.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">For variables<br><br>character
    (len=10) :: s, v(5)<br><br>s(2:4) is the substring from positions 2 to 4 and v(1:3)(2:4)
    is an array of substrings from <br>positions 2 to 4 of the elements v(1) to v(3).
    <a href="https://t.co/h5AIaZwYL2">pic.twitter.com/h5AIaZwYL2</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1479128610623606787?ref_src=twsrc%5Etfw">January
    6, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1479128610623606787'
  tweet_text: "For variables\n\ncharacter (len=10) :: s, v(5)\n\ns(2:4) is the substring\
    \ from positions 2 to 4 and v(1:3)(2:4) is an array of substrings from \npositions\
    \ 2 to 4 of the elements v(1) to v(3). https://t.co/h5AIaZwYL2"
- datetime: 2022-01-06 07:44:00
  file_links:
  - target: ./overlapping_arg.f90
    text: overlapping_arg.f90
  title: Parenthesize a variable to copy it "on the fly".
  tweet_created_at: '2022-01-06T12:44:56.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Parenthesize
    a variable to copy it &quot;on the fly&quot; to avoid overlapping INTENT(IN) and
    INTENT(OUT) arguments, which is non-standard, for example writing<br><br>call
    double((i),i)<br><br>instead of<br><br>call double(i,i) ! bad if args are intent(in)
    and intent(out)<a href="https://t.co/WqS0AvVcCE">pic.twitter.com/WqS0AvVcCE</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1479071485859962880?ref_src=twsrc%5Etfw">January
    6, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1479071485859962880'
  tweet_text: 'Parenthesize a variable to copy it "on the fly" to avoid overlapping
    INTENT(IN) and INTENT(OUT) arguments, which is non-standard, for example writing


    call double((i),i)


    instead of


    call double(i,i) ! bad if args are intent(in) and intent(out)

    https://t.co/WqS0AvVcCE'
- datetime: 2022-01-05 11:28:00
  file_links:
  - target: ./pow_real.f90
    text: pow_real.f90
  title: Use integer powers when possible.
  tweet_created_at: '2022-01-05T16:28:42.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use integer
    powers when possible, writing x**2 instead of x**2.0, since depending on the compiler
    option used, the latter may be computed as exp(2*log(x)), which is slower. <a
    href="https://t.co/vlBznFvWIf">pic.twitter.com/vlBznFvWIf</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478765410405298176?ref_src=twsrc%5Etfw">January
    5, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1478765410405298176'
  tweet_text: Use integer powers when possible, writing x**2 instead of x**2.0, since
    depending on the compiler option used, the latter may be computed as exp(2*log(x)),
    which is slower. https://t.co/vlBznFvWIf
- datetime: 2022-01-05 08:02:00
  file_links:
  - target: ./precision.f90
    text: precision.f90
  title: Use d0 or \_kind to make a constant double precision.
  tweet_created_at: '2022-01-05T13:02:34.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use d0 or
    _kind to make a constant double precision. Merely having many decimal places in
    a literal constant does not do so.<br><br>real(kind(1.0d0)) :: pi<br>pi = 3.14159265358979323846
    ! RHS is single precision<br><br>probably does not do what the programmer intends!
    <a href="https://t.co/T9hNCwfcE2">pic.twitter.com/T9hNCwfcE2</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478713534850736129?ref_src=twsrc%5Etfw">January
    5, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1478713534850736129'
  tweet_text: 'Use d0 or _kind to make a constant double precision. Merely having
    many decimal places in a literal constant does not do so.


    real(kind(1.0d0)) :: pi

    pi = 3.14159265358979323846 ! RHS is single precision


    probably does not do what the programmer intends! https://t.co/T9hNCwfcE2'
- datetime: 2022-01-04 19:39:00
  file_links: []
  title: KIND numbers of types are not portable across compilers and should not be
    used directly.
  tweet_created_at: '2022-01-05T00:39:46.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">KIND numbers
    of types are not portable across compilers and should not be used directly. It&#39;s
    better to use the named constants from iso_fortran_env. For both gfortran and
    Intel Fortran<br><br>use iso_fortran_env<br>print*,int8,int16,int32,int64<br><br>gives
    1 2 4 8, but NAG gives 1 2 3 4.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478526602136981511?ref_src=twsrc%5Etfw">January
    5, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1478526602136981511'
  tweet_text: 'KIND numbers of types are not portable across compilers and should
    not be used directly. It''s better to use the named constants from iso_fortran_env.
    For both gfortran and Intel Fortran


    use iso_fortran_env

    print*,int8,int16,int32,int64


    gives 1 2 4 8, but NAG gives 1 2 3 4.'
- datetime: 2022-01-04 08:50:00
  file_links:
  - target: https://onlinegdb.com/BCZzmjYxs
    text: 'implicit_save.f90](./implicit_save.f90): [run'
  title: Avoid implicit save
  tweet_created_at: '2022-01-04T13:50:50.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A variable
    given a value in the declaration has the implicit SAVE attribute and is not re-initialized
    in later calls to the procedure. Write<br><br>integer :: i<br>i = 0<br><br>instead
    of <br><br>integer :: i = 0<br><br>If SAVE is intended be explicit:<br><br>integer,
    save :: i = 0<a href="https://t.co/X1ZUSZblZX">pic.twitter.com/X1ZUSZblZX</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478363292028784645?ref_src=twsrc%5Etfw">January
    4, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1478363292028784645'
  tweet_text: "A variable given a value in the declaration has the implicit SAVE attribute\
    \ and is not re-initialized in later calls to the procedure. Write\n\ninteger\
    \ :: i\ni = 0\n\ninstead of \n\ninteger :: i = 0\n\nIf SAVE is intended be explicit:\n\
    \ninteger, save :: i = 0\nhttps://t.co/X1ZUSZblZX"
- datetime: 2022-01-04 06:45:00
  file_links: []
  title: Use parameters to dimension fixed-size arrays to make a code easier to change
  tweet_created_at: '2022-01-04T11:45:14.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use parameters
    to dimension fixed-size arrays to make a code easier to change, for example<br><br>integer,
    parameter :: n1=3,n2=5<br>real :: x(n1,n2),y(n1,n2),z(n1,n2)<br><br>or<br><br>real,
    dimension(n1,n2) :: x,y,z<br><br>Numbers other than 0 or 1 should not appear repeatedly
    and should be parameters.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478331686412861440?ref_src=twsrc%5Etfw">January
    4, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1478331686412861440'
  tweet_text: 'Use parameters to dimension fixed-size arrays to make a code easier
    to change, for example


    integer, parameter :: n1=3,n2=5

    real :: x(n1,n2),y(n1,n2),z(n1,n2)


    or


    real, dimension(n1,n2) :: x,y,z


    Numbers other than 0 or 1 should not appear repeatedly and should be parameters.'
- datetime: 2022-01-03 19:24:00
  file_links:
  - target: ./im_re.f90
    text: im_re.f90
  title: Fortran 2008 introduced z%re and z%im as alternatives to real(z) and aimag(z)
  tweet_created_at: '2022-01-04T00:24:05.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran 2008
    introduced z%re and z%im as alternatives to real(z) and aimag(z) to refer to the
    real and imaginary parts of a complex variable z, either scalar or array. The
    %re and %im syntax does not apply to expressions, so (2*z)%im is disallowed. <a
    href="https://t.co/GcspgfI4zB">pic.twitter.com/GcspgfI4zB</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478160269671124993?ref_src=twsrc%5Etfw">January
    4, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1478160269671124993'
  tweet_text: Fortran 2008 introduced z%re and z%im as alternatives to real(z) and
    aimag(z) to refer to the real and imaginary parts of a complex variable z, either
    scalar or array. The %re and %im syntax does not apply to expressions, so (2*z)%im
    is disallowed. https://t.co/GcspgfI4zB
- datetime: 2022-01-03 10:47:00
  file_links:
  - target: ./kindfind.f90
    text: kindfind.f90
  title: KindFinder code finds all KIND Values implemented by a compiler
  tweet_created_at: '2022-01-03T15:47:43.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The KindFinder
    Fortran 90 code of Werner Schulz can also find<br>all KIND Values implemented
    by a compiler, list the properties of the associated numeric models, and generate
    a KIND parameter module.<a href="https://t.co/RY5uLdCMXl">pic.twitter.com/RY5uLdCMXl</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478030318485577728?ref_src=twsrc%5Etfw">January
    3, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1478030318485577728'
  tweet_text: 'The KindFinder Fortran 90 code of Werner Schulz can also find

    all KIND Values implemented by a compiler, list the properties of the associated
    numeric models, and generate a KIND parameter module.

    https://t.co/RY5uLdCMXl'
- datetime: 2022-01-03 07:51:00
  file_links:
  - target: ./iso_kinds.f90
    text: iso_kinds.f90
  title: Real and integer KIND constants from iso_fortran_env; HUGE() and TINY()
  tweet_created_at: '2022-01-03T12:51:13.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Module iso_fortran_env
    has KIND constants int8, int16, int32, int64 for integers with those storage sizes
    and real32, real64, real128 for reals.<br>Use huge(x) and tiny(x) to get the largest
    and smallest numbers of type real x and huge(i) for integer i.<a href="https://t.co/1T3srjZIsX">pic.twitter.com/1T3srjZIsX</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477985901145993221?ref_src=twsrc%5Etfw">January
    3, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1477985901145993221'
  tweet_text: 'Module iso_fortran_env has KIND constants int8, int16, int32, int64
    for integers with those storage sizes and real32, real64, real128 for reals.

    Use huge(x) and tiny(x) to get the largest and smallest numbers of type real x
    and huge(i) for integer i.

    https://t.co/1T3srjZIsX'
- datetime: 2022-01-02 18:47:00
  file_links:
  - target: ./advance_no.f90
    text: advance_no.f90
  title: Advance="no" specifier of WRITE
  tweet_created_at: '2022-01-02T23:47:03.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">WRITE inserts
    a newline at the end, which can be avoided with the<br>advance=&quot;no&quot;
    specifier. This is useful for prompting input and reading it from the same line
    and for printing an unknown amount of data with one format before another format.
    From zoziha.<a href="https://t.co/38h3L99q8Q">pic.twitter.com/38h3L99q8Q</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477788560359141382?ref_src=twsrc%5Etfw">January
    2, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1477788560359141382'
  tweet_text: 'WRITE inserts a newline at the end, which can be avoided with the

    advance="no" specifier. This is useful for prompting input and reading it from
    the same line and for printing an unknown amount of data with one format before
    another format. From zoziha.

    https://t.co/38h3L99q8Q'
- datetime: 2022-01-02 08:27:00
  file_links:
  - target: ./join.f90
    text: join.f90
  title: Len of character variable function result can depend on arguments
  tweet_created_at: '2022-01-02T13:27:41.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The LEN of
    a character variable function RESULT can also depend on intrinsic functions of
    the arguments.  <a href="https://t.co/6vXoO79BAK">pic.twitter.com/6vXoO79BAK</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477632693617799169?ref_src=twsrc%5Etfw">January
    2, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1477632693617799169'
  tweet_text: The LEN of a character variable function RESULT can also depend on intrinsic
    functions of the arguments.  https://t.co/6vXoO79BAK
- datetime: 2022-01-02 06:42:00
  file_links:
  - target: ./array_func.f90
    text: array_func.f90
  title: How size of an array function result can depend on function arguments
  tweet_created_at: '2022-01-02T11:42:43.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The SIZE
    of a function result can be an argument, depend on an intrinsic function of an
    argument such as SIZE, or have an arbitrary dependence if the result is allocatable.
    <a href="https://t.co/MKlJOXn4yZ">pic.twitter.com/MKlJOXn4yZ</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477606275643019269?ref_src=twsrc%5Etfw">January
    2, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1477606275643019269'
  tweet_text: The SIZE of a function result can be an argument, depend on an intrinsic
    function of an argument such as SIZE, or have an arbitrary dependence if the result
    is allocatable. https://t.co/MKlJOXn4yZ
- datetime: 2022-01-01 09:00:00
  file_links:
  - target: ./lower_case.f90
    text: lower_case.f90
  title: Do case-insensitive string comparisons by converting to lower case
  tweet_created_at: '2022-01-01T14:00:52.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Character
    variables are case-sensitive, and to compare two strings ignoring case you can
    first convert them to lower case. <a href="https://t.co/D4tnPO8tLE">pic.twitter.com/D4tnPO8tLE</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477278656376590340?ref_src=twsrc%5Etfw">January
    1, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1477278656376590340'
  tweet_text: Character variables are case-sensitive, and to compare two strings ignoring
    case you can first convert them to lower case. https://t.co/D4tnPO8tLE
- datetime: 2022-01-01 09:16:00
  file_links: []
  title: Fortran-lang suggested variable naming conventions
  tweet_created_at: '2022-01-01T14:16:40.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran-lang
    Best Practices:<br>1. Use lower case for all Fortran constructs, such as do, end
    do, if, then<br>2. Follow short mathematical notation for mathematical variables/functions<br>3.
    For other names use all lower case<br><br>Details at<a href="https://t.co/WHTD1MAbFq">https://t.co/WHTD1MAbFq</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477282631553269764?ref_src=twsrc%5Etfw">January
    1, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1477282631553269764'
  tweet_text: 'Fortran-lang Best Practices:

    1. Use lower case for all Fortran constructs, such as do, end do, if, then

    2. Follow short mathematical notation for mathematical variables/functions

    3. For other names use all lower case


    Details at

    https://t.co/WHTD1MAbFq'
- datetime: 2022-01-01 10:49:00
  file_links:
  - target: ./case_insensitivity.f90
    text: case_insensitivity.f90
  title: Case insensitivity
  tweet_created_at: '2022-01-01T10:49:47.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran used
    to be written entirely in UPPERCASE, but is now case insensitive. However, whilst
    the following example is completely valid, to ensure legibility it&#39;s highly
    recommended to choose a case convention and stick to it! <a href="https://t.co/AMXjjEVsOE">pic.twitter.com/AMXjjEVsOE</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477230568781795334?ref_src=twsrc%5Etfw">January
    1, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1477230568781795334'
  tweet_text: Fortran used to be written entirely in UPPERCASE, but is now case insensitive.
    However, whilst the following example is completely valid, to ensure legibility
    it's highly recommended to choose a case convention and stick to it! https://t.co/AMXjjEVsOE
- datetime: 2021-12-30 20:20:00
  file_links:
  - target: ./subroutine_dt.f90
    text: subroutine_dt.f90
  title: Returning multiple values from a subroutine or function
  tweet_created_at: '2021-12-31T01:20:34.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran cannot
    return multiple values with syntax like<br><br>c, d = f(x)<br><br>You can use
    a subroutine<br><br>call f(x,c,d)<br><br>or a function that returns a derived
    type containing c and d or a function that returns a size-2 array if c and d have
    the same type. <a href="https://t.co/vYr5h8FsMw">pic.twitter.com/vYr5h8FsMw</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1476724929299197962?ref_src=twsrc%5Etfw">December
    31, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1476724929299197962'
  tweet_text: 'Fortran cannot return multiple values with syntax like


    c, d = f(x)


    You can use a subroutine


    call f(x,c,d)


    or a function that returns a derived type containing c and d or a function that
    returns a size-2 array if c and d have the same type. https://t.co/vYr5h8FsMw'
- datetime: 2021-12-30 07:13:00
  file_links: []
  title: MODULO vs. MOD function
  tweet_created_at: '2021-12-30T13:13:25.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran has
    similar MODULO and MOD functions.<br>MODULO (MOD) takes the sign of the 2nd (1st)
    argument.<br><br>print*,modulo([-1,0,1],2)  !   1 0  1<br>print*,mod([-1,0,1],2)        !
    -1 0  1<br>print*,modulo([-1,0,1],-2) ! -1 0 -1<br>print*,mod([-1,0,1],-2)      !
    -1 0   1<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1476541936681066501?ref_src=twsrc%5Etfw">December
    30, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1476541936681066501'
  tweet_text: 'Fortran has similar MODULO and MOD functions.

    MODULO (MOD) takes the sign of the 2nd (1st) argument.


    print*,modulo([-1,0,1],2)  !   1 0  1

    print*,mod([-1,0,1],2)        ! -1 0  1

    print*,modulo([-1,0,1],-2) ! -1 0 -1

    print*,mod([-1,0,1],-2)      ! -1 0   1

    end'
- datetime: 2021-12-29 13:59:00
  file_links: []
  title: Compiler Support for the Fortran 2008 and 2018 Standards
  tweet_created_at: '2021-12-29T19:59:06.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">There is
    a paper &quot;Compiler Support for the Fortran 2008 and 2018 Standards&quot; April
    2020 by Chivers &amp; Sleightholme covering Absoft Arm Cray Fujitsu gfortran IBM
    Intel Nag NEC Oracle PGI <a href="https://t.co/dPp0cZaLBs">https://t.co/dPp0cZaLBs</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1476281645011505162?ref_src=twsrc%5Etfw">December
    29, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1476281645011505162'
  tweet_text: '@jeff_replies @axccl @OndrejCertik There is a paper "Compiler Support
    for the Fortran 2008 and 2018 Standards" April 2020 by Chivers &amp; Sleightholme
    covering Absoft Arm Cray Fujitsu gfortran IBM Intel Nag NEC Oracle PGI https://t.co/dPp0cZaLBs'
- datetime: 2021-12-29 12:16:00
  file_links: []
  title: Many compilers evaluate ALL(x==y) efficiently with short-circuiting
  tweet_created_at: '2021-12-29T18:16:59.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">For a code
    that evaluates ALL(x==y) with a short-circuiting function and the intrinsic, gfortran,
    ifort, and nvfortran seem to short-circuit the intrinsic, so it may be OK to use
    ALL for large expressions.<a href="https://t.co/n99MPh7rKt">https://t.co/n99MPh7rKt</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1476255945923641347?ref_src=twsrc%5Etfw">December
    29, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1476255945923641347'
  tweet_text: 'For a code that evaluates ALL(x==y) with a short-circuiting function
    and the intrinsic, gfortran, ifort, and nvfortran seem to short-circuit the intrinsic,
    so it may be OK to use ALL for large expressions.

    https://t.co/n99MPh7rKt'
- datetime: 2021-12-29 08:41:00
  file_links:
  - target: ./deferred_character.f90
    text: deferred_character.f90
  title: LEN of a character variable may be deferred in Fortran 2003 on
  tweet_created_at: '2021-12-29T14:41:13.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The LEN of
    a character variable may be deferred in F2003 on.<br><br>character (len=:), allocatable
    :: s,t(:)<br><br>declares a scalar and an array of such variables. The LEN is
    taken from the RHS of an assignment but not from a READ. Elements of t(:) have
    same LEN.<br> <a href="https://t.co/wP6lXJ3XL2">pic.twitter.com/wP6lXJ3XL2</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1476201645885337611?ref_src=twsrc%5Etfw">December
    29, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1476201645885337611'
  tweet_text: "The LEN of a character variable may be deferred in F2003 on.\n\ncharacter\
    \ (len=:), allocatable :: s,t(:)\n\ndeclares a scalar and an array of such variables.\
    \ The LEN is taken from the RHS of an assignment but not from a READ. Elements\
    \ of t(:) have same LEN.\n https://t.co/wP6lXJ3XL2"
- datetime: 2021-12-29 05:18:00
  file_links: []
  title: To learn about Fortran beyond F95, read the New Features articles of John
    Reid
  tweet_created_at: '2021-12-29T11:18:23.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">To learn
    about Fortran beyond F95, read the 3 articles of John Reid, convenor (chairman)
    of the standards committee 1999-2017 on the New Features of Fortran 2018, 2008,
    and 2003 <a href="https://t.co/y7bBC94ZdB">https://t.co/y7bBC94ZdB</a><a href="https://t.co/NrcHEeED8r">https://t.co/NrcHEeED8r</a><a
    href="https://t.co/tPtqc8BU3J">https://t.co/tPtqc8BU3J</a><br>and his co-authored
    book.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1476150602866511873?ref_src=twsrc%5Etfw">December
    29, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1476150602866511873'
  tweet_text: 'To learn about Fortran beyond F95, read the 3 articles of John Reid,
    convenor (chairman) of the standards committee 1999-2017 on the New Features of
    Fortran 2018, 2008, and 2003 https://t.co/y7bBC94ZdB

    https://t.co/NrcHEeED8r

    https://t.co/tPtqc8BU3J

    and his co-authored book.'
- datetime: 2021-12-28 13:04:00
  file_links: []
  title: Use .true. and .false. for Booleans, not 1 and 0
  tweet_created_at: '2021-12-28T19:04:47.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use .true.
    and .false. for Booleans and use the expression <br><br>merge(1,0,logical_variable)<br><br>if
    needed. Fortran standards have never specified an equivalence between integers
    and Booleans. <a href="https://t.co/V1ZfGdxAWT">https://t.co/V1ZfGdxAWT</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475905587774959616?ref_src=twsrc%5Etfw">December
    28, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1475905587774959616'
  tweet_text: "Use .true. and .false. for Booleans and use the expression \n\nmerge(1,0,logical_variable)\n\
    \nif needed. Fortran standards have never specified an equivalence between integers\
    \ and Booleans. https://t.co/V1ZfGdxAWT"
- datetime: 2021-12-28 08:47:00
  file_links: []
  title: Standards committee has approved conditional expressions
  tweet_created_at: '2021-12-28T14:47:54.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The standards
    committee has approved conditional expressions, with <br><br>y = ( i&gt;=1 .And.
    i&lt;=Size(a) ? a(i) : -Huge(y) )<br><br>equivalent to<br><br>if (i&gt;=1 .And.
    i&lt;=Size(a)) then<br>   y = a(i)<br>else<br>   y = -Huge(y)<br>end if<a href="https://t.co/NKcB9wR2kU">https://t.co/NKcB9wR2kU</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475840940791279616?ref_src=twsrc%5Etfw">December
    28, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1475840940791279616'
  tweet_text: "@arclight The standards committee has approved conditional expressions,\
    \ with \n\ny = ( i&gt;=1 .And. i&lt;=Size(a) ? a(i) : -Huge(y) )\n\nequivalent\
    \ to\n\nif (i&gt;=1 .And. i&lt;=Size(a)) then\n   y = a(i)\nelse\n   y = -Huge(y)\n\
    end if\n\nhttps://t.co/NKcB9wR2kU"
- datetime: 2021-12-28 08:02:00
  file_links: []
  title: ANY and ALL may not be the most efficient methods to compare arrays.
  tweet_created_at: '2021-12-28T14:02:13.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">ANY and ALL
    may not be the most efficient methods to compare arrays. They<br>may generate
    a logical array the size of the input arrays or always test all elements, depending
    on how they are<br>implemented. More from urbanjost:<a href="https://t.co/8I5ed7nnDT">pic.twitter.com/8I5ed7nnDT</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475829444543717378?ref_src=twsrc%5Etfw">December
    28, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1475829444543717378'
  tweet_text: 'ANY and ALL may not be the most efficient methods to compare arrays.
    They

    may generate a logical array the size of the input arrays or always test all elements,
    depending on how they are

    implemented. More from urbanjost:

    https://t.co/8I5ed7nnDT'
- datetime: 2021-12-28 07:51:00
  file_links:
  - target: ./compare_floats.f90
    text: compare_floats.f90
  title: Consider using a tolerance to compare floats
  tweet_created_at: '2021-12-28T13:51:07.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If the arrays
    are INTEGER or CHARACTER, then the comparison can be exact. For REAL or COMPLEX
    arrays, you should consider using a suitably small tolerance when comparing values.
    This and the previous tip are from urbanjost. <a href="https://t.co/qjaMf5T06W">pic.twitter.com/qjaMf5T06W</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475826650835214338?ref_src=twsrc%5Etfw">December
    28, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1475826650835214338'
  tweet_text: If the arrays are INTEGER or CHARACTER, then the comparison can be exact.
    For REAL or COMPLEX arrays, you should consider using a suitably small tolerance
    when comparing values. This and the previous tip are from urbanjost. https://t.co/qjaMf5T06W
- datetime: 2021-12-28 07:33:00
  file_links:
  - target: ./all_any.f90
    text: all_any.f90
  title: Use ALL(A==B) to test for array equality
  tweet_created_at: '2021-12-28T13:33:04.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If size(A)==size(B),
    use ALL(A==B) to test for equality of arrays A and B and ANY(A==B) to test for
    equality of any corresponding elements. <a href="https://t.co/sx1gxm5XIh">pic.twitter.com/sx1gxm5XIh</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475822105358913540?ref_src=twsrc%5Etfw">December
    28, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1475822105358913540'
  tweet_text: If size(A)==size(B), use ALL(A==B) to test for equality of arrays A
    and B and ANY(A==B) to test for equality of any corresponding elements. https://t.co/sx1gxm5XIh
- datetime: 2021-12-27 09:52:00
  file_links: []
  title: Intel Fortran Compiler (ifx)
  tweet_created_at: '2021-12-27T15:52:37.000Z'
  tweet_embed: "<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">The\
    \ Intel\xAE Fortran Compiler (ifx), available in the oneAPI HPC Toolkit 2022.1,\
    \ is production-ready for CPUs and GPUs. ifx is based on the Intel\xAE Fortran\
    \ Compiler Classic (ifort) frontend and runtime libraries, but uses LLVM backend\
    \ compiler technology.  <a href=\"https://t.co/YC72lJcOVC\">https://t.co/YC72lJcOVC</a></p>&mdash;\
    \ FortranTip (@fortrantip) <a href=\"https://twitter.com/fortrantip/status/1475494838074318852?ref_src=twsrc%5Etfw\"\
    >December 27, 2021</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\"\
    \ charset=\"utf-8\"></script>"
  tweet_id: '1475494838074318852'
  tweet_text: "The Intel\xAE Fortran Compiler (ifx), available in the oneAPI HPC Toolkit\
    \ 2022.1, is production-ready for CPUs and GPUs. ifx is based on the Intel\xAE\
    \ Fortran Compiler Classic (ifort) frontend and runtime libraries, but uses LLVM\
    \ backend compiler technology.  https://t.co/YC72lJcOVC"
- datetime: 2021-12-27 07:07:00
  file_links:
  - target: ./doubled_delim.f90
    text: doubled_delim.f90
  title: Doubled delimiter in a string is regarded as a single character of the constant
  tweet_created_at: '2021-12-27T13:07:38.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A doubled
    delimiter in a string without any embedded intervening blanks is regarded as a
    single character of the constant. One can also put a single quote in double quotes
    or a double quote in single quotes. Thanks to Amir Shahmoradi for tip.<br> <a
    href="https://t.co/JSneWjHZgo">pic.twitter.com/JSneWjHZgo</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475453317526528003?ref_src=twsrc%5Etfw">December
    27, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1475453317526528003'
  tweet_text: "A doubled delimiter in a string without any embedded intervening blanks\
    \ is regarded as a single character of the constant. One can also put a single\
    \ quote in double quotes or a double quote in single quotes. Thanks to Amir Shahmoradi\
    \ for tip.\n https://t.co/JSneWjHZgo"
- datetime: 2021-12-26 09:55:00
  file_links:
  - target: ./derived_type_array.f90
    text: derived_type_array.f90
  title: Store data as an array of derived types or a derived type with array components?
  tweet_created_at: '2021-12-26T15:55:31.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Whether to
    store data as an array of derived types or a derived type with array components
    also depends on how the data will typically be accessed.<a href="https://t.co/UUqiYkaLO7">pic.twitter.com/UUqiYkaLO7</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475133178763427848?ref_src=twsrc%5Etfw">December
    26, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1475133178763427848'
  tweet_text: 'Whether to store data as an array of derived types or a derived type
    with array components also depends on how the data will typically be accessed.

    https://t.co/UUqiYkaLO7'
- datetime: 2021-12-26 04:22:00
  file_links:
  - target: ./column_major.f90
    text: column_major.f90
  title: Fortran is column-major
  tweet_created_at: '2021-12-26T10:22:26.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The order
    you loop through multidimensional arrays can have a big impact on speed. Fortran
    is column-major, meaning consecutive elements of a column are stored next to each
    other in memory, and you should loop through arrays in this order. <a href="https://t.co/oEtrOaMbzC">pic.twitter.com/oEtrOaMbzC</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475049356155883524?ref_src=twsrc%5Etfw">December
    26, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1475049356155883524'
  tweet_text: The order you loop through multidimensional arrays can have a big impact
    on speed. Fortran is column-major, meaning consecutive elements of a column are
    stored next to each other in memory, and you should loop through arrays in this
    order. https://t.co/oEtrOaMbzC
- datetime: 2021-12-24 18:30:00
  file_links:
  - target: ./cmplx.f90
    text: cmplx.f90
  title: CMPLX should be used with a KIND argument
  tweet_created_at: '2021-12-25T00:30:25.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">CMPLX(X,Y,[KIND])
    returns a single precision complex variable, even if X and Y are double precision,
    unless a KIND is specified. <br><br>Merry Christmas and Happy Holidays! Posts
    may be sparse until the new year. <a href="https://t.co/MD9tCw4pTB">pic.twitter.com/MD9tCw4pTB</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1474537984066301959?ref_src=twsrc%5Etfw">December
    25, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1474537984066301959'
  tweet_text: "CMPLX(X,Y,[KIND]) returns a single precision complex variable, even\
    \ if X and Y are double precision, unless a KIND is specified. \n\nMerry Christmas\
    \ and Happy Holidays! Posts may be sparse until the new year. \nhttps://t.co/MD9tCw4pTB"
- datetime: 2021-12-24 09:00:00
  file_links:
  - target: ./reshape_array.f90
    text: reshape_array.f90
  title: RESHAPE with the optional ORDER and PAD arguments
  tweet_created_at: '2021-12-24T15:00:41.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">RESHAPE returns
    an array with a different shape than the SOURCE array. Optional ORDER argument
    changes the order of elements of SOURCE from the usual column major. Optional
    PAD argument fills the result, with recycling, after source is exhausted. <a href="https://t.co/Xb3RCZ6LcW">pic.twitter.com/Xb3RCZ6LcW</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1474394605890244614?ref_src=twsrc%5Etfw">December
    24, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1474394605890244614'
  tweet_text: RESHAPE returns an array with a different shape than the SOURCE array.
    Optional ORDER argument changes the order of elements of SOURCE from the usual
    column major. Optional PAD argument fills the result, with recycling, after source
    is exhausted. https://t.co/Xb3RCZ6LcW
- datetime: 2021-12-24 06:35:00
  file_links:
  - target: ./factorial.f90
    text: factorial.f90
  title: Use GAMMA to compute factorials
  tweet_created_at: '2021-12-24T12:35:00.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Why does
    Fortran not have a factorial function? It does, as for positive whole values of
    X the Gamma function simplifies to the factorial function for (X-1).<br>That is,<br><br>x!
    == gamma(x+1)<br><br>Thanks to urbanjost for tip! <a href="https://t.co/fTAPvhKEpr">pic.twitter.com/fTAPvhKEpr</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1474357943667671060?ref_src=twsrc%5Etfw">December
    24, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1474357943667671060'
  tweet_text: "Why does Fortran not have a factorial function? It does, as for positive\
    \ whole values of X the Gamma function simplifies to the factorial function for\
    \ (X-1).\nThat is,\n\nx! == gamma(x+1)\n\nThanks to urbanjost for tip! \nhttps://t.co/fTAPvhKEpr"
- datetime: 2021-12-23 18:04:00
  file_links:
  - target: ./date.f90
    text: date.f90
  title: Derived type definition, initialization, and operator overloading
  tweet_created_at: '2021-12-24T00:04:30.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">How to define
    a derived type, initialize it, access its components, convert it to a string,
    and define operators for it. <a href="https://t.co/jcai3Usy25">pic.twitter.com/jcai3Usy25</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1474169072665440259?ref_src=twsrc%5Etfw">December
    24, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1474169072665440259'
  tweet_text: How to define a derived type, initialize it, access its components,
    convert it to a string, and define operators for it. https://t.co/jcai3Usy25
- datetime: 2021-12-23 13:52:00
  file_links: []
  title: List-directed vs. explicitly formatted output
  tweet_created_at: '2021-12-23T19:52:23.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">List-directed
    output (format *) is convenient, but don&#39;t use it when you care about layout
    as you&#39;ll lose control over spacing, line breaks and number of significant
    digits. If you care, use explicit formats instead.</p>&mdash; FortranTip (@fortrantip)
    <a href="https://twitter.com/fortrantip/status/1474105626611662857?ref_src=twsrc%5Etfw">December
    23, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1474105626611662857'
  tweet_text: List-directed output (format *) is convenient, but don't use it when
    you care about layout as you'll lose control over spacing, line breaks and number
    of significant digits. If you care, use explicit formats instead.
- datetime: 2021-12-23 04:08:00
  file_links: []
  title: Fortran equivalents of NumPy
  tweet_created_at: '2021-12-23T10:08:41.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Used to NumPy?
    Lots of the Fortran intrinsics to deal with arrays will already be familiar to
    you. <a href="https://t.co/GnKnbscsDX">pic.twitter.com/GnKnbscsDX</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473958733571104773?ref_src=twsrc%5Etfw">December
    23, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1473958733571104773'
  tweet_text: Used to NumPy? Lots of the Fortran intrinsics to deal with arrays will
    already be familiar to you. https://t.co/GnKnbscsDX
- datetime: 2021-12-22 20:51:00
  file_links:
  - target: ./zero_size.f90
    text: zero_size.f90
  title: Zero-size array constructor such as [real ::]
  tweet_created_at: '2021-12-23T02:51:21.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">[data_type
    :: ] is a zero-size array of type data_type.<a href="https://t.co/XmBx5W4ZBG">pic.twitter.com/XmBx5W4ZBG</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473848675566858242?ref_src=twsrc%5Etfw">December
    23, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1473848675566858242'
  tweet_text: '[data_type :: ] is a zero-size array of type data_type.

    https://t.co/XmBx5W4ZBG'
- datetime: 2021-12-22 09:44:00
  file_links: []
  title: Use G0.d and colon edit descriptors with infinite repeat count to write delimited
    (CSV, etc.) output
  tweet_created_at: '2021-12-22T15:44:11.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Combine the
    G0.d and colon edit descriptors, along with infinite repeat count, to write delimited
    (CSV, etc.) output. <a href="https://t.co/QfMmdEj7Fn">pic.twitter.com/QfMmdEj7Fn</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473680777279852553?ref_src=twsrc%5Etfw">December
    22, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1473680777279852553'
  tweet_text: Combine the G0.d and colon edit descriptors, along with infinite repeat
    count, to write delimited (CSV, etc.) output. https://t.co/QfMmdEj7Fn
- datetime: 2021-12-22 06:48:00
  file_links:
  - target: ./automatic.f90
    text: automatic.f90
  title: If allocation errors must be handled, use ALLOCATABLE rather than automatic
    arrays in procedures
  tweet_created_at: '2021-12-22T12:48:07.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If allocation
    errors must be handled, use ALLOCATABLE rather than automatic arrays in procedures,
    and check the STAT of ALLOCATE. <a href="https://t.co/EV4jE4pfdx">pic.twitter.com/EV4jE4pfdx</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473636468405030913?ref_src=twsrc%5Etfw">December
    22, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1473636468405030913'
  tweet_text: If allocation errors must be handled, use ALLOCATABLE rather than automatic
    arrays in procedures, and check the STAT of ALLOCATE. https://t.co/EV4jE4pfdx
- datetime: 2021-12-21 11:13:00
  file_links: []
  title: Name modules and the source files containing them consistently, with one
    module per file.
  tweet_created_at: '2021-12-21T17:13:00.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Name modules
    and the source files containing them consistently, with one module per file. The
    convention I use is that a module named  m_mod is defined in a source file m.f90.
    That way if I see <br><br>use m_mod, only: foo<br><br>in my code I know to look
    in m.f90 for the definition of foo.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473340740055015431?ref_src=twsrc%5Etfw">December
    21, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1473340740055015431'
  tweet_text: "Name modules and the source files containing them consistently, with\
    \ one module per file. The convention I use is that a module named  m_mod is defined\
    \ in a source file m.f90. That way if I see \n\nuse m_mod, only: foo\n\nin my\
    \ code I know to look in m.f90 for the definition of foo."
- datetime: 2021-12-21 05:59:00
  file_links:
  - target: ./stream_io.f90
    text: stream_io.f90
  title: Use unformatted stream of Fortran 2003 for large-scale I/O.
  tweet_created_at: '2021-12-21T11:59:56.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use unformatted
    stream of Fortran 2003 for large-scale I/O. <a href="https://t.co/I2PHa3YiaA">pic.twitter.com/I2PHa3YiaA</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473261954244435973?ref_src=twsrc%5Etfw">December
    21, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1473261954244435973'
  tweet_text: Use unformatted stream of Fortran 2003 for large-scale I/O. https://t.co/I2PHa3YiaA
- datetime: 2021-12-20 12:38:00
  file_links:
  - target: ./read_write_file.f90
    text: read_write_file.f90
  title: Using READ and WRITE for file i/o
  tweet_created_at: '2021-12-20T18:38:36.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Using READ
    and WRITE for file i/o. <a href="https://t.co/Be3gH8SLnL">pic.twitter.com/Be3gH8SLnL</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472999893631447043?ref_src=twsrc%5Etfw">December
    20, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472999893631447043'
  tweet_text: Using READ and WRITE for file i/o. https://t.co/Be3gH8SLnL
- datetime: 2021-12-20 08:47:00
  file_links:
  - target: ./read_sum.f90
    text: read_sum.f90
  title: Reading user input
  tweet_created_at: '2021-12-20T14:47:57.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/pzKMXlNriJ">pic.twitter.com/pzKMXlNriJ</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472941850218700805?ref_src=twsrc%5Etfw">December
    20, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472941850218700805'
  tweet_text: Created with @carbon_app https://t.co/pzKMXlNriJ
- datetime: 2021-12-20 08:02:00
  file_links:
  - target: ./select_case.f90
    text: select_case.f90
  title: SELECT CASE for conditional execution
  tweet_created_at: '2021-12-20T14:02:38.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/5R6yeSnvpY">pic.twitter.com/5R6yeSnvpY</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472930444572336128?ref_src=twsrc%5Etfw">December
    20, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472930444572336128'
  tweet_text: Created with @carbon_app https://t.co/5R6yeSnvpY
- datetime: 2021-12-19 21:32:00
  file_links:
  - target: ./kind.f90
    text: kind.f90
  title: Declare floating point variables with KINDs
  tweet_created_at: '2021-12-20T03:32:24.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/Pxu7PbR5b6">pic.twitter.com/Pxu7PbR5b6</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472771842242920451?ref_src=twsrc%5Etfw">December
    20, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472771842242920451'
  tweet_text: Created with @carbon_app https://t.co/Pxu7PbR5b6
- datetime: 2021-12-19 21:35:00
  file_links: []
  title: Replace non-standard REAL\*8 declaration with REAL(KIND=REAL64)
  tweet_created_at: '2021-12-20T03:35:19.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In older
    code, declarations such as<br><br>real*8 x<br><br>are common but non-standard.
    They should be replaced by<br><br>real(kind=real64) :: x<br><br>or <br><br>real(kind=wp)
    :: x<br><br>with wp set appropriately.</p>&mdash; FortranTip (@fortrantip) <a
    href="https://twitter.com/fortrantip/status/1472772577600942083?ref_src=twsrc%5Etfw">December
    20, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472772577600942083'
  tweet_text: "In older code, declarations such as\n\nreal*8 x\n\nare common but non-standard.\
    \ They should be replaced by\n\nreal(kind=real64) :: x\n\nor \n\nreal(kind=wp)\
    \ :: x\n\nwith wp set appropriately."
- datetime: 2021-12-19 18:00:00
  file_links:
  - target: ./module_parameter.f90
    text: module_parameter.f90
  title: Use PARAMETERs in modules to define physical and mathematical constants
  tweet_created_at: '2021-12-20T00:00:11.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/vWJuAwle97">pic.twitter.com/vWJuAwle97</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472718436040073226?ref_src=twsrc%5Etfw">December
    20, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472718436040073226'
  tweet_text: Created with @carbon_app https://t.co/vWJuAwle97
- datetime: 2021-12-19 16:56:00
  file_links: []
  title: Procedures can be RECURSIVE
  tweet_created_at: '2021-12-19T22:56:34.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/czICWzekYU">pic.twitter.com/czICWzekYU</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472702427740745728?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472702427740745728'
  tweet_text: Created with @carbon_app https://t.co/czICWzekYU
- datetime: 2021-12-19 16:39:00
  file_links: []
  title: Specify function and subroutine argument INTENTs
  tweet_created_at: '2021-12-19T22:39:54.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Function
    and subroutine argument INTENTs were introduced in the Fortran 90 standard. Much
    Fortran code does not specify intents, which is legal, but all new code should.
    Arguments should be intent(in) or intent(out) unless intent(in out) is necessary.</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472698233298333699?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472698233298333699'
  tweet_text: Function and subroutine argument INTENTs were introduced in the Fortran
    90 standard. Much Fortran code does not specify intents, which is legal, but all
    new code should. Arguments should be intent(in) or intent(out) unless intent(in
    out) is necessary.
- datetime: 2021-12-19 16:34:00
  file_links:
  - target: ./intent_in_out.f90
    text: intent_in_out.f90
  title: Subroutines can have INTENT(IN OUT) arguments, but functions should not
  tweet_created_at: '2021-12-19T22:34:39.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/3FjJkJUHSn">pic.twitter.com/3FjJkJUHSn</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472696912541364224?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472696912541364224'
  tweet_text: Created with @carbon_app https://t.co/3FjJkJUHSn
- datetime: 2021-12-19 16:16:00
  file_links:
  - target: ./subroutine.f90
    text: subroutine.f90
  title: Define and call a subroutine
  tweet_created_at: '2021-12-19T22:16:21.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/Wi7Imqi5vW">pic.twitter.com/Wi7Imqi5vW</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472692305522044932?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472692305522044932'
  tweet_text: Created with @carbon_app https://t.co/Wi7Imqi5vW
- datetime: 2021-12-19 15:44:00
  file_links:
  - target: ./optional.f90
    text: optional.f90
  title: Demonstrate optional arguments and RANDOM_NUMBER
  tweet_created_at: '2021-12-19T21:44:07.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/ZNqwgg3Wgq">pic.twitter.com/ZNqwgg3Wgq</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472684194765672450?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472684194765672450'
  tweet_text: Created with @carbon_app https://t.co/ZNqwgg3Wgq
- datetime: 2021-12-19 12:05:00
  file_links:
  - target: ./interface.f90
    text: interface.f90
  title: Function overloading using an interface with module procedures
  tweet_created_at: '2021-12-19T18:05:10.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/qsfPFLVUkl">pic.twitter.com/qsfPFLVUkl</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472629090758836229?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472629090758836229'
  tweet_text: Created with @carbon_app https://t.co/qsfPFLVUkl
- datetime: 2021-12-19 11:04:00
  file_links: []
  title: USE, ONLY to avoid polluting the namespace
  tweet_created_at: '2021-12-19T17:04:53.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In Fortran,
    <br><br>use m<br><br>is equivalent to Python<br><br>from m import *<br><br>It
    is better to write <br><br>use m, only: foo, bar<br><br>to avoid polluting the
    namespace and to clarify the origin of imported entities.</p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472613921886552065?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472613921886552065'
  tweet_text: "In Fortran, \n\nuse m\n\nis equivalent to Python\n\nfrom m import *\n\
    \nIt is better to write \n\nuse m, only: foo, bar\n\nto avoid polluting the namespace\
    \ and to clarify the origin of imported entities."
- datetime: 2021-12-19 10:50:00
  file_links: []
  title: Put functions and subroutines in modules to ensure that interfaces are checked.
  tweet_created_at: '2021-12-19T16:50:54.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran procedures
    should be defined in modules to<br>ensure that interfaces are checked.<br><br>module
    m<br>contains<br>integer function area(length,width)<br>integer, intent(in) ::
    length,width<br>area = length*width<br>end<br>end module m<br>program main<br>use
    m<br>print*,area(3,4) ! 12<br>end program main</p>&mdash; FortranTip (@fortrantip)
    <a href="https://twitter.com/fortrantip/status/1472610403884670976?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472610403884670976'
  tweet_text: 'Fortran procedures should be defined in modules to

    ensure that interfaces are checked.


    module m

    contains

    integer function area(length,width)

    integer, intent(in) :: length,width

    area = length*width

    end

    end module m

    program main

    use m

    print*,area(3,4) ! 12

    end program main'
- datetime: 2021-12-19 10:37:00
  file_links: []
  title: ELEMENTAL functions broadcast arguments
  tweet_created_at: '2021-12-19T16:37:02.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Elemental
    functions broadcast arguments. Neat Fortran feature!<br><br>print*,area(3,4) !
    12<br>print*,area(3,[4,5]) ! 12 15<br>print*,area([3,4],[4,5]) ! 12 20<br>contains<br>integer
    elemental function area(length,width)<br>integer, intent(in) :: length,width<br>area
    = length*width<br>end function area<br>end</p>&mdash; FortranTip (@fortrantip)
    <a href="https://twitter.com/fortrantip/status/1472606914857078793?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472606914857078793'
  tweet_text: 'Elemental functions broadcast arguments. Neat Fortran feature!


    print*,area(3,4) ! 12

    print*,area(3,[4,5]) ! 12 15

    print*,area([3,4],[4,5]) ! 12 20

    contains

    integer elemental function area(length,width)

    integer, intent(in) :: length,width

    area = length*width

    end function area

    end'
- datetime: 2021-12-19 10:25:00
  file_links: []
  title: Functions should be PURE and have INTENT(IN) arguments
  tweet_created_at: '2021-12-19T16:25:02.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Demo of a
    Fortran function. Intent(in) arguments<br>cannot be changed. Function arguments
    should be intent(in). Pure = no side-effects.<br><br>print*,area(3.,4.) ! 12<br>contains<br>real
    pure function area(length,width)<br>real, intent(in) :: length,width<br>area =
    length*width<br>end function area<br>end</p>&mdash; FortranTip (@fortrantip) <a
    href="https://twitter.com/fortrantip/status/1472603894886932482?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472603894886932482'
  tweet_text: 'Demo of a Fortran function. Intent(in) arguments

    cannot be changed. Function arguments should be intent(in). Pure = no side-effects.


    print*,area(3.,4.) ! 12

    contains

    real pure function area(length,width)

    real, intent(in) :: length,width

    area = length*width

    end function area

    end'
- datetime: 2021-12-19 10:13:00
  file_links:
  - target: ./count_pack.f90
    text: count_pack.f90
  title: PACK selects elements
  tweet_created_at: '2021-12-19T16:13:01.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Pack selects
    elements<br><br>integer :: v(3) = [1,-4,9]<br>print*,pack(v,v&gt;0) ! 1 9 -- keep
    values &gt; 0<br>print*,count(v&gt;0)  ! 2   -- count values &gt; 0<br>print*,size(v)     !
    3<br>print*,sum(v)      ! 6<br>print*,sum(v,v&gt;0)  ! 10  -- sum has optional
    mask<br>print*,sum(pack(v,v&gt;0)) ! 10<br>end</p>&mdash; FortranTip (@fortrantip)
    <a href="https://twitter.com/fortrantip/status/1472600871192125451?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472600871192125451'
  tweet_text: 'Pack selects elements


    integer :: v(3) = [1,-4,9]

    print*,pack(v,v&gt;0) ! 1 9 -- keep values &gt; 0

    print*,count(v&gt;0)  ! 2   -- count values &gt; 0

    print*,size(v)     ! 3

    print*,sum(v)      ! 6

    print*,sum(v,v&gt;0)  ! 10  -- sum has optional mask

    print*,sum(pack(v,v&gt;0)) ! 10

    end'
- datetime: 2021-12-19 10:04:00
  file_links:
  - target: ./do_loop_index.f90
    text: do_loop_index.f90
  title: Loop variable equals the upper bound plus the stride after normal completion
    of a loop
  tweet_created_at: '2021-12-19T16:04:23.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The loop
    variable equals the upper bound plus the stride<br>after normal completion of
    a loop<br><br>integer :: i<br>do i=1,3<br>  if (i &gt; 1) exit<br>end do<br>print*,i
    ! 2<br>do i=1,3 ! stride of 1<br>  continue ! placeholder<br>end do<br>print*,i
    ! 4<br>do i=1,3,2 ! stride of 2<br>  continue<br>end do<br>print*,i ! 5<br>end</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472598697489965061?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472598697489965061'
  tweet_text: "The loop variable equals the upper bound plus the stride\nafter normal\
    \ completion of a loop\n\ninteger :: i\ndo i=1,3\n  if (i &gt; 1) exit\nend do\n\
    print*,i ! 2\ndo i=1,3 ! stride of 1\n  continue ! placeholder\nend do\nprint*,i\
    \ ! 4\ndo i=1,3,2 ! stride of 2\n  continue\nend do\nprint*,i ! 5\nend"
- datetime: 2021-12-19 07:52:00
  file_links:
  - target: ./assoc.f90
    text: assoc.f90
  title: Associate creates an alias for expressions or variables.
  tweet_created_at: '2021-12-19T13:52:31.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Associate
    creates an alias for expressions or variables.<br><br>integer, allocatable ::
    u(:)<br>u = [4,9]<br>associate (v =&gt; u)<br>v = v - 2<br>print*,v ! 2 7<br>print*,u
    ! 2 7<br>associate (w =&gt; [4,9])<br>print*,w<br>w = w - 2 ! illegal since w
    set to a constant expression<br>end associate<br>end associate<br>end</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472565511628197891?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472565511628197891'
  tweet_text: 'Associate creates an alias for expressions or variables.


    integer, allocatable :: u(:)

    u = [4,9]

    associate (v =&gt; u)

    v = v - 2

    print*,v ! 2 7

    print*,u ! 2 7

    associate (w =&gt; [4,9])

    print*,w

    w = w - 2 ! illegal since w set to a constant expression

    end associate

    end associate

    end'
- datetime: 2021-12-18 18:36:00
  file_links: []
  title: In addition to if-elseif, Fortran has a one-line if
  tweet_created_at: '2021-12-19T00:36:05.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In addition
    to if-elseif, Fortran has a one-line if:<br>if (condition) executable_statement<br><br>integer
    :: i<br>do i=-1,1<br>   if (i /= 0) print*,i,1/i ! one-line if equivalent to below<br>   if
    (i /= 0) then<br>      print*,i,1/i<br>   end if<br>end do<br>end<br>! output:<br>!
    -1  -1<br>! -1  -1<br>!  1   1<br>!  1   1</p>&mdash; FortranTip (@fortrantip)
    <a href="https://twitter.com/fortrantip/status/1472365082067755017?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472365082067755017'
  tweet_text: "In addition to if-elseif, Fortran has a one-line if:\nif (condition)\
    \ executable_statement\n\ninteger :: i\ndo i=-1,1\n   if (i /= 0) print*,i,1/i\
    \ ! one-line if equivalent to below\n   if (i /= 0) then\n      print*,i,1/i\n\
    \   end if\nend do\nend\n! output:\n! -1  -1\n! -1  -1\n!  1   1\n!  1   1"
- datetime: 2021-12-18 08:18:00
  file_links: []
  title: Character variables are padded with spaces at the end if necessary.
  tweet_created_at: '2021-12-18T14:18:16.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran character
    variables are padded with spaces at the end if necessary. The // operator concatenates.
    Trim removes trailing spaces.<br><br>character (len=5) :: v = &quot;one&quot;<br>print*,&quot;&#39;&quot;
    // v // &quot;&#39;&quot; ! &#39;one  &#39;<br>print*,&quot;&#39;&quot; // trim(v)
    // &quot;&#39;&quot; ! &#39;one&#39;<br>print*,len(v),len_trim(v) ! 5 3<br>end</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472209602074849285?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472209602074849285'
  tweet_text: 'Fortran character variables are padded with spaces at the end if necessary.
    The // operator concatenates. Trim removes trailing spaces.


    character (len=5) :: v = "one"

    print*,"''" // v // "''" ! ''one  ''

    print*,"''" // trim(v) // "''" ! ''one''

    print*,len(v),len_trim(v) ! 5 3

    end'
- datetime: 2021-12-18 08:10:00
  file_links:
  - target: ./char.f90
    text: char.f90
  title: An array of character variables has elements of the same LEN(gth).
  tweet_created_at: '2021-12-18T14:10:13.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">An array
    of character variables has elements of the same LEN(gth).<br><br>character(len=5)
    :: w(3)<br>w = [&quot;one&quot;,&quot;four&quot;,&quot;seven&quot;] ! invalid<br>w
    = [&quot;one  &quot;,&quot;four &quot;,&quot;seven&quot;] ! same as below<br>w
    = [character(5) :: &quot;one&quot;,&quot;four&quot;,&quot;seven&quot;] <br>print*,w<br>end</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472207576133783564?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472207576133783564'
  tweet_text: "An array of character variables has elements of the same LEN(gth).\n\
    \ncharacter(len=5) :: w(3)\nw = [\"one\",\"four\",\"seven\"] ! invalid\nw = [\"\
    one  \",\"four \",\"seven\"] ! same as below\nw = [character(5) :: \"one\",\"\
    four\",\"seven\"] \nprint*,w\nend"
- datetime: 2021-12-18 08:01:00
  file_links: []
  title: MERGE(x,y,condition) returns x if condition is true, otherwise y
  tweet_created_at: '2021-12-18T14:01:16.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">merge(x,y,condition)
    returns x if condition is true, otherwise y. Same output as previous:<br><br>integer
    :: i<br>do i=-1,1<br>   print*,i<br>   ! &quot;zero&quot; padded to have same
    length as &quot;negative&quot;<br>   print*,merge(&quot;negative&quot;,merge(&quot;zero    &quot;,
    &amp;  <br>                &quot;positive&quot;,i==0),i&lt;0)<br>end do<br>end</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472205323763073026?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472205323763073026'
  tweet_text: "merge(x,y,condition) returns x if condition is true, otherwise y. Same\
    \ output as previous:\n\ninteger :: i\ndo i=-1,1\n   print*,i\n   ! \"zero\" padded\
    \ to have same length as \"negative\"\n   print*,merge(\"negative\",merge(\"zero\
    \    \", &amp;  \n                \"positive\",i==0),i&lt;0)\nend do\nend"
- datetime: 2021-12-18 07:50:00
  file_links: []
  title: IF-ELSEIF-ENDIF block
  tweet_created_at: '2021-12-18T13:50:45.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If-elseif-endif
    block:<br><br>integer :: i<br>do i=-1,1<br>   print*,i<br>   if (i &lt; 0) then<br>      print*,&quot;negative&quot;<br>   else
    if (i == 0) then<br>      print*,&quot;zero&quot;<br>   else<br>      print*,&quot;positive&quot;<br>   end
    if<br>end do<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472202678054920196?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472202678054920196'
  tweet_text: "If-elseif-endif block:\n\ninteger :: i\ndo i=-1,1\n   print*,i\n  \
    \ if (i &lt; 0) then\n      print*,\"negative\"\n   else if (i == 0) then\n  \
    \    print*,\"zero\"\n   else\n      print*,\"positive\"\n   end if\nend do\n\
    end"
- datetime: 2021-12-18 06:36:00
  file_links: []
  title: New Fortran code should be written using free source form and stored in a
    file with the .f90 suffix.
  tweet_created_at: '2021-12-18T12:36:16.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">New Fortran
    code should be written using free source form and stored in a file with the .f90
    suffix. Free form was introduced in the Fortran 90 standard, but using the .f90
    suffix does NOT mean the code is restricted to Fortran 90 features. Don&#39;t
    use .f95 .f08 .f18 suffixes.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472183935044145157?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472183935044145157'
  tweet_text: New Fortran code should be written using free source form and stored
    in a file with the .f90 suffix. Free form was introduced in the Fortran 90 standard,
    but using the .f90 suffix does NOT mean the code is restricted to Fortran 90 features.
    Don't use .f95 .f08 .f18 suffixes.
- datetime: 2021-12-18 06:26:00
  file_links:
  - target: ./alloc.f90
    text: alloc.f90
  title: Fortran has allocation on assignment.
  tweet_created_at: '2021-12-18T12:26:59.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran has
    allocation on assignment, but you cannot use the ALLOCATE statement for an array
    that is allocated<br><br>integer, allocatable :: v(:)<br>v = [4,9]<br>deallocate(v)
    ! necessary for line below to work<br>allocate (v,source=[4,9]) ! same as above</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472181598833549316?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472181598833549316'
  tweet_text: 'Fortran has allocation on assignment, but you cannot use the ALLOCATE
    statement for an array that is allocated


    integer, allocatable :: v(:)

    v = [4,9]

    deallocate(v) ! necessary for line below to work

    allocate (v,source=[4,9]) ! same as above'
- datetime: 2021-12-17 19:40:00
  file_links:
  - target: ./2d_array.f90
    text: 2d_array.f90
  title: SUM and other array functions have an optional DIM(ension) argument.
  tweet_created_at: '2021-12-18T01:40:03.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">sum and other
    array functions have an optional dim(ension) argument<br><br>integer :: v(2,3)
    ! 2x3 matrix<br>v(1,:) = [1,2,3]<br>v(2,:) = 10*v(1,:) ! set to [10,20,30]<br>print*,sum(v)
    ! all elements: 66<br>print*,sum(v,dim=1) ! sum each row: 6 60<br>print*,sum(v,dim=2)
    ! sum each col: 11 22 33</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472018791525720069?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472018791525720069'
  tweet_text: 'sum and other array functions have an optional dim(ension) argument


    integer :: v(2,3) ! 2x3 matrix

    v(1,:) = [1,2,3]

    v(2,:) = 10*v(1,:) ! set to [10,20,30]

    print*,sum(v) ! all elements: 66

    print*,sum(v,dim=1) ! sum each row: 6 60

    print*,sum(v,dim=2) ! sum each col: 11 22 33'
- datetime: 2021-12-17 18:16:00
  file_links:
  - target: ./bounds.f90
    text: bounds.f90
  title: Fortran arrays can have any lower bound. The default is 1.
  tweet_created_at: '2021-12-18T00:16:29.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran arrays
    can have any lower bound. <br>The default is 1. Array functions have optional
    mask arguments to determine the elements used.<br><br>integer :: v(-1:1) = [1,-2,3]<br>print*,lbound(v),ubound(v),size(v)
    ! -1 1 3<br>print*,sum(v) ! 2<br>print*,sum(v,mask=v&gt;0) ! 4 -- sum excludes
    -2<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471997763848183810?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471997763848183810'
  tweet_text: "Fortran arrays can have any lower bound. \nThe default is 1. Array\
    \ functions have optional mask arguments to determine the elements used.\n\ninteger\
    \ :: v(-1:1) = [1,-2,3]\nprint*,lbound(v),ubound(v),size(v) ! -1 1 3\nprint*,sum(v)\
    \ ! 2\nprint*,sum(v,mask=v&gt;0) ! 4 -- sum excludes -2\nend"
- datetime: 2021-12-17 18:01:00
  file_links: []
  title: Fortran array sections contain both endpoints
  tweet_created_at: '2021-12-18T00:01:56.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran array
    sections contain both endpoints like Julia, Matlab and R, unlike Python.<br><br>integer,
    parameter :: v(3) = [10,20,30]<br>print*,v(1:2) ! output 10 20<br>print*,v(:2)  !
    10 20<br>print*,v(2:3) ! 20 30<br>print*,v(2:)  ! 20 30<br>print*,v(::2) ! 10
    30 -- stride of 2</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471994100161388545?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471994100161388545'
  tweet_text: 'Fortran array sections contain both endpoints like Julia, Matlab and
    R, unlike Python.


    integer, parameter :: v(3) = [10,20,30]

    print*,v(1:2) ! output 10 20

    print*,v(:2)  ! 10 20

    print*,v(2:3) ! 20 30

    print*,v(2:)  ! 20 30

    print*,v(::2) ! 10 30 -- stride of 2'
- datetime: 2021-12-17 17:44:00
  file_links:
  - target: ./array_intrinsics.f90
    text: array_intrinsics.f90
  title: 'Array intrinsic functions: SUM, MINVAL, MAXVAL, MINLOC, FINDLOC'
  tweet_created_at: '2021-12-17T23:44:41.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="fr" dir="ltr">Fortran has
    many array intrinsic functions. Below, ! starts a comment.<br><br>integer, parameter
    :: vec(3) = [4,1,9]<br>print*,minval(vec),maxval(vec) ! output: 1 9<br>print*,sum(vec),product(vec)
    ! 14 36<br>print*,minloc(vec),maxloc(vec) ! 2 3<br>print*,findloc(vec,9),findloc(vec,8)
    ! 3 0<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471989760046641153?ref_src=twsrc%5Etfw">December
    17, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471989760046641153'
  tweet_text: 'Fortran has many array intrinsic functions. Below, ! starts a comment.


    integer, parameter :: vec(3) = [4,1,9]

    print*,minval(vec),maxval(vec) ! output: 1 9

    print*,sum(vec),product(vec) ! 14 36

    print*,minloc(vec),maxloc(vec) ! 2 3

    print*,findloc(vec,9),findloc(vec,8) ! 3 0

    end'
- datetime: 2021-12-17 14:14:00
  file_links: []
  title: Integer division truncates.
  tweet_created_at: '2021-12-17T20:14:04.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">print*,2+3,2-3,2*3,2/3,2/3.0,2.0/3,2**3<br><br>gives<br><br>5
    -1 6 0 0.6666667 0.6666667 8<br><br>2/3 = 0 in Fortran because the quotient of
    two integers is truncated to an integer. The quotient of an integer and a real
    is a real.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471936756857643008?ref_src=twsrc%5Etfw">December
    17, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471936756857643008'
  tweet_text: 'print*,2+3,2-3,2*3,2/3,2/3.0,2.0/3,2**3


    gives


    5 -1 6 0 0.6666667 0.6666667 8


    2/3 = 0 in Fortran because the quotient of two integers is truncated to an integer.
    The quotient of an integer and a real is a real.'
- datetime: 2021-12-17 12:03:00
  file_links: []
  title: \** is the exponentiation operator.
  tweet_created_at: '2021-12-17T18:03:07.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The exponentiation
    operator in Fortran is **, as in Python. <br><br>print*,1.2**2<br><br>gives 1.44<br><br>Many
    Fortran operators and intrinsic functions are elemental, and brackets denote arrays,
    so<br><br>print*,[1.0,1.1,1.2,1.3]**2<br><br>gives<br><br>1.00000000       1.21000004       1.44000006       1.68999982</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471903802185986050?ref_src=twsrc%5Etfw">December
    17, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471903802185986050'
  tweet_text: "The exponentiation operator in Fortran is **, as in Python. \n\nprint*,1.2**2\n\
    \ngives 1.44\n\nMany Fortran operators and intrinsic functions are elemental,\
    \ and brackets denote arrays, so\n\nprint*,[1.0,1.1,1.2,1.3]**2\n\ngives\n\n1.00000000\
    \       1.21000004       1.44000006       1.68999982"
- datetime: 2021-12-17 11:37:00
  file_links: []
  title: Fortran compilers and tutorials
  tweet_created_at: '2021-12-17T17:37:22.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Two good
    sites to get started with Fortran are <a href="https://t.co/i6lkcIfPqy">https://t.co/i6lkcIfPqy</a>
    and <a href="https://t.co/uxmVspKsPm">https://t.co/uxmVspKsPm</a> . A good free
    compiler is gfortran, part of gcc. Intel Fortran is also free. LFortran is an
    interactive compiler that covers most but not yet all of Fortran.</p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471897319671046147?ref_src=twsrc%5Etfw">December
    17, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471897319671046147'
  tweet_text: Two good sites to get started with Fortran are https://t.co/i6lkcIfPqy
    and https://t.co/uxmVspKsPm . A good free compiler is gfortran, part of gcc. Intel
    Fortran is also free. LFortran is an interactive compiler that covers most but
    not yet all of Fortran.
- datetime: 2021-12-17 11:30:00
  file_links: []
  title: EXIT a loop
  tweet_created_at: '2021-12-17T17:30:06.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">You EXIT
    a loop as shown in the code below, which accumulates the sums of squared integers
    until the sum exceeds 100<br><br>implicit none<br>integer :: i,ssq<br>ssq = 0<br>i
    = 0<br>do<br>   i = i+1<br>   ssq = ssq + i**2<br>   if (ssq &gt; 100) exit<br>end
    do  <br>print*,&quot;sum of squares from 1 to &quot;,i,&quot; is&quot;,ssq<br>end</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471895490346291206?ref_src=twsrc%5Etfw">December
    17, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471895490346291206'
  tweet_text: "You EXIT a loop as shown in the code below, which accumulates the sums\
    \ of squared integers until the sum exceeds 100\n\nimplicit none\ninteger :: i,ssq\n\
    ssq = 0\ni = 0\ndo\n   i = i+1\n   ssq = ssq + i**2\n   if (ssq &gt; 100) exit\n\
    end do  \nprint*,\"sum of squares from 1 to \",i,\" is\",ssq\nend"
- datetime: 2021-12-17 11:14:00
  file_links: []
  title: DO-ENDDO loop
  tweet_created_at: '2021-12-17T17:14:49.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The primary
    looping construct in Fortran is do ... end do. A program to print the sum the
    squares of the integers from 1 to 5 is<br><br>implicit none<br>integer :: i,ssq<br>ssq
    = 0<br>do i=1,5<br>   ssq = ssq + i**2<br>end do<br>print*,&quot;sum of squares
    is &quot;,ssq<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471891644370796550?ref_src=twsrc%5Etfw">December
    17, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471891644370796550'
  tweet_text: "The primary looping construct in Fortran is do ... end do. A program\
    \ to print the sum the squares of the integers from 1 to 5 is\n\nimplicit none\n\
    integer :: i,ssq\nssq = 0\ndo i=1,5\n   ssq = ssq + i**2\nend do\nprint*,\"sum\
    \ of squares is \",ssq\nend"
- datetime: 2021-12-17 11:09:00
  file_links: []
  title: 'Intrinsic data types: integer, real, complex, logical, and character'
  tweet_created_at: '2021-12-17T17:09:41.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran has
    5 intrinsic data types: integer, real, complex, logical, and character. The types
    have various KINDs that determine the range of data they can represent.</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471890355561943054?ref_src=twsrc%5Etfw">December
    17, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471890355561943054'
  tweet_text: 'Fortran has 5 intrinsic data types: integer, real, complex, logical,
    and character. The types have various KINDs that determine the range of data they
    can represent.'
- datetime: 2021-12-17 10:58:00
  file_links: []
  title: Hello World
  tweet_created_at: '2021-12-17T16:58:36.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Hello World
    in Fortran is<br><br>print*,&quot;Hello, World.&quot;<br>end</p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471887565745799173?ref_src=twsrc%5Etfw">December
    17, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471887565745799173'
  tweet_text: 'Hello World in Fortran is


    print*,"Hello, World."

    end'
