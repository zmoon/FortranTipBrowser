# !! This file is autogenerated by auto-data.py !!
ft_topic_titles:
  allocation: Allocation
  array-arguments: Array arguments
  arrays: Arrays
  associate: Associate
  basics: Basics
  character-variables: Character variables
  compiling: Compiling
  conditionals: Conditionals
  data-types: Data types
  derived-types: Derived types
  environment-variables: Environment variables
  floating-point-arithmetic: Floating point arithmetic
  fortran-resources: Fortran resources
  generic-programming: Generic programming
  input-and-output: Input and Output
  interoperability-with-c: Interoperability with C and C++
  loops: Loops
  math-intrinsic-functions: Math intrinsic functions
  modules: Modules
  parameterized-derived-types: Parameterized derived types
  pointers: Pointers
  procedures: Procedures
  style: Style
tips:
- datetime: 2022-06-07 10:21:00
  file_links:
  - target: ./size_test.f90
    text: size_test.f90
  ft_topic_id: arrays
  title: Use the optional KIND argument of SIZE, MINLOC, FINDLOC etc. for large arrays.
  tweet_created_at: '2022-06-07T14:21:47.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Since the
    maximum 32-bit integer is about 2e9, use the optional KIND argument of SIZE, MINLOC,
    FINDLOC etc. to query an array that may be larger than this or compile with an
    option such as gfortran<br>-fdefault-integer-8 to make the default integer 64-bit.<a
    href="https://t.co/2E4edmUTp0">pic.twitter.com/2E4edmUTp0</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1534178812501577731?ref_src=twsrc%5Etfw">June
    7, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1534178812501577731'
  tweet_text: 'Since the maximum 32-bit integer is about 2e9, use the optional KIND
    argument of SIZE, MINLOC, FINDLOC etc. to query an array that may be larger than
    this or compile with an option such as gfortran

    -fdefault-integer-8 to make the default integer 64-bit.

    https://t.co/2E4edmUTp0'
- datetime: 2022-06-01 12:42:00
  file_links:
  - target: ./print_mat.f90
    text: print_mat.f90
  ft_topic_id: array-arguments
  title: With sequence association, the shapes of the actual and dummy arguments need
    not match.
  tweet_created_at: '2022-06-01T16:42:49.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">With sequence
    association the actual argument and an explicit-shape or assumed-size dummy argument
    can have different shapes or ranks, so a 6-element 1-D array can be passed to
    a procedure as a 2x3 or 3x2 2-D array. <a href="https://t.co/4gxb6jWR6s">pic.twitter.com/4gxb6jWR6s</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1532039979723022337?ref_src=twsrc%5Etfw">June
    1, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1532039979723022337'
  tweet_text: "With sequence association the actual argument and an explicit-shape\
    \ or assumed-size dummy argument can have different shapes or ranks, so a 6-element\
    \ 1-D array can be passed to a procedure as a 2x3 or 3x2 2-D array. \nhttps://t.co/4gxb6jWR6s"
- datetime: 2022-05-31 08:58:00
  file_links: []
  ft_topic_id: array-arguments
  title: Sequence association effectively lets you pass a pointer to an array element.
  tweet_created_at: '2022-05-31T12:58:21.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">With sequence
    association for explicit-shape and assumed-size arrays, you can pass a single
    array element to an array dummy argument to pass a pointer to a location in the
    array, as shown in the previous code. Restrictions are discussed at <a href="https://t.co/2EMAeNtUJB">https://t.co/2EMAeNtUJB</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1531621102879133696?ref_src=twsrc%5Etfw">May
    31, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1531621102879133696'
  tweet_text: With sequence association for explicit-shape and assumed-size arrays,
    you can pass a single array element to an array dummy argument to pass a pointer
    to a location in the array, as shown in the previous code. Restrictions are discussed
    at https://t.co/2EMAeNtUJB
- datetime: 2022-05-31 08:56:00
  file_links:
  - target: ./wrap_explicit_shape.f90
    text: wrap_explicit_shape.f90
  ft_topic_id: array-arguments
  title: Wrap a procedure with explicit shape array arguments in a procedure with
    an assumed shape arguments for safety.
  tweet_created_at: '2022-05-31T12:56:37.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A procedure
    with explicit shape array arguments can be wrapped by a procedure with assumed
    shape arguments that is safer to use, since the correct array dimensions can be
    obtained from SIZE or SHAPE and be passed.<a href="https://t.co/SbZ5kImuFq">pic.twitter.com/SbZ5kImuFq</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1531620667220709377?ref_src=twsrc%5Etfw">May
    31, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1531620667220709377'
  tweet_text: 'A procedure with explicit shape array arguments can be wrapped by a
    procedure with assumed shape arguments that is safer to use, since the correct
    array dimensions can be obtained from SIZE or SHAPE and be passed.

    https://t.co/SbZ5kImuFq'
- datetime: 2022-05-26 08:50:00
  file_links:
  - target: ./list_directed_read.f90
    text: list_directed_read.f90
  ft_topic_id: input-and-output
  title: Special meanings of * and / in list-directed input
  tweet_created_at: '2022-05-26T12:50:35.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In list-directed
    input using the * format, n* means skip n items, n*i means set n items to i, i,,j
    means set items 1 and 3 to i and j and keep item 2 unchanged, and / means to stop
    reading. The n*i syntax also applies to DATA statements. Thx to urbanjost.<a href="https://t.co/qBAZnKLAEA">pic.twitter.com/qBAZnKLAEA</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1529807207080009729?ref_src=twsrc%5Etfw">May
    26, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1529807207080009729'
  tweet_text: 'In list-directed input using the * format, n* means skip n items, n*i
    means set n items to i, i,,j means set items 1 and 3 to i and j and keep item
    2 unchanged, and / means to stop reading. The n*i syntax also applies to DATA
    statements. Thx to urbanjost.

    https://t.co/qBAZnKLAEA'
- datetime: 2022-05-25 06:43:00
  file_links: []
  ft_topic_id: data-types
  title: Ways of declaring character variables
  tweet_created_at: '2022-05-25T10:43:11.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The code<br><br>character(5)
    :: a, b, c*3<br><br>declares two character variables of length 5 and one of length
    3, but clearer is<br><br>character(5) :: a, b<br>character(3) :: c<br><br>or <br><br>character(len=5)
    :: a, b<br>character(len=3) :: c<br><br>or <br><br>character :: a*5, b*5, c*3</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1529412759351336960?ref_src=twsrc%5Etfw">May
    25, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1529412759351336960'
  tweet_text: "The code\n\ncharacter(5) :: a, b, c*3\n\ndeclares two character variables\
    \ of length 5 and one of length 3, but clearer is\n\ncharacter(5) :: a, b\ncharacter(3)\
    \ :: c\n\nor \n\ncharacter(len=5) :: a, b\ncharacter(len=3) :: c\n\nor \n\ncharacter\
    \ :: a*5, b*5, c*3"
- datetime: 2022-05-22 06:47:00
  file_links: []
  ft_topic_id: fortran-resources
  title: List of books with Fortran code other than Fortran textbooks.
  tweet_created_at: '2022-05-22T10:47:18.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Many books
    other than Fortran textbooks have included Fortran code, listed at <a href="https://t.co/3TNLI1ekxM">https://t.co/3TNLI1ekxM</a>.</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1528326631043088384?ref_src=twsrc%5Etfw">May
    22, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1528326631043088384'
  tweet_text: Many books other than Fortran textbooks have included Fortran code,
    listed at https://t.co/3TNLI1ekxM.
- datetime: 2022-05-21 07:58:00
  file_links:
  - target: ./call_print_stats.c
    text: call_print_stats.c
  - target: ./print_stats.f90
    text: print_stats.f90
  ft_topic_id: interoperability-with-c
  title: C can call Fortran procedures with prototypes generated by gfortran -fc-prototypes.
  tweet_created_at: '2022-05-21T11:58:09.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">C can call
    interoperable Fortran bind(c) procedures with prototypes, which can be generated
    with<br><br>gfortran -c -fc-prototypes source.f90<br><br>Linking the C and Fortran
    object files with the Fortran compiler enables access to the Fortran run-time
    library.<a href="https://t.co/nzl0FXzeUf">pic.twitter.com/nzl0FXzeUf</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1527982071943159809?ref_src=twsrc%5Etfw">May
    21, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1527982071943159809'
  tweet_text: 'C can call interoperable Fortran bind(c) procedures with prototypes,
    which can be generated with


    gfortran -c -fc-prototypes source.f90


    Linking the C and Fortran object files with the Fortran compiler enables access
    to the Fortran run-time library.

    https://t.co/nzl0FXzeUf'
- datetime: 2022-05-20 08:47:00
  file_links:
  - target: ./xstrtof.f90
    text: xstrtof.f90
  ft_topic_id: interoperability-with-c
  title: An omitted Fortran optional argument corresponds to a NULL argument of a
    C function.
  tweet_created_at: '2022-05-20T12:47:48.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">An omitted
    Fortran optional argument corresponds to a NULL argument of a C function.<a href="https://t.co/WGIL9ZOuoW">pic.twitter.com/WGIL9ZOuoW</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1527632181983645696?ref_src=twsrc%5Etfw">May
    20, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1527632181983645696'
  tweet_text: 'An omitted Fortran optional argument corresponds to a NULL argument
    of a C function.

    https://t.co/WGIL9ZOuoW'
- datetime: 2022-05-19 07:29:00
  file_links:
  - target: ./c_func_ptr.f90
    text: c_func_ptr.f90
  - target: ./cfuncptr.c
    text: cfuncptr.c
  ft_topic_id: interoperability-with-c
  title: Use c_funloc() to pass a Fortran function as an argument to a C function.
  tweet_created_at: '2022-05-19T11:29:05.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A Fortran
    function can be passed as an argument to a C function. C_funloc(x) of iso_c_binding
    has a result of type(c_funptr) with the C address of function x or a pointer to
    a function.<a href="https://t.co/xaBmcFDoPK">pic.twitter.com/xaBmcFDoPK</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1527249982692245510?ref_src=twsrc%5Etfw">May
    19, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1527249982692245510'
  tweet_text: 'A Fortran function can be passed as an argument to a C function. C_funloc(x)
    of iso_c_binding has a result of type(c_funptr) with the C address of function
    x or a pointer to a function.

    https://t.co/xaBmcFDoPK'
- datetime: 2022-05-18 07:09:00
  file_links:
  - target: ./leak.f90
    text: leak.f90
  ft_topic_id: fortran-resources
  title: Use valgrind to find memory leaks in programs that use pointers.
  tweet_created_at: '2022-05-18T11:09:35.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use tools
    such as valgrind to find memory leaks in programs that use pointers. <a href="https://t.co/JIFQkF0Yti">pic.twitter.com/JIFQkF0Yti</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1526882686467448833?ref_src=twsrc%5Etfw">May
    18, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1526882686467448833'
  tweet_text: "Use tools such as valgrind to find memory leaks in programs that use\
    \ pointers. \nhttps://t.co/JIFQkF0Yti"
- datetime: 2022-05-17 10:49:00
  file_links:
  - target: ./c_f_pointer.f90
    text: c_f_pointer.f90
  - target: ./squares.c
    text: squares.c
  ft_topic_id: interoperability-with-c
  title: Use TYPE(C_PTR) and C_F_POINTER to call a C function returning a pointer.
  tweet_created_at: '2022-05-17T14:49:57.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In ISO_C_BINDING,
    TYPE(C_PTR) holds a C pointer, and C_F_POINTER(CPTR,FPTR[, SHAPE]) associates
    the target of a C pointer to a Fortran pointer. Use them to call a C function
    that returns a pointer, possibly to an unknown amount of data.<a href="https://t.co/5YsyOOakbR">pic.twitter.com/5YsyOOakbR</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1526575755903246336?ref_src=twsrc%5Etfw">May
    17, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1526575755903246336'
  tweet_text: 'In ISO_C_BINDING, TYPE(C_PTR) holds a C pointer, and C_F_POINTER(CPTR,FPTR[,
    SHAPE]) associates the target of a C pointer to a Fortran pointer. Use them to
    call a C function that returns a pointer, possibly to an unknown amount of data.

    https://t.co/5YsyOOakbR'
- datetime: 2022-05-16 08:33:00
  file_links:
  - target: ./xscale.f90
    text: xscale.f90
  - target: ./scale_vec.c
    text: scale_vec.c
  ft_topic_id: interoperability-with-c
  title: An allocated allocatable array can be passed to C as an explicit-shape array.
  tweet_created_at: '2022-05-16T12:33:33.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">An ALLOCATABLE
    array does not have a C counterpart, but it can be ALLOCATED and passed to C as
    an explicit-shape array. This can be done for the allocated components of a derived
    type which is not itself interoperable.<a href="https://t.co/xAnFxnFM5y">pic.twitter.com/xAnFxnFM5y</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1526179041652486147?ref_src=twsrc%5Etfw">May
    16, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1526179041652486147'
  tweet_text: 'An ALLOCATABLE array does not have a C counterpart, but it can be ALLOCATED
    and passed to C as an explicit-shape array. This can be done for the allocated
    components of a derived type which is not itself interoperable.

    https://t.co/xAnFxnFM5y'
- datetime: 2022-05-15 08:35:00
  file_links:
  - target: ./xcircle.f90
    text: xcircle.f90
  - target: ./circle.c
    text: circle.c
  ft_topic_id: interoperability-with-c
  title: Common block and module variables with bind(c) can be accessed from C.
  tweet_created_at: '2022-05-15T12:35:10.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">An interoperable
    common block or module variable with the bind(c) attribute can be accessed from
    C. A constant should be PROTECTED in Fortran and extern const in C. A PARAMETER
    is not interoperable.<a href="https://t.co/oEVUQROAog">pic.twitter.com/oEVUQROAog</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1525817060856561667?ref_src=twsrc%5Etfw">May
    15, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1525817060856561667'
  tweet_text: 'An interoperable common block or module variable with the bind(c) attribute
    can be accessed from C. A constant should be PROTECTED in Fortran and extern const
    in C. A PARAMETER is not interoperable.

    https://t.co/oEVUQROAog'
- datetime: 2022-05-14 09:50:00
  file_links:
  - target: ./xcol_sum.f90
    text: xcol_sum.f90
  - target: ./sum_rows.c
    text: sum_rows.c
  ft_topic_id: interoperability-with-c
  title: Fortran array x(n1,n2) passed to C array x[n2][n1]
  tweet_created_at: '2022-05-14T13:50:18.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A Fortran
    array <br><br>real x(n1,n2) <br><br>matches a C array<br><br>float x[n2][n1]<br><br>Matrices
    can be passed to C99 variable length arrays. A procedure with explicit-shape arrays
    calling C can be wrapped in a procedure with assumed-shape array arguments for
    ease of use.<a href="https://t.co/5966N4LY0t">pic.twitter.com/5966N4LY0t</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1525473581492314112?ref_src=twsrc%5Etfw">May
    14, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1525473581492314112'
  tweet_text: "A Fortran array \n\nreal x(n1,n2) \n\nmatches a C array\n\nfloat x[n2][n1]\n\
    \nMatrices can be passed to C99 variable length arrays. A procedure with explicit-shape\
    \ arrays calling C can be wrapped in a procedure with assumed-shape array arguments\
    \ for ease of use.\nhttps://t.co/5966N4LY0t"
- datetime: 2022-05-12 08:36:00
  file_links:
  - target: ./test_sort.f90
    text: test_sort.f90
  - target: ./sort.cpp
    text: sort.cpp
  ft_topic_id: interoperability-with-c
  title: Use the std::span container from C++ 20 to view a contiguous Fortran array
    with a STL-compatible interface.
  tweet_created_at: '2022-05-12T12:36:25.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use the std::span
    container from C++ 20 to create a view of a contiguous Fortran array with a STL-compatible
    interface. std::sort will sort the array in-place. Also works for other STL algorithms.<br>From
    <a href="https://twitter.com/IvanPribec?ref_src=twsrc%5Etfw">@IvanPribec</a>.
    <a href="https://twitter.com/hashtag/cpp?src=hash&amp;ref_src=twsrc%5Etfw">#cpp</a><a
    href="https://t.co/WVazkhQ5Et">pic.twitter.com/WVazkhQ5Et</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1524730212176564230?ref_src=twsrc%5Etfw">May
    12, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1524730212176564230'
  tweet_text: 'Use the std::span container from C++ 20 to create a view of a contiguous
    Fortran array with a STL-compatible interface. std::sort will sort the array in-place.
    Also works for other STL algorithms.

    From @IvanPribec. #cpp

    https://t.co/WVazkhQ5Et'
- datetime: 2022-05-08 09:09:00
  file_links:
  - target: ./xnormal.f90
    text: xnormal.f90
  - target: ./normal_array.cpp
    text: normal_array.cpp
  ft_topic_id: interoperability-with-c
  title: C++ functions can be called from Fortran if they are declared extern "C"
    and have C-like arguments.
  tweet_created_at: '2022-05-08T13:09:42.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">C++ functions
    can be called from Fortran if they are declared extern &quot;C&quot; and have
    C-like arguments, so the random number generators for uniform and non-uniform
    distributions in the C++ standard library are accessible through simple wrappers.<a
    href="https://t.co/5we4VwUqtJ">pic.twitter.com/5we4VwUqtJ</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1523289035900276736?ref_src=twsrc%5Etfw">May
    8, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1523289035900276736'
  tweet_text: 'C++ functions can be called from Fortran if they are declared extern
    "C" and have C-like arguments, so the random number generators for uniform and
    non-uniform distributions in the C++ standard library are accessible through simple
    wrappers.

    https://t.co/5we4VwUqtJ'
- datetime: 2022-05-07 07:53:00
  file_links:
  - target: ./printf.f90
    text: printf.f90
  ft_topic_id: interoperability-with-c
  title: The Fortran name can differ from the C name of a function if the NAME attribute
    appears in BIND.
  tweet_created_at: '2022-05-07T11:53:58.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The Fortran
    name can differ from the C name of a function if the NAME attribute appears in
    BIND. A variadic C function such as printf can be given multiple Fortran interfaces
    with different names and sets of argument types.<a href="https://t.co/EhQGNNOHaj">pic.twitter.com/EhQGNNOHaj</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1522907590048587776?ref_src=twsrc%5Etfw">May
    7, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1522907590048587776'
  tweet_text: 'The Fortran name can differ from the C name of a function if the NAME
    attribute appears in BIND. A variadic C function such as printf can be given multiple
    Fortran interfaces with different names and sets of argument types.

    https://t.co/EhQGNNOHaj'
- datetime: 2022-05-06 08:26:00
  file_links: []
  ft_topic_id: interoperability-with-c
  title: A simple derived type with the BIND(C) attribute interoperates with a C struct.
  tweet_created_at: '2022-05-06T12:26:16.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use the bind(c)
    attribute to make a derived type compatible with C, with restrictions listed at
    <a href="https://t.co/P7PbDVsc9a">https://t.co/P7PbDVsc9a</a>. For example,<br>   <br>type,
    bind(c) :: date<br>   integer (kind=c_int) :: year, month<br>end type<br><br>interoperates
    with<br><br>typedef struct {<br>   int year, month;<br>} date;</p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1522553330282778625?ref_src=twsrc%5Etfw">May
    6, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1522553330282778625'
  tweet_text: "Use the bind(c) attribute to make a derived type compatible with C,\
    \ with restrictions listed at https://t.co/P7PbDVsc9a. For example,\n   \ntype,\
    \ bind(c) :: date\n   integer (kind=c_int) :: year, month\nend type\n\ninteroperates\
    \ with\n\ntypedef struct {\n   int year, month;\n} date;"
- datetime: 2022-05-05 09:36:00
  file_links:
  - target: ./xsum_vec.f90
    text: xsum_vec.f90
  - target: ./sum_vec.c
    text: sum_vec.c
  ft_topic_id: interoperability-with-c
  title: Non-pointer arguments of C functions should have the VALUE attribute in the
    Fortran interface.
  tweet_created_at: '2022-05-05T13:36:06.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Arguments
    corresponding to non-pointer arguments of C functions must have the VALUE attribute
    in the Fortran interface. A C const argument can be INTENT(IN) in the Fortran
    interface. <a href="https://t.co/oHM1F6sbLK">pic.twitter.com/oHM1F6sbLK</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1522208519096836096?ref_src=twsrc%5Etfw">May
    5, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1522208519096836096'
  tweet_text: "Arguments corresponding to non-pointer arguments of C functions must\
    \ have the VALUE attribute in the Fortran interface. A C const argument can be\
    \ INTENT(IN) in the Fortran interface. \nhttps://t.co/oHM1F6sbLK"
- datetime: 2022-05-04 14:35:00
  file_links:
  - target: ./atoi_vs_read.f90
    text: atoi_vs_read.f90
  ft_topic_id: interoperability-with-c
  title: C library functions can be called if an INTERFACE is provided.
  tweet_created_at: '2022-05-04T18:35:32.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran can
    call a function from the C standard library if an INTERFACE is provided. For example,
    it may be faster to call C atoi() or atof() than to use an internal read to read
    an integer or double from a string. <a href="https://t.co/AbiHFnSvok">pic.twitter.com/AbiHFnSvok</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1521921486302363656?ref_src=twsrc%5Etfw">May
    4, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1521921486302363656'
  tweet_text: Fortran can call a function from the C standard library if an INTERFACE
    is provided. For example, it may be faster to call C atoi() or atof() than to
    use an internal read to read an integer or double from a string. https://t.co/AbiHFnSvok
- datetime: 2022-05-03 09:06:00
  file_links: []
  ft_topic_id: interoperability-with-c
  title: Fortran 2003 standardized the interoperation of Fortran and C.
  tweet_created_at: '2022-05-03T13:06:21.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://t.co/QqGhsxGbj6">https://t.co/QqGhsxGbj6</a>
    <br>F2003 standardized interoperation with C. Fortran can call a C function with
    an INTERFACE, and C can call Fortran procedures with prototypes. A C function
    with a void result interoperates with a Fortran subroutine. ISO_C_BINDING defines
    compatible KINDs.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1521476255165698051?ref_src=twsrc%5Etfw">May
    3, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1521476255165698051'
  tweet_text: "https://t.co/QqGhsxGbj6 \nF2003 standardized interoperation with C.\
    \ Fortran can call a C function with an INTERFACE, and C can call Fortran procedures\
    \ with prototypes. A C function with a void result interoperates with a Fortran\
    \ subroutine. ISO_C_BINDING defines compatible KINDs."
- datetime: 2022-05-02 08:15:00
  file_links: []
  ft_topic_id: compiling
  title: Use compiler options to catch the use of uninitialized variables.
  tweet_created_at: '2022-05-02T12:15:13.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">To catch
    the use of uninitialized variables, initialize real variables to signalling NaN
    and integers to -999 and trap NaNs at run time with<br><br>gfortran -g -ffpe-trap=invalid,overflow
    -finit-real=snan -finit-integer=-999 -fbacktrace a.f90<br><br>For ifort see <a
    href="https://t.co/gjX3gj8seB">https://t.co/gjX3gj8seB</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1521100997195669504?ref_src=twsrc%5Etfw">May
    2, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1521100997195669504'
  tweet_text: 'To catch the use of uninitialized variables, initialize real variables
    to signalling NaN and integers to -999 and trap NaNs at run time with


    gfortran -g -ffpe-trap=invalid,overflow -finit-real=snan -finit-integer=-999 -fbacktrace
    a.f90


    For ifort see https://t.co/gjX3gj8seB'
- datetime: 2022-05-01 08:44:00
  file_links:
  - target: ./boz.f90
    text: boz.f90
  ft_topic_id: data-types
  title: B, O, Z edit descriptors can be used to print integers as binary, octal,
    or hexadecimal.
  tweet_created_at: '2022-05-01T12:44:52.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A BOZ constant
    with prefix B, O, or Z for binary, octal, or hexadecimal can be passed to the
    INT or REAL function to set an integer or real variable. The B, O, and Z edit
    descriptors can print integers as BOZ constants.<a href="https://t.co/SHnhM3h9BP">pic.twitter.com/SHnhM3h9BP</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1520746070829158400?ref_src=twsrc%5Etfw">May
    1, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1520746070829158400'
  tweet_text: 'A BOZ constant with prefix B, O, or Z for binary, octal, or hexadecimal
    can be passed to the INT or REAL function to set an integer or real variable.
    The B, O, and Z edit descriptors can print integers as BOZ constants.

    https://t.co/SHnhM3h9BP'
- datetime: 2022-04-29 23:21:00
  file_links:
  - target: ./iany.f90
    text: iany.f90
  ft_topic_id: data-types
  title: Use IANY instead of nested IOR, IALL instead of nested IAND.
  tweet_created_at: '2022-04-30T03:21:00.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use IANY
    instead of nested IOR, IALL instead of nested IAND. Never use .OR. or .AND. on
    non-LOGICAL values! See also <a href="https://t.co/Eusy3dn9eH">https://t.co/Eusy3dn9eH</a>
    <a href="https://t.co/A8Pnk1qlpp">pic.twitter.com/A8Pnk1qlpp</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1520241782038007808?ref_src=twsrc%5Etfw">April
    30, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1520241782038007808'
  tweet_text: Use IANY instead of nested IOR, IALL instead of nested IAND. Never use
    .OR. or .AND. on non-LOGICAL values! See also https://t.co/Eusy3dn9eH https://t.co/A8Pnk1qlpp
- datetime: 2022-04-29 07:14:00
  file_links: []
  ft_topic_id: compiling
  title: When is the -ffast-math option safe?
  tweet_created_at: '2022-04-29T11:14:50.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://t.co/Jnai5VcixS">https://t.co/Jnai5VcixS</a><br>discusses
    when using the -ffast-math option is safe.</p>&mdash; FortranTip (@fortrantip)
    <a href="https://twitter.com/fortrantip/status/1519998641133563905?ref_src=twsrc%5Etfw">April
    29, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1519998641133563905'
  tweet_text: 'https://t.co/Jnai5VcixS

    discusses when using the -ffast-math option is safe.'
- datetime: 2022-04-28 07:09:00
  file_links: []
  ft_topic_id: compiling
  title: Use ifort -fast or gfortran -O3 -march=native for speed.
  tweet_created_at: '2022-04-28T11:09:11.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use the ifort
    -fast and gfortran -O3 -march=native options to increase speed. Gfortran -Ofast
    turns on -ffast-math and can give a further 2x speedup in some cases, but it can
    also give incorrect results and should be used with care. Use gfortran -Og to
    debug.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1519634828265762816?ref_src=twsrc%5Etfw">April
    28, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1519634828265762816'
  tweet_text: Use the ifort -fast and gfortran -O3 -march=native options to increase
    speed. Gfortran -Ofast turns on -ffast-math and can give a further 2x speedup
    in some cases, but it can also give incorrect results and should be used with
    care. Use gfortran -Og to debug.
- datetime: 2022-04-26 08:00:00
  file_links: []
  ft_topic_id: compiling
  title: Compilers may accept extensions by default but have options to flag non-standard
    code.
  tweet_created_at: '2022-04-26T12:00:59.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Compilers
    may accept extensions by default but have options to flag non-standard code, such
    as -std=[f2018, f2008, f2003, f95] for gfortran and -stand:[f18, f08, f03, f95,
    f90] for ifort. For ifort, -standard-semantics causes the program to behave as
    the standard requires.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1518923088599162880?ref_src=twsrc%5Etfw">April
    26, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1518923088599162880'
  tweet_text: Compilers may accept extensions by default but have options to flag
    non-standard code, such as -std=[f2018, f2008, f2003, f95] for gfortran and -stand:[f18,
    f08, f03, f95, f90] for ifort. For ifort, -standard-semantics causes the program
    to behave as the standard requires.
- datetime: 2022-04-25 07:28:00
  file_links: []
  ft_topic_id: compiling
  title: Compiler Explorer shows the assembly code generated by many Fortran compilers.
  tweet_created_at: '2022-04-25T11:28:59.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://t.co/yR6ucetSCi">https://t.co/yR6ucetSCi</a>
    Compiler Explorer lets you paste code in many languages, including Fortran, and
    see the assembly code generated by compilers including gfortran, ifort, ifx, LLVM-Flang,
    and IBM Power. Doing so can identify inefficiencies and compiler bugs.</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1518552648647168001?ref_src=twsrc%5Etfw">April
    25, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1518552648647168001'
  tweet_text: https://t.co/yR6ucetSCi Compiler Explorer lets you paste code in many
    languages, including Fortran, and see the assembly code generated by compilers
    including gfortran, ifort, ifx, LLVM-Flang, and IBM Power. Doing so can identify
    inefficiencies and compiler bugs.
- datetime: 2022-04-23 09:28:00
  file_links: []
  ft_topic_id: compiling
  title: Fortran-lang has a section on Building Programs, and F18 has a compiler options
    comparison.
  tweet_created_at: '2022-04-23T13:28:10.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://t.co/8uXGmDfWXi">https://t.co/8uXGmDfWXi</a>
    discusses compiling and linking, make, meson, and Cmake, and the distribution
    of libraries and programs.<a href="https://t.co/dBCWh320p6">https://t.co/dBCWh320p6</a>
    lists equivalent options of many compilers.</p>&mdash; FortranTip (@fortrantip)
    <a href="https://twitter.com/fortrantip/status/1517857866757124099?ref_src=twsrc%5Etfw">April
    23, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1517857866757124099'
  tweet_text: 'https://t.co/8uXGmDfWXi discusses compiling and linking, make, meson,
    and Cmake, and the distribution of libraries and programs.


    https://t.co/dBCWh320p6 lists equivalent options of many compilers.'
- datetime: 2022-04-22 07:18:00
  file_links: []
  ft_topic_id: compiling
  title: Fortran Package Manger simplifies building programs.
  tweet_created_at: '2022-04-22T11:18:27.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://t.co/yy45zLGaFP">https://t.co/yy45zLGaFP</a><br>Fortran
    Package Manager (fpm) lets you build a program/library, run the executables/tests,
    and distribute it as a dependency to other projects. It detects module dependencies
    and compiles files in<br>the proper order, being more Fortran-aware than make.</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1517462836062081024?ref_src=twsrc%5Etfw">April
    22, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1517462836062081024'
  tweet_text: 'https://t.co/yy45zLGaFP

    Fortran Package Manager (fpm) lets you build a program/library, run the executables/tests,
    and distribute it as a dependency to other projects. It detects module dependencies
    and compiles files in

    the proper order, being more Fortran-aware than make.'
- datetime: 2022-04-21 07:42:00
  file_links: []
  ft_topic_id: compiling
  title: Compilation can fail if there is no main program or if a USEd module has
    not been compiled.
  tweet_created_at: '2022-04-21T11:42:20.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">gfortran
    m.f90<br><br>gives an error<br><br>undefined reference to `main&#39;<br><br>if
    m.f90 does not contain a main program.<br><br>gfortran -c m.f90<br><br>gives an
    error like<br><br>Cannot open module file &#39;x.mod&#39;<br><br>if the file containing
    module x has not previously been compiled.</p>&mdash; FortranTip (@fortrantip)
    <a href="https://twitter.com/fortrantip/status/1517106458281844736?ref_src=twsrc%5Etfw">April
    21, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1517106458281844736'
  tweet_text: 'gfortran m.f90


    gives an error


    undefined reference to `main''


    if m.f90 does not contain a main program.


    gfortran -c m.f90


    gives an error like


    Cannot open module file ''x.mod''


    if the file containing module x has not previously been compiled.'
- datetime: 2022-04-21 07:40:00
  file_links: []
  ft_topic_id: compiling
  title: Create an executable in one step by compiling all source files or by compiling
    source files with -c and linking the object files.
  tweet_created_at: '2022-04-21T11:40:48.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A program
    containing a module and main program is compiled with g95 as<br><br>g95 m.f90
    main.f90<br><br>or with separate compilation<br><br># create m.o and main.o with
    the -c option<br>g95 -c m.f90<br>g95 -c main.f90<br># link objects to create exec<br>g95
    -o exec m.o main.f90<br><br>Other compilers are similar.</p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1517106070614941697?ref_src=twsrc%5Etfw">April
    21, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1517106070614941697'
  tweet_text: 'A program containing a module and main program is compiled with g95
    as


    g95 m.f90 main.f90


    or with separate compilation


    # create m.o and main.o with the -c option

    g95 -c m.f90

    g95 -c main.f90

    # link objects to create exec

    g95 -o exec m.o main.f90


    Other compilers are similar.'
- datetime: 2022-04-20 08:05:00
  file_links:
  - target: ./bit_func.f90
    text: bit_func.f90
  ft_topic_id: data-types
  title: NOT, IAND, IOR, and IEOR perform logical operations on the bit representations
    of integers.
  tweet_created_at: '2022-04-20T12:05:23.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">BTEST(i,pos)
    gives the value of the bit in position pos of integer i, counting from 0 on the
    right. An N-bit integer can be used to store integers of a smaller BIT_SIZE or
    N booleans. Intrinsic functions for logical operations are NOT, IAND, IOR, and
    IEOR.<a href="https://t.co/V9e8Xlgy7Z">pic.twitter.com/V9e8Xlgy7Z</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1516749872019431432?ref_src=twsrc%5Etfw">April
    20, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1516749872019431432'
  tweet_text: 'BTEST(i,pos) gives the value of the bit in position pos of integer
    i, counting from 0 on the right. An N-bit integer can be used to store integers
    of a smaller BIT_SIZE or N booleans. Intrinsic functions for logical operations
    are NOT, IAND, IOR, and IEOR.

    https://t.co/V9e8Xlgy7Z'
- datetime: 2022-04-19 08:12:00
  file_links:
  - target: ./transfer.f90
    text: transfer.f90
  ft_topic_id: data-types
  title: TRANSFER can be used to store one type in another type.
  tweet_created_at: '2022-04-19T12:12:58.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The TRANSFER
    function interprets the bits of one type as another type. One use is to copy data
    from a derived type to an array or the reverse. An int64 can be stored in a real64
    with full precision until it is TRANSFERred back, as can a character(len=8).<a
    href="https://t.co/dk7WjMWWuD">pic.twitter.com/dk7WjMWWuD</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1516389389189984265?ref_src=twsrc%5Etfw">April
    19, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1516389389189984265'
  tweet_text: 'The TRANSFER function interprets the bits of one type as another type.
    One use is to copy data from a derived type to an array or the reverse. An int64
    can be stored in a real64 with full precision until it is TRANSFERred back, as
    can a character(len=8).


    https://t.co/dk7WjMWWuD'
- datetime: 2022-04-18 08:01:00
  file_links:
  - target: ./query.f90
    text: query.f90
  ft_topic_id: derived-types
  title: Use PACK to select records from an array of derived types.
  tweet_created_at: '2022-04-18T12:01:39.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">With an array
    of derived types, you can use PACK with a MASK on type components to select records,
    for example<br><br>type :: t<br>   integer year, month, day<br>   real x<br>end
    type t<br><br>type(t) :: d(1000)<br>print*,pack(d, d%month==3) ! data for March<a
    href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a href="https://t.co/S1QHRU5ft6">pic.twitter.com/S1QHRU5ft6</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1516024155698872329?ref_src=twsrc%5Etfw">April
    18, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1516024155698872329'
  tweet_text: "With an array of derived types, you can use PACK with a MASK on type\
    \ components to select records, for example\n\ntype :: t\n   integer year, month,\
    \ day\n   real x\nend type t\n\ntype(t) :: d(1000)\nprint*,pack(d, d%month==3)\
    \ ! data for March\n@carbon_app https://t.co/S1QHRU5ft6"
- datetime: 2022-04-17 07:41:00
  file_links: []
  ft_topic_id: fortran-resources
  title: Fortran codes are listed by topic at the fortran-lang package index and Fortran
    Code on GitHub
  tweet_created_at: '2022-04-17T11:41:21.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Many open-source
    Fortran codes are listed by topic at<a href="https://t.co/JdtNnNmn1h">https://t.co/JdtNnNmn1h</a>
    and<a href="https://t.co/bZmof1LhWr">https://t.co/bZmof1LhWr</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1515656659292598277?ref_src=twsrc%5Etfw">April
    17, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1515656659292598277'
  tweet_text: 'Many open-source Fortran codes are listed by topic at

    https://t.co/JdtNnNmn1h and

    https://t.co/bZmof1LhWr'
- datetime: 2022-04-16 08:10:00
  file_links:
  - target: ./derived_type_implied_do.f90
    text: derived_type_implied_do.f90
  ft_topic_id: derived-types
  title: Implied do loop can access arbitrary derived type array sections.
  tweet_created_at: '2022-04-16T12:10:37.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">An implied
    do loop can be used to access a derived type array section at more than one level.<br><br>t(1:n)%c<br><br>is
    invalid for array component c but<br><br>[(t(i)%c,i=1,n)]<br><br>or the transpose<br><br>[((t(i)%c(j),i=1,size(t)),j=1,size_c)]<br><br>are
    allowed expressions.<a href="https://t.co/GTtfS8cOCL">pic.twitter.com/GTtfS8cOCL</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1515301634280148995?ref_src=twsrc%5Etfw">April
    16, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1515301634280148995'
  tweet_text: 'An implied do loop can be used to access a derived type array section
    at more than one level.


    t(1:n)%c


    is invalid for array component c but


    [(t(i)%c,i=1,n)]


    or the transpose


    [((t(i)%c(j),i=1,size(t)),j=1,size_c)]


    are allowed expressions.

    https://t.co/GTtfS8cOCL'
- datetime: 2022-04-15 08:12:00
  file_links:
  - target: ./derived_type_section.f90
    text: derived_type_section.f90
  ft_topic_id: derived-types
  title: Derived type array sections are allowed before or after the % component selector,
    but not in both places.
  tweet_created_at: '2022-04-15T12:12:38.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">For an array
    of derived types that have array components, you can refer to an array section
    at either level, but both array sections cannot have rank &gt; 0. The array sections<br><br>t(1:n)%c(1)<br>t(1)%c(1:2)<br><br>are
    valid for array component c(:) but not<br><br>t(1:n)%c<a href="https://t.co/79rumEeJGI">pic.twitter.com/79rumEeJGI</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1514939755892510727?ref_src=twsrc%5Etfw">April
    15, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1514939755892510727'
  tweet_text: 'For an array of derived types that have array components, you can refer
    to an array section at either level, but both array sections cannot have rank
    &gt; 0. The array sections


    t(1:n)%c(1)

    t(1)%c(1:2)


    are valid for array component c(:) but not


    t(1:n)%c

    https://t.co/79rumEeJGI'
- datetime: 2022-04-14 08:51:00
  file_links:
  - target: ./dt_stream.f90
    text: dt_stream.f90
  ft_topic_id: input-and-output
  title: Serialize a derived type using unformatted stream I/O.
  tweet_created_at: '2022-04-14T12:51:16.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A derived
    type with allocatable components can be saved efficiently (serialized) by writing
    its dimensions and components using unformatted stream I/O. Later the dimensions
    and components (after allocation) can be read from the same file using stream
    I/O.<a href="https://t.co/ht7rp2wy06">pic.twitter.com/ht7rp2wy06</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1514587088393494528?ref_src=twsrc%5Etfw">April
    14, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1514587088393494528'
  tweet_text: 'A derived type with allocatable components can be saved efficiently
    (serialized) by writing its dimensions and components using unformatted stream
    I/O. Later the dimensions and components (after allocation) can be read from the
    same file using stream I/O.

    https://t.co/ht7rp2wy06'
- datetime: 2022-04-13 08:34:00
  file_links: []
  ft_topic_id: parameterized-derived-types
  title: PDT can have fixed parameters at compile time or be ALLOCATABLE.
  tweet_created_at: '2022-04-13T12:34:43.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A PDT can
    have fixed parameters at compile time or be ALLOCATABLE.<br><br>type(matrix(n1=3,n2=6,wp=kind(1d0)))
    :: a<br>type(matrix(:,:)), allocatable :: b<br>allocate (matrix(3,6) :: b)<br><br>The
    type parameters are accessible, read-only, as<br><br>a%n1, a%n2, a%wp</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1514220538071244804?ref_src=twsrc%5Etfw">April
    13, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1514220538071244804'
  tweet_text: 'A PDT can have fixed parameters at compile time or be ALLOCATABLE.


    type(matrix(n1=3,n2=6,wp=kind(1d0))) :: a

    type(matrix(:,:)), allocatable :: b

    allocate (matrix(3,6) :: b)


    The type parameters are accessible, read-only, as


    a%n1, a%n2, a%wp'
- datetime: 2022-04-13 08:33:00
  file_links:
  - target: ./pdt_matrix.f90
    text: pdt_matrix.f90
  ft_topic_id: parameterized-derived-types
  title: PDT can have array dimension, KIND, and character LEN parameters.
  tweet_created_at: '2022-04-13T12:33:53.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A parameterized
    derived type (PDT) can have array dimensions, kinds,  and character LENs as parameters,
    with default values allowed:<br><br>type :: matrix(n1,n2,wp)<br>  integer, len  ::
    n1, n2<br>  integer, kind :: wp = kind(1d0)<br>  real(kind=wp) :: x(n1,n2)<br>end
    type<a href="https://t.co/Mxxa8Tof2V">pic.twitter.com/Mxxa8Tof2V</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1514220328846831625?ref_src=twsrc%5Etfw">April
    13, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1514220328846831625'
  tweet_text: "A parameterized derived type (PDT) can have array dimensions, kinds,\
    \  and character LENs as parameters, with default values allowed:\n\ntype :: matrix(n1,n2,wp)\n\
    \  integer, len  :: n1, n2\n  integer, kind :: wp = kind(1d0)\n  real(kind=wp)\
    \ :: x(n1,n2)\nend type\nhttps://t.co/Mxxa8Tof2V"
- datetime: 2022-04-12 08:55:00
  file_links: []
  ft_topic_id: parameterized-derived-types
  title: Links to tutorials on parameterized derived types (PDT).
  tweet_created_at: '2022-04-12T12:55:49.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The components
    of a derived type should allocated in a single place so that they are dimensioned
    consistently. The parameterized derived type of F2003 facilitates this. Tutorials
    by Iain Barrass and Mark Leair are at <a href="https://t.co/rcOPdyjWzO">https://t.co/rcOPdyjWzO</a>
    and <a href="https://t.co/FzrwQhYc4q">https://t.co/FzrwQhYc4q</a> .</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1513863460706308096?ref_src=twsrc%5Etfw">April
    12, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1513863460706308096'
  tweet_text: The components of a derived type should allocated in a single place
    so that they are dimensioned consistently. The parameterized derived type of F2003
    facilitates this. Tutorials by Iain Barrass and Mark Leair are at https://t.co/rcOPdyjWzO
    and https://t.co/FzrwQhYc4q .
- datetime: 2022-04-11 08:57:00
  file_links:
  - target: ./alloc_dt.f90
    text: alloc_dt.f90
  ft_topic_id: derived-types
  title: Deallocating a derived type deallocates its allocatable components.
  tweet_created_at: '2022-04-11T12:57:30.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Deallocating
    a derived type deallocates its allocatable components but not its pointer components,
    which can be deallocated manually before the derived type is. An INTENT(OUT) derived
    type dummy argument has its allocatable components deallocated. <a href="https://t.co/072EgfRFe1">pic.twitter.com/072EgfRFe1</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1513501493382496259?ref_src=twsrc%5Etfw">April
    11, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1513501493382496259'
  tweet_text: Deallocating a derived type deallocates its allocatable components but
    not its pointer components, which can be deallocated manually before the derived
    type is. An INTENT(OUT) derived type dummy argument has its allocatable components
    deallocated. https://t.co/072EgfRFe1
- datetime: 2022-04-10 08:04:00
  file_links:
  - target: ./move_alloc_bench.f90
    text: move_alloc_bench.f90
  ft_topic_id: allocation
  title: MOVE_ALLOC may be faster than RESHAPE or allocation on asignment to resize
    an array.
  tweet_created_at: '2022-04-10T12:04:52.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Another way
    to grow an array is<br><br>x = reshape(x,[size(x)+size(new)],pad=new)<br><br>The
    code compares the speeds of move_alloc, reshape, and allocation on assignment
    in growing an array. Move_alloc was fastest for gfortran, but this is platform-dependent.<a
    href="https://t.co/LMVRYZXBnt">pic.twitter.com/LMVRYZXBnt</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1513125862916382720?ref_src=twsrc%5Etfw">April
    10, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1513125862916382720'
  tweet_text: 'Another way to grow an array is


    x = reshape(x,[size(x)+size(new)],pad=new)


    The code compares the speeds of move_alloc, reshape, and allocation on assignment
    in growing an array. Move_alloc was fastest for gfortran, but this is platform-dependent.

    https://t.co/LMVRYZXBnt'
- datetime: 2022-04-10 07:08:00
  file_links:
  - target: ./move_alloc.f90
    text: move_alloc.f90
  ft_topic_id: allocation
  title: Use MOVE_ALLOC to resize an array.
  tweet_created_at: '2022-04-10T11:08:01.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">CALL MOVE_ALLOC(FROM,TO)
    copies FROM to TO and then deallocates FROM. It can be used to expand array x(:)
    with<br><br>n = size(x)<br>allocate (y(n+size(new)))<br>y(:n) = x<br>y(n+1:) =
    new<br>call move_alloc(from=y,to=x)<br><br>This may be faster than<br><br>x =
    [x,new]<a href="https://t.co/ljSNwAxZVR">pic.twitter.com/ljSNwAxZVR</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1513111554107006979?ref_src=twsrc%5Etfw">April
    10, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1513111554107006979'
  tweet_text: 'CALL MOVE_ALLOC(FROM,TO) copies FROM to TO and then deallocates FROM.
    It can be used to expand array x(:) with


    n = size(x)

    allocate (y(n+size(new)))

    y(:n) = x

    y(n+1:) = new

    call move_alloc(from=y,to=x)


    This may be faster than


    x = [x,new]

    https://t.co/ljSNwAxZVR'
- datetime: 2022-04-09 07:41:00
  file_links: []
  ft_topic_id: allocation
  title: If unsure, test whether a variable is ALLOCATED before using DEALLOCATE.
  tweet_created_at: '2022-04-09T11:41:40.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Since (ALLOCATE
    / DEALLOCATE) is valid only when a variable is (not allocated / allocated), when
    the allocation status of a variable is unclear from reading the code you can write<br><br>if
    (allocated(x)) deallocate(x)<br>allocate (x(n))</p>&mdash; FortranTip (@fortrantip)
    <a href="https://twitter.com/fortrantip/status/1512757635291963395?ref_src=twsrc%5Etfw">April
    9, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1512757635291963395'
  tweet_text: 'Since (ALLOCATE / DEALLOCATE) is valid only when a variable is (not
    allocated / allocated), when the allocation status of a variable is unclear from
    reading the code you can write


    if (allocated(x)) deallocate(x)

    allocate (x(n))'
- datetime: 2022-04-08 07:40:00
  file_links:
  - target: ./alloc_errmsg.f90
    text: alloc_errmsg.f90
  ft_topic_id: allocation
  title: ALLOCATE has an optional ERRMSG specifier.
  tweet_created_at: '2022-04-08T11:40:45.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The ERRMSG
    specifier of ALLOCATE gives an error message when an ALLOCATE fails. Two common
    reasons are an already allocated variable or insufficient memory. ALLOCATE with
    ERRMSG should also have the<br>STAT specifier to avoid program termination upon
    error.<a href="https://t.co/dGRmUGaVe0">pic.twitter.com/dGRmUGaVe0</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1512395017473736704?ref_src=twsrc%5Etfw">April
    8, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1512395017473736704'
  tweet_text: 'The ERRMSG specifier of ALLOCATE gives an error message when an ALLOCATE
    fails. Two common reasons are an already allocated variable or insufficient memory.
    ALLOCATE with ERRMSG should also have the

    STAT specifier to avoid program termination upon error.

    https://t.co/dGRmUGaVe0'
- datetime: 2022-04-07 06:51:00
  file_links: []
  ft_topic_id: associate
  title: ASSOCIATE to an array-valued expression allocates an array.
  tweet_created_at: '2022-04-07T10:51:09.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Also possible
    is allocation on assignment <br><br>real, allocatable :: x(:)<br>x = [1.0,2.0]
    ! works even if x is allocated<br><br>or ASSOCIATE with an array-valued expression<br><br>ASSOCIATE
    (x =&gt; [1.0,2.0])<br>! x is fixed within ASSOCIATE block<br>...<br>END ASSOCIATE<br><br>as
    shown in the last code.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1512020145853673478?ref_src=twsrc%5Etfw">April
    7, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1512020145853673478'
  tweet_text: "Also possible is allocation on assignment \n\nreal, allocatable ::\
    \ x(:)\nx = [1.0,2.0] ! works even if x is allocated\n\nor ASSOCIATE with an array-valued\
    \ expression\n\nASSOCIATE (x =&gt; [1.0,2.0])\n! x is fixed within ASSOCIATE block\n\
    ...\nEND ASSOCIATE\n\nas shown in the last code."
- datetime: 2022-04-07 06:44:00
  file_links:
  - target: ./alloc_source_mold.f90
    text: alloc_source_mold.f90
  ft_topic_id: allocation
  title: ALLOCATE with SOURCE or MOLD to set values or SHAPE.
  tweet_created_at: '2022-04-07T10:44:12.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Some forms
    of ALLOCATE are<br><br>allocate (y(2)) ! y undefined<br>allocate (y(2),source=0.0)
    ! fill with zeros<br>allocate (y(2),source=[3.0,4.0]) ! fill with [3.0,4.0]<br>allocate
    (y,mold=x) ! get shape from x<br>allocate (y,source=x) ! get shape and values
    from x <a href="https://t.co/n4fKcZUdXA">pic.twitter.com/n4fKcZUdXA</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1512018397734838274?ref_src=twsrc%5Etfw">April
    7, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1512018397734838274'
  tweet_text: "Some forms of ALLOCATE are\n\nallocate (y(2)) ! y undefined\nallocate\
    \ (y(2),source=0.0) ! fill with zeros\nallocate (y(2),source=[3.0,4.0]) ! fill\
    \ with [3.0,4.0]\nallocate (y,mold=x) ! get shape from x\nallocate (y,source=x)\
    \ ! get shape and values from x \nhttps://t.co/n4fKcZUdXA"
- datetime: 2022-04-06 08:32:00
  file_links: []
  ft_topic_id: modules
  title: Place IMPLICIT NONE before CONTAINS in a module.
  tweet_created_at: '2022-04-06T12:32:24.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Place IMPLICIT
    NONE after USE statements but before the CONTAINS statement in a module. Then
    IMPLICIT NONE in CONTAINed module procedures is legal but redundant.</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1511683238212816903?ref_src=twsrc%5Etfw">April
    6, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1511683238212816903'
  tweet_text: Place IMPLICIT NONE after USE statements but before the CONTAINS statement
    in a module. Then IMPLICIT NONE in CONTAINed module procedures is legal but redundant.
- datetime: 2022-04-05 08:22:00
  file_links:
  - target: ./scratch.f90
    text: scratch.f90
  ft_topic_id: input-and-output
  title: Scratch files are unnamed temporary files for I/O.
  tweet_created_at: '2022-04-05T12:22:23.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A scratch
    file is an unnamed temporary file intended to exist only during a program run,
    which gives the system flexibility in its location. It is deleted when closed
    or when the program terminates. The Fortran Wiki has an article on scratch files.<a
    href="https://t.co/mQqhUemPkx">pic.twitter.com/mQqhUemPkx</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1511318331659325445?ref_src=twsrc%5Etfw">April
    5, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1511318331659325445'
  tweet_text: 'A scratch file is an unnamed temporary file intended to exist only
    during a program run, which gives the system flexibility in its location. It is
    deleted when closed or when the program terminates. The Fortran Wiki has an article
    on scratch files.

    https://t.co/mQqhUemPkx'
- datetime: 2022-04-04 07:20:00
  file_links:
  - target: ./file_to_string.f90
    text: file_to_string.f90
  ft_topic_id: input-and-output
  title: Read a file into a string with unformatted stream.
  tweet_created_at: '2022-04-04T11:20:28.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">An entire
    file can be read into a string by <br><br>(1) using INQUIRE to get the file size<br>(2)
    allocating a string to this size<br>(3) reading the string using unformatted stream
    <br><br>The string can then be broken into lines by searching for newline characters.<a
    href="https://t.co/khKAhk83HM">pic.twitter.com/khKAhk83HM</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1510940360582782976?ref_src=twsrc%5Etfw">April
    4, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1510940360582782976'
  tweet_text: "An entire file can be read into a string by \n\n(1) using INQUIRE to\
    \ get the file size\n(2) allocating a string to this size\n(3) reading the string\
    \ using unformatted stream \n\nThe string can then be broken into lines by searching\
    \ for newline characters.\nhttps://t.co/khKAhk83HM"
- datetime: 2022-04-03 07:49:00
  file_links:
  - target: ./recursive_io.f90
    text: recursive_io.f90
  ft_topic_id: input-and-output
  title: Because recursive I/O is prohibited, a function should use ERROR STOP msg
    instead of PRINT statements for error messages.
  tweet_created_at: '2022-04-03T11:49:58.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Because recursive
    I/O is prohibited, a function should not have PRINT or WRITE(*,fmt) statements
    for error messages, since the behavior of<br><br>print*,f(x)<br><br>is then undefined.
    ERROR STOP &lt;msg&gt; is an alternative. Internal write can be useful in a function.<a
    href="https://t.co/wjAoag2Hgl">pic.twitter.com/wjAoag2Hgl</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1510585396467535879?ref_src=twsrc%5Etfw">April
    3, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1510585396467535879'
  tweet_text: 'Because recursive I/O is prohibited, a function should not have PRINT
    or WRITE(*,fmt) statements for error messages, since the behavior of


    print*,f(x)


    is then undefined. ERROR STOP &lt;msg&gt; is an alternative. Internal write can
    be useful in a function.

    https://t.co/wjAoag2Hgl'
- datetime: 2022-04-02 07:09:00
  file_links:
  - target: ./skip_columns.f90
    text: skip_columns.f90
  ft_topic_id: input-and-output
  title: Use an implied do loop with a dummy variable to skip fields when reading
    a file.
  tweet_created_at: '2022-04-02T11:09:15.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">To skip reading
    N fields of a space- or comma-delimited file, a dummy variable can be read N times
    in an implied do loop before the actual  data is read. A READ with no items skips
    a line in a file.<a href="https://t.co/KGhVGgiZrW">pic.twitter.com/KGhVGgiZrW</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1510212760201830401?ref_src=twsrc%5Etfw">April
    2, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1510212760201830401'
  tweet_text: 'To skip reading N fields of a space- or comma-delimited file, a dummy
    variable can be read N times in an implied do loop before the actual  data is
    read. A READ with no items skips a line in a file.

    https://t.co/KGhVGgiZrW'
- datetime: 2022-04-01 07:40:00
  file_links:
  - target: ./list_directed.f90
    text: list_directed.f90
  ft_topic_id: input-and-output
  title: List-directed READ will use several lines if necessary.
  tweet_created_at: '2022-04-01T11:40:22.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A list-directed
    read will read data from as many lines as needed for the items, so a malformed
    data file may go undetected. To read items from a single line, first read the
    line with the &quot;(a)&quot; format into a string and then read items from the
    string.<a href="https://t.co/WJh6E6v0Mh">pic.twitter.com/WJh6E6v0Mh</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1509858203227545602?ref_src=twsrc%5Etfw">April
    1, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1509858203227545602'
  tweet_text: 'A list-directed read will read data from as many lines as needed for
    the items, so a malformed data file may go undetected. To read items from a single
    line, first read the line with the "(a)" format into a string and then read items
    from the string.

    https://t.co/WJh6E6v0Mh'
- datetime: 2022-03-31 11:46:00
  file_links: []
  ft_topic_id: fortran-resources
  title: MOOC on "Defensive programming and debugging"
  tweet_created_at: '2022-03-31T15:46:19.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://t.co/oIbB4xhpEX">https://t.co/oIbB4xhpEX</a><br>A
    MOOC on &quot;Defensive programming and debugging&quot; in C, C++, and Fortran
    is starting, with a companion web site. A previous MOOC from PRACE was &quot;Fortran
    for Scientific Computing&quot;.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1509557710810980358?ref_src=twsrc%5Etfw">March
    31, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1509557710810980358'
  tweet_text: 'https://t.co/oIbB4xhpEX

    A MOOC on "Defensive programming and debugging" in C, C++, and Fortran is starting,
    with a companion web site. A previous MOOC from PRACE was "Fortran for Scientific
    Computing".'
- datetime: 2022-03-31 07:31:00
  file_links:
  - target: ./read_line.f90
    text: read_line.f90
  ft_topic_id: input-and-output
  title: Use the "(a)" format to read a line of a file into a string.
  tweet_created_at: '2022-03-31T11:31:46.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">character
    (len=100) :: s<br>read (iunit,&quot;(a)&quot;) s<br><br>will read the first 100
    characters of a line into s, padding with blanks if necessary.<br><br>read (iunit,*)
    s<br><br>will read the first &quot;word&quot; of the line, where words are separated
    by blanks or commas.<a href="https://t.co/ecBC7hKu6v">pic.twitter.com/ecBC7hKu6v</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1509493654678876166?ref_src=twsrc%5Etfw">March
    31, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1509493654678876166'
  tweet_text: 'character (len=100) :: s

    read (iunit,"(a)") s


    will read the first 100 characters of a line into s, padding with blanks if necessary.


    read (iunit,*) s


    will read the first "word" of the line, where words are separated by blanks or
    commas.

    https://t.co/ecBC7hKu6v'
- datetime: 2022-03-30 08:22:00
  file_links:
  - target: ./read_err.f90
    text: read_err.f90
  ft_topic_id: input-and-output
  title: Error in READ statement causes all variables to become undefined.
  tweet_created_at: '2022-03-30T12:22:51.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If there
    is an error in a READ statement, all read items become undefined, although most
    compilers will update only the variables that can be read. The safe approach is
    to read temporary variables and set variables to them when READ is successful.
    <a href="https://t.co/viXblw7sEp">pic.twitter.com/viXblw7sEp</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1509144120404676611?ref_src=twsrc%5Etfw">March
    30, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1509144120404676611'
  tweet_text: "If there is an error in a READ statement, all read items become undefined,\
    \ although most compilers will update only the variables that can be read. The\
    \ safe approach is to read temporary variables and set variables to them when\
    \ READ is successful. \nhttps://t.co/viXblw7sEp"
- datetime: 2022-03-29 07:36:00
  file_links:
  - target: ./trim_loop.f90
    text: trim_loop.f90
  ft_topic_id: character-variables
  title: Use an implied do loop with TRIM to print an array of character variables
    without trailing blanks.
  tweet_created_at: '2022-03-29T11:36:09.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Since TRIM
    is not elemental, use an implied do loop with TRIM to print an array of character
    variables without trailing blanks: <br><br>print &quot;(*(a,:,&#39;,&#39;))&quot;,(trim(s(i)),i=1,size(s))<br><br>A
    function can join trimmed strings as shown. <a href="https://t.co/u6GPRscyBm">pic.twitter.com/u6GPRscyBm</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1508769980313124870?ref_src=twsrc%5Etfw">March
    29, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1508769980313124870'
  tweet_text: "Since TRIM is not elemental, use an implied do loop with TRIM to print\
    \ an array of character variables without trailing blanks: \n\nprint \"(*(a,:,','))\"\
    ,(trim(s(i)),i=1,size(s))\n\nA function can join trimmed strings as shown. \n\
    https://t.co/u6GPRscyBm"
- datetime: 2022-03-28 07:12:00
  file_links: []
  ft_topic_id: character-variables
  title: print*,char(7) causes the program to beep.
  tweet_created_at: '2022-03-28T11:12:00.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In ASCII
    and Unicode the character with the value 7 is BEL, so<br><br>print*,char(7)<br><br>will
    cause the program to beep, which can be used to signal completion.</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1508401513445605379?ref_src=twsrc%5Etfw">March
    28, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1508401513445605379'
  tweet_text: 'In ASCII and Unicode the character with the value 7 is BEL, so


    print*,char(7)


    will cause the program to beep, which can be used to signal completion.'
- datetime: 2022-03-27 07:18:00
  file_links:
  - target: ./do_while.f90
    text: do_while.f90
  ft_topic_id: loops
  title: DO WHILE loop iterates as long as condition at beginning is met.
  tweet_created_at: '2022-03-27T11:18:06.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A DO WHILE
    loop iterates as long as the condition at the beginning of the loop is met. The
    syntax is<br><br>do while (condition)<br>   ...<br>end do<br><br>An infinite do
    loop allows the test for exiting to be made anywhere in the loop and is more flexible.<a
    href="https://t.co/FChl184asF">pic.twitter.com/FChl184asF</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1508040660124848129?ref_src=twsrc%5Etfw">March
    27, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1508040660124848129'
  tweet_text: "A DO WHILE loop iterates as long as the condition at the beginning\
    \ of the loop is met. The syntax is\n\ndo while (condition)\n   ...\nend do\n\n\
    An infinite do loop allows the test for exiting to be made anywhere in the loop\
    \ and is more flexible.\nhttps://t.co/FChl184asF"
- datetime: 2022-03-26 07:00:00
  file_links: []
  ft_topic_id: loops
  title: Invalid loop bounds were discussed at Fortran Discourse.
  tweet_created_at: '2022-03-26T11:00:07.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://t.co/JHQ9gv9Wat">https://t.co/JHQ9gv9Wat</a><br>Invalid
    loop bounds were discussed at Fortran Discourse.</p>&mdash; FortranTip (@fortrantip)
    <a href="https://twitter.com/fortrantip/status/1507673746965946368?ref_src=twsrc%5Etfw">March
    26, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1507673746965946368'
  tweet_text: 'https://t.co/JHQ9gv9Wat

    Invalid loop bounds were discussed at Fortran Discourse.'
- datetime: 2022-03-26 06:44:00
  file_links:
  - target: ./huge_loop.f90
    text: huge_loop.f90
  ft_topic_id: loops
  title: Beware of a loop to huge(i), since huge(i)+1 is out of range.
  tweet_created_at: '2022-03-26T10:44:49.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">To loop from
    1 to a large number, with the loop terminated by an EXIT, write<br><br>do i=1,huge(i)-1<br>   !
    code<br>   if (cond) exit<br>end do<br><br>It is invalid for the upper bound to
    be huge(i), since i is set to huge(i)+1 upon exit, which is out of range.<a href="https://t.co/bv6j43P7d8">pic.twitter.com/bv6j43P7d8</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1507669898486501381?ref_src=twsrc%5Etfw">March
    26, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1507669898486501381'
  tweet_text: "To loop from 1 to a large number, with the loop terminated by an EXIT,\
    \ write\n\ndo i=1,huge(i)-1\n   ! code\n   if (cond) exit\nend do\n\nIt is invalid\
    \ for the upper bound to be huge(i), since i is set to huge(i)+1 upon exit, which\
    \ is out of range.\nhttps://t.co/bv6j43P7d8"
- datetime: 2022-03-25 07:47:00
  file_links:
  - target: ./loop_bound.f90
    text: loop_bound.f90
  ft_topic_id: loops
  title: Number of iterations in a loop is determined at the beginning.
  tweet_created_at: '2022-03-25T11:47:19.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The number
    of iterations in a loop is determined at the beginning of the loop and is unaffected
    by changing the loop bound variables within the loop, but doing so may confuse
    the reader.<a href="https://t.co/rH6kehDFIJ">pic.twitter.com/rH6kehDFIJ</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1507323239151906819?ref_src=twsrc%5Etfw">March
    25, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1507323239151906819'
  tweet_text: 'The number of iterations in a loop is determined at the beginning of
    the loop and is unaffected by changing the loop bound variables within the loop,
    but doing so may confuse the reader.

    https://t.co/rH6kehDFIJ'
- datetime: 2022-03-24 08:48:00
  file_links:
  - target: ./loop_index.f90
    text: loop_index.f90
  ft_topic_id: loops
  title: Changing a loop index within a loop is invalid.
  tweet_created_at: '2022-03-24T12:48:32.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Changing
    the loop index within a loop is not allowed, but a compiler may not catch it if
    it happens in another procedure. It is safer to pass a loop index only to procedures
    where it is an INTENT(IN) argument.<a href="https://t.co/RaDHvxsvrv">pic.twitter.com/RaDHvxsvrv</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1506976258411872268?ref_src=twsrc%5Etfw">March
    24, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1506976258411872268'
  tweet_text: 'Changing the loop index within a loop is not allowed, but a compiler
    may not catch it if it happens in another procedure. It is safer to pass a loop
    index only to procedures where it is an INTENT(IN) argument.

    https://t.co/RaDHvxsvrv'
- datetime: 2022-03-23 08:06:00
  file_links:
  - target: ./cycle.f90
    text: cycle.f90
  ft_topic_id: loops
  title: CYCLE skips the remaining statements in a loop.
  tweet_created_at: '2022-03-23T12:06:37.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">CYCLE skips
    the remaining statements in a loop, continuing to the next iteration. CYCLE &lt;name&gt;
    can skip the remaining statements of a named outer loop.<a href="https://t.co/plMA9GrWov">pic.twitter.com/plMA9GrWov</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1506603320361857026?ref_src=twsrc%5Etfw">March
    23, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1506603320361857026'
  tweet_text: 'CYCLE skips the remaining statements in a loop, continuing to the next
    iteration. CYCLE &lt;name&gt; can skip the remaining statements of a named outer
    loop.

    https://t.co/plMA9GrWov'
- datetime: 2022-03-22 07:44:00
  file_links:
  - target: ./loop_label.f90
    text: loop_label.f90
  ft_topic_id: loops
  title: EXIT can be used to leave a named outer loop.
  tweet_created_at: '2022-03-22T11:44:59.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Loops can
    be labeled with syntax<br><br>name1: do i=1,n<br>   name2: do j=1,n<br>      ...<br>   end
    do name2<br>end do name1<br><br>EXIT leaves the inner loop. EXIT &lt;name&gt;
    can be used to leave an outer loop. A loop label also clarifies what loop is terminated
    by END DO.<a href="https://t.co/leKjbkwyOm">pic.twitter.com/leKjbkwyOm</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1506235487782113282?ref_src=twsrc%5Etfw">March
    22, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1506235487782113282'
  tweet_text: "Loops can be labeled with syntax\n\nname1: do i=1,n\n   name2: do j=1,n\n\
    \      ...\n   end do name2\nend do name1\n\nEXIT leaves the inner loop. EXIT\
    \ &lt;name&gt; can be used to leave an outer loop. A loop label also clarifies\
    \ what loop is terminated by END DO.\nhttps://t.co/leKjbkwyOm"
- datetime: 2022-03-21 08:02:00
  file_links:
  - target: ./rewind.f90
    text: rewind.f90
  ft_topic_id: input-and-output
  title: Use REWIND and BACKSPACE to change file position.
  tweet_created_at: '2022-03-21T12:02:00.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">REWIND (unit=u)
    positions the file at the beginning so it can be reread or rewritten. A WRITE
    deletes lines after the position. BACKSPACE moves the position back one line.
    It can be used to print an informative error message when a READ fails.<a href="https://t.co/5uCuyaxNY5">pic.twitter.com/5uCuyaxNY5</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1505877382716170245?ref_src=twsrc%5Etfw">March
    21, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1505877382716170245'
  tweet_text: 'REWIND (unit=u) positions the file at the beginning so it can be reread
    or rewritten. A WRITE deletes lines after the position. BACKSPACE moves the position
    back one line. It can be used to print an informative error message when a READ
    fails.

    https://t.co/5uCuyaxNY5'
- datetime: 2022-03-20 10:43:00
  file_links:
  - target: ./slash.f90
    text: slash.f90
  ft_topic_id: input-and-output
  title: Slash / terminates a record.
  tweet_created_at: '2022-03-20T14:43:00.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A / in a
    format creates a new record, so<br><br>print &quot;(&#39;c&#39;/&#39;d&#39;)&quot;<br><br>prints
    &#39;c&#39; and &#39;d&#39; on successive lines, as does<br><br>print &quot;(a)&quot;,&quot;c&quot;
    // new_line(&quot;&quot;) // &quot;d&quot;<br><br>A list-directed READ is terminated
    by a / in input and may surprise for a file with / characters.<a href="https://t.co/e8hvGptp4z">pic.twitter.com/e8hvGptp4z</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1505555510262697987?ref_src=twsrc%5Etfw">March
    20, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1505555510262697987'
  tweet_text: 'A / in a format creates a new record, so


    print "(''c''/''d'')"


    prints ''c'' and ''d'' on successive lines, as does


    print "(a)","c" // new_line("") // "d"


    A list-directed READ is terminated by a / in input and may surprise for a file
    with / characters.

    https://t.co/e8hvGptp4z'
- datetime: 2022-03-19 08:03:00
  file_links: []
  ft_topic_id: input-and-output
  title: Stream input/output article by Clive Page
  tweet_created_at: '2022-03-19T12:03:59.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://t.co/QMS2EyFcPF">https://t.co/QMS2EyFcPF</a><br>The
    Fortran Wiki has an article on stream input/output by Clive Page.</p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1505153106228690946?ref_src=twsrc%5Etfw">March
    19, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1505153106228690946'
  tweet_text: 'https://t.co/QMS2EyFcPF

    The Fortran Wiki has an article on stream input/output by Clive Page.'
- datetime: 2022-03-19 07:53:00
  file_links:
  - target: ./stream_pos_dt.f90
    text: stream_pos_dt.f90
  ft_topic_id: input-and-output
  title: Specific array elements can read or written to unformatted stream file by
    specifying the POS.
  tweet_created_at: '2022-03-19T11:53:05.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Unformatted
    stream I/O is fast for large data sets. By specifying the POSition in the READ
    or WRITE of an unformatted stream file, you can read or write an arbitrary array
    element in the file without looping over previous elements.<a href="https://t.co/INZyxK0foW">pic.twitter.com/INZyxK0foW</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1505150360851210241?ref_src=twsrc%5Etfw">March
    19, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1505150360851210241'
  tweet_text: 'Unformatted stream I/O is fast for large data sets. By specifying the
    POSition in the READ or WRITE of an unformatted stream file, you can read or write
    an arbitrary array element in the file without looping over previous elements.

    https://t.co/INZyxK0foW'
- datetime: 2022-03-18 08:14:00
  file_links:
  - target: ./direct_access.f90
    text: direct_access.f90
  ft_topic_id: input-and-output
  title: DIRECT access file allows access to arbitrary record without looping over
    the previous records.
  tweet_created_at: '2022-03-18T12:14:33.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A DIRECT
    access data file lets you read or write an arbitrary record without looping over
    the previous records, as needed with the usual SEQUENTIAL access. The record length
    RECL is given in the OPEN statement, and READ or WRITE need a record number REC.<a
    href="https://t.co/FRvhhG3che">pic.twitter.com/FRvhhG3che</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1504793375765155840?ref_src=twsrc%5Etfw">March
    18, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1504793375765155840'
  tweet_text: 'A DIRECT access data file lets you read or write an arbitrary record
    without looping over the previous records, as needed with the usual SEQUENTIAL
    access. The record length RECL is given in the OPEN statement, and READ or WRITE
    need a record number REC.

    https://t.co/FRvhhG3che'
- datetime: 2022-03-17 07:41:00
  file_links:
  - target: ./write_append.f90
    text: write_append.f90
  ft_topic_id: input-and-output
  title: How to append to a file or delete it
  tweet_created_at: '2022-03-17T11:41:58.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In an OPEN
    statement with ACTION=&quot;write&quot;, use POSITION=&quot;append&quot; to append
    data to a file rather than overwriting it. To delete a file that is connected
    to a unit, CLOSE that unit with STATUS=&quot;delete&quot;.<a href="https://t.co/WN3uo3agpf">pic.twitter.com/WN3uo3agpf</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1504422788517576704?ref_src=twsrc%5Etfw">March
    17, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1504422788517576704'
  tweet_text: 'In an OPEN statement with ACTION="write", use POSITION="append" to
    append data to a file rather than overwriting it. To delete a file that is connected
    to a unit, CLOSE that unit with STATUS="delete".

    https://t.co/WN3uo3agpf'
- datetime: 2022-03-16 08:09:00
  file_links:
  - target: ./inquire.f90
    text: inquire.f90
  ft_topic_id: input-and-output
  title: Use INQUIRE to get unit and file properties.
  tweet_created_at: '2022-03-16T12:09:07.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The INQUIRE
    statement can tell if a unit has been opened, if a file exists, a file&#39;s size,
    whether it is open for reading or writing, formatted or not, its form of access,
    and other properties. Common uses of INQUIRE can be wrapped as functions as shown.<a
    href="https://t.co/4ksASPJnLS">pic.twitter.com/4ksASPJnLS</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1504067234326528000?ref_src=twsrc%5Etfw">March
    16, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1504067234326528000'
  tweet_text: 'The INQUIRE statement can tell if a unit has been opened, if a file
    exists, a file''s size, whether it is open for reading or writing, formatted or
    not, its form of access, and other properties. Common uses of INQUIRE can be wrapped
    as functions as shown.

    https://t.co/4ksASPJnLS'
- datetime: 2022-03-15 07:51:00
  file_links:
  - target: ./newunit.f90
    text: newunit.f90
  ft_topic_id: input-and-output
  title: Use NEWUNIT in OPEN to get an unused unit number.
  tweet_created_at: '2022-03-15T11:51:58.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">open (newunit=iu,...)<br><br>is
    a Fortran 2008 feature that finds an unused unit number less than -1. By doing
    this instead of hard coding a unit number, you avoid inadvertently using a unit
    number that is already connected.<a href="https://t.co/197XS6ABbM">pic.twitter.com/197XS6ABbM</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1503700530496946177?ref_src=twsrc%5Etfw">March
    15, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1503700530496946177'
  tweet_text: 'open (newunit=iu,...)


    is a Fortran 2008 feature that finds an unused unit number less than -1. By doing
    this instead of hard coding a unit number, you avoid inadvertently using a unit
    number that is already connected.

    https://t.co/197XS6ABbM'
- datetime: 2022-03-14 07:58:00
  file_links:
  - target: ./open_units_limit.f90
    text: open_units_limit.f90
  ft_topic_id: input-and-output
  title: Number of files open simultaneously is limited, so they should be closed
    when possible.
  tweet_created_at: '2022-03-14T11:58:16.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The number
    of files that can be connected simultaneously differs by compiler and operating
    system, so files that will no longer be used should be closed, especially when
    opened in a loop. On Unix ulimit -n gives the maximum # of open file descriptors.<a
    href="https://t.co/sSJe11cw8X">pic.twitter.com/sSJe11cw8X</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1503339726534852615?ref_src=twsrc%5Etfw">March
    14, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1503339726534852615'
  tweet_text: 'The number of files that can be connected simultaneously differs by
    compiler and operating system, so files that will no longer be used should be
    closed, especially when opened in a loop. On Unix ulimit -n gives the maximum
    # of open file descriptors.

    https://t.co/sSJe11cw8X'
- datetime: 2022-03-13 10:28:00
  file_links:
  - target: ./write_many_files.f90
    text: write_many_files.f90
  ft_topic_id: input-and-output
  title: Write to many files by creating file names with internal write.
  tweet_created_at: '2022-03-13T14:28:21.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">To portably
    create many files named by integers with specified prefix and suffix you can loop
    over the integers and in the loop body use an internal write to create the file
    name, connect the file to a unit, write to it, and then close it.<a href="https://t.co/M7UFaRglkv">pic.twitter.com/M7UFaRglkv</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1503015109354045442?ref_src=twsrc%5Etfw">March
    13, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1503015109354045442'
  tweet_text: 'To portably create many files named by integers with specified prefix
    and suffix you can loop over the integers and in the loop body use an internal
    write to create the file name, connect the file to a unit, write to it, and then
    close it.

    https://t.co/M7UFaRglkv'
- datetime: 2022-03-12 07:40:00
  file_links:
  - target: ./implicitly_connected.f90
    text: implicitly_connected.f90
  ft_topic_id: input-and-output
  title: Unit n is connected to fort.n by default for most compilers.
  tweet_created_at: '2022-03-12T12:40:09.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">For a positive
    integer n other than 5 or 6 that has not been connected to a file with OPEN,<br><br>write
    (n,*) &quot;hello&quot;<br><br>will write to a file with n in the name, such as
    fort.10 for n = 10, with details up to the compiler.<a href="https://t.co/bv8FnEq0UZ">pic.twitter.com/bv8FnEq0UZ</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1502625494499536904?ref_src=twsrc%5Etfw">March
    12, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1502625494499536904'
  tweet_text: 'For a positive integer n other than 5 or 6 that has not been connected
    to a file with OPEN,


    write (n,*) "hello"


    will write to a file with n in the name, such as fort.10 for n = 10, with details
    up to the compiler.

    https://t.co/bv8FnEq0UZ'
- datetime: 2022-03-11 08:39:00
  file_links:
  - target: ./output_unit.f90
    text: output_unit.f90
  ft_topic_id: input-and-output
  title: Connect INPUT_UNIT and OUTPUT_UNIT to files to redirect standard input and
    output.
  tweet_created_at: '2022-03-11T13:39:06.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Module ISO_FORTRAN_ENV
    has named constants INPUT_UNIT and OUTPUT_UNIT, usually 5 and 6. Connecting output_unit
    to a file sends the output of<br>PRINT fmt, and WRITE (*,fmt) to that file. Connecting
    input_unit to a file causes READ (*,fmt) to access that file<a href="https://t.co/2IdX5vwkfu">pic.twitter.com/2IdX5vwkfu</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1502277940066893835?ref_src=twsrc%5Etfw">March
    11, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1502277940066893835'
  tweet_text: 'Module ISO_FORTRAN_ENV has named constants INPUT_UNIT and OUTPUT_UNIT,
    usually 5 and 6. Connecting output_unit to a file sends the output of

    PRINT fmt, and WRITE (*,fmt) to that file. Connecting input_unit to a file causes
    READ (*,fmt) to access that file

    https://t.co/2IdX5vwkfu'
- datetime: 2022-03-10 07:33:00
  file_links: []
  ft_topic_id: pointers
  title: Use ALLOCATABLE arrays or ASSOCIATE instead of POINTER when possible.
  tweet_created_at: '2022-03-10T12:33:18.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In Fortran
    90, allocatable arrays could not be used as procedure arguments or derived type
    components. An old code may use pointers in these situations, where it is now
    safer and more convenient to use allocatable arrays. In other cases POINTER can
    be replaced by<br>ASSOCIATE.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1501898993785319429?ref_src=twsrc%5Etfw">March
    10, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1501898993785319429'
  tweet_text: 'In Fortran 90, allocatable arrays could not be used as procedure arguments
    or derived type components. An old code may use pointers in these situations,
    where it is now safer and more convenient to use allocatable arrays. In other
    cases POINTER can be replaced by

    ASSOCIATE.'
- datetime: 2022-03-09 08:16:00
  file_links:
  - target: ./pointer_use.f90
    text: pointer_use.f90
  ft_topic_id: pointers
  title: Pointer should be initialized to null() to avoid undefined association status.
  tweet_created_at: '2022-03-09T13:16:52.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Whether a
    pointer is initially ASSOCIATED is undefined, unless the pointer is initialized
    to null(), which makes it not associated. This is recommended. A pointer becomes
    associated by being allocated or by being given a target.<a href="https://t.co/D8eBKzMZ0i">pic.twitter.com/D8eBKzMZ0i</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1501547568307728385?ref_src=twsrc%5Etfw">March
    9, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1501547568307728385'
  tweet_text: 'Whether a pointer is initially ASSOCIATED is undefined, unless the
    pointer is initialized to null(), which makes it not associated. This is recommended.
    A pointer becomes associated by being allocated or by being given a target.

    https://t.co/D8eBKzMZ0i'
- datetime: 2022-03-08 07:14:00
  file_links:
  - target: ./pointer_reshape.f90
    text: pointer_reshape.f90
  ft_topic_id: pointers
  title: Pointer can remap array shape and bounds.
  tweet_created_at: '2022-03-08T12:14:51.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A pointer
    can be used to map an array to an array of the same type and size but a different
    shape, rank, or bounds, for example<br><br>real, target  :: y(6)<br>real, pointer
    :: p(:,:)<br>p(-1:1,1:2) =&gt; y ! map y(:) to 3x2 matrix with LB -1, 1<a href="https://t.co/rZ72DjBWgH">pic.twitter.com/rZ72DjBWgH</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1501169574997377025?ref_src=twsrc%5Etfw">March
    8, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1501169574997377025'
  tweet_text: 'A pointer can be used to map an array to an array of the same type
    and size but a different shape, rank, or bounds, for example


    real, target  :: y(6)

    real, pointer :: p(:,:)

    p(-1:1,1:2) =&gt; y ! map y(:) to 3x2 matrix with LB -1, 1

    https://t.co/rZ72DjBWgH'
- datetime: 2022-03-07 07:38:00
  file_links:
  - target: ./associate_bounds.f90
    text: associate_bounds.f90
  ft_topic_id: associate
  title: Bounds of associate-name for whole array or array section selector
  tweet_created_at: '2022-03-07T12:38:46.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The left-hand
    side of an association (associate-name) has the same bounds as the right-hand
    side (selector) if it is a whole array but has lower bounds of 1 if the selector
    is an array section.<a href="https://t.co/uQzrh5I0iR">pic.twitter.com/uQzrh5I0iR</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1500813206356430848?ref_src=twsrc%5Etfw">March
    7, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1500813206356430848'
  tweet_text: 'The left-hand side of an association (associate-name) has the same
    bounds as the right-hand side (selector) if it is a whole array but has lower
    bounds of 1 if the selector is an array section.

    https://t.co/uQzrh5I0iR'
- datetime: 2022-03-06 09:03:00
  file_links: []
  ft_topic_id: null
  title: Tips by topic
  tweet_created_at: '2022-03-06T14:03:31.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Since the
    tip topics have jumped around, I have listed them by topic.<a href="https://t.co/rUZiffPR5o">https://t.co/rUZiffPR5o</a><br>To
    suggest a topic please raise an issue at GitHub or send a direct message.</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1500472144878313473?ref_src=twsrc%5Etfw">March
    6, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1500472144878313473'
  tweet_text: 'Since the tip topics have jumped around, I have listed them by topic.

    https://t.co/rUZiffPR5o

    To suggest a topic please raise an issue at GitHub or send a direct message.'
- datetime: 2022-03-06 07:30:00
  file_links:
  - target: ./associate_alloc.f90
    text: associate_alloc.f90
  ft_topic_id: associate
  title: A variable ASSOCIATEd to an ALLOCATABLE variable is not ALLOCATABLE.
  tweet_created_at: '2022-03-06T12:30:20.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In an ASSOCIATE
    statement the LHS is not ALLOCATABLE even if the RHS is. If the RHS is an allocatable
    array, it must already be ALLOCATED, and it should not be reallocated or deallocated
    within the ASSOCIATE block.<a href="https://t.co/cOHvBuqK4X">pic.twitter.com/cOHvBuqK4X</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1500448694734364675?ref_src=twsrc%5Etfw">March
    6, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1500448694734364675'
  tweet_text: 'In an ASSOCIATE statement the LHS is not ALLOCATABLE even if the RHS
    is. If the RHS is an allocatable array, it must already be ALLOCATED, and it should
    not be reallocated or deallocated within the ASSOCIATE block.

    https://t.co/cOHvBuqK4X'
- datetime: 2022-03-05 07:33:00
  file_links:
  - target: ./associate_many.f90
    text: associate_many.f90
  ft_topic_id: associate
  title: ASSOCIATE statement can set several independent variables.
  tweet_created_at: '2022-03-05T12:33:44.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A single
    ASSOCIATE statement can create multiple variables, but they must be independent.
    If y depends on x you must first ASSOCIATE x and then ASSOCIATE y in a following
    statement. A loop with an ASSOCIATE must also have an END ASSOCIATE.<a href="https://t.co/aTf72Py2cg">pic.twitter.com/aTf72Py2cg</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1500087163668549636?ref_src=twsrc%5Etfw">March
    5, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1500087163668549636'
  tweet_text: 'A single ASSOCIATE statement can create multiple variables, but they
    must be independent. If y depends on x you must first ASSOCIATE x and then ASSOCIATE
    y in a following statement. A loop with an ASSOCIATE must also have an END ASSOCIATE.

    https://t.co/aTf72Py2cg'
- datetime: 2022-03-04 07:16:00
  file_links:
  - target: ./associate_vs_pointer.f90
    text: associate_vs_pointer.f90
  ft_topic_id: associate
  title: ASSOCIATE is preferred over POINTER to create an alias because POINTER can
    inhibit optimization.
  tweet_created_at: '2022-03-04T12:16:45.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Although
    ASSOCIATE of Fortran 2003 and POINTER of Fortran 90 can both create an alias for
    a derived type component or an array section, ASSOCIATE is now preferred since
    the use of POINTER can inhibit optimization.<a href="https://t.co/n39lBNhTEz">pic.twitter.com/n39lBNhTEz</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1499720499181535247?ref_src=twsrc%5Etfw">March
    4, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1499720499181535247'
  tweet_text: 'Although ASSOCIATE of Fortran 2003 and POINTER of Fortran 90 can both
    create an alias for a derived type component or an array section, ASSOCIATE is
    now preferred since the use of POINTER can inhibit optimization.

    https://t.co/n39lBNhTEz'
- datetime: 2022-03-03 07:59:00
  file_links:
  - target: ./copy.f90
    text: copy.f90
  ft_topic_id: associate
  title: Pointer assignment and ASSOCIATE can create shallow copies.
  tweet_created_at: '2022-03-03T12:59:51.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A pointer
    assignment or ASSOCIATE with the RHS a variable can create shallow copies where
    changes in one variable affect another. Normal assignment or ALLOCATE with SOURCE
    creates a deep copy.<br>Created with <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a>
    <a href="https://t.co/7FPHzH0uX2">pic.twitter.com/7FPHzH0uX2</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1499368960151760896?ref_src=twsrc%5Etfw">March
    3, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1499368960151760896'
  tweet_text: 'A pointer assignment or ASSOCIATE with the RHS a variable can create
    shallow copies where changes in one variable affect another. Normal assignment
    or ALLOCATE with SOURCE creates a deep copy.

    Created with @carbon_app https://t.co/7FPHzH0uX2'
- datetime: 2022-03-02 08:29:00
  file_links:
  - target: ./scope.f90
    text: scope.f90
  ft_topic_id: procedures
  title: Internal procedures have access to variables from the host unless they are
    overridden by local variables.
  tweet_created_at: '2022-03-02T13:29:52.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">An internal
    procedure can declare variables with the same names as the enclosing procedure,
    which can declare variables with the same names as module variables. Within a
    scope a name refers to the local variable. Variables from the host are accessible.<a
    href="https://t.co/9ics0WynEP">pic.twitter.com/9ics0WynEP</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1499014126265372685?ref_src=twsrc%5Etfw">March
    2, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1499014126265372685'
  tweet_text: 'An internal procedure can declare variables with the same names as
    the enclosing procedure, which can declare variables with the same names as module
    variables. Within a scope a name refers to the local variable. Variables from
    the host are accessible.

    https://t.co/9ics0WynEP'
- datetime: 2022-03-01 08:08:00
  file_links:
  - target: ./block.f90
    text: block.f90
  ft_topic_id: basics
  title: BLOCK construct allows declarations after executable statements.
  tweet_created_at: '2022-03-01T13:08:44.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The BLOCK
    construct of Fortran 2008 allows variables to be declared and exist only within
    the block. This permits variables to be declared closer to their use and deallocated
    earlier and can avoid name clashes. If the block is named, EXIT &lt;name&gt; leaves
    it <a href="https://t.co/4iAzqE52Qg">pic.twitter.com/4iAzqE52Qg</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1498646417778548736?ref_src=twsrc%5Etfw">March
    1, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1498646417778548736'
  tweet_text: The BLOCK construct of Fortran 2008 allows variables to be declared
    and exist only within the block. This permits variables to be declared closer
    to their use and deallocated earlier and can avoid name clashes. If the block
    is named, EXIT &lt;name&gt; leaves it https://t.co/4iAzqE52Qg
- datetime: 2022-02-28 08:38:00
  file_links: []
  ft_topic_id: fortran-resources
  title: Five free C C++ Fortran compiler families
  tweet_created_at: '2022-02-28T13:38:02.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://t.co/6R7rwViMRE">https://t.co/6R7rwViMRE</a><br>They
    are GNU, IntelOneAPI, LLVM, NVIDIA HPC, and IBM XL (for POWER CPUs).</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1498291406556876806?ref_src=twsrc%5Etfw">February
    28, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1498291406556876806'
  tweet_text: 'https://t.co/6R7rwViMRE

    They are GNU, IntelOneAPI, LLVM, NVIDIA HPC, and IBM XL (for POWER CPUs).'
- datetime: 2022-02-27 06:53:00
  file_links:
  - target: ./optional_err.f90
    text: optional_err.f90
  ft_topic_id: procedures
  title: Errors in a procedure can be handled with an optional argument.
  tweet_created_at: '2022-02-27T11:53:07.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Errors in
    a procedure can be handled by setting an error flag and returning or by stopping
    with an error message. A procedure with an optional error flag argument can handle
    errors in either way, depending on whether an error flag is passed.<a href="https://t.co/IMhQY8pLfw">pic.twitter.com/IMhQY8pLfw</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1497902611915284482?ref_src=twsrc%5Etfw">February
    27, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1497902611915284482'
  tweet_text: 'Errors in a procedure can be handled by setting an error flag and returning
    or by stopping with an error message. A procedure with an optional error flag
    argument can handle errors in either way, depending on whether an error flag is
    passed.

    https://t.co/IMhQY8pLfw'
- datetime: 2022-02-26 08:21:00
  file_links:
  - target: ./error_handling.f90
    text: error_handling.f90
  ft_topic_id: array-arguments
  title: Check that assumed-shape array arguments have consistent dimensions.
  tweet_created_at: '2022-02-26T13:21:53.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Check that
    assumed-shape array arguments have consistent dimensions. Using the FINDLOC function
    of Fortran 2008 on a logical array of constraints can reduce the amount of boilerplate
    code needed:<br><br>ierr = findloc([con1,con2,con3],value=.false.,dim=1)<a href="https://t.co/aRUxpXWIEY">pic.twitter.com/aRUxpXWIEY</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1497562564334694401?ref_src=twsrc%5Etfw">February
    26, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1497562564334694401'
  tweet_text: 'Check that assumed-shape array arguments have consistent dimensions.
    Using the FINDLOC function of Fortran 2008 on a logical array of constraints can
    reduce the amount of boilerplate code needed:


    ierr = findloc([con1,con2,con3],value=.false.,dim=1)

    https://t.co/aRUxpXWIEY'
- datetime: 2022-02-25 07:07:00
  file_links:
  - target: ./error_stop.f90
    text: error_stop.f90
  ft_topic_id: basics
  title: ERROR STOP vs. STOP.
  tweet_created_at: '2022-02-25T12:07:48.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran 2008
    introduced the ERROR STOP statement, which can be used in PURE procedures, <br>unlike
    STOP. Error stop or stop can be followed by an integer or string that is printed.
    Error stop on one coarray image will terminate the entire program.<a href="https://t.co/M1lajeSZvp">pic.twitter.com/M1lajeSZvp</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1497181532146089985?ref_src=twsrc%5Etfw">February
    25, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1497181532146089985'
  tweet_text: "Fortran 2008 introduced the ERROR STOP statement, which can be used\
    \ in PURE procedures, \nunlike STOP. Error stop or stop can be followed by an\
    \ integer or string that is printed. Error stop on one coarray image will terminate\
    \ the entire program.\nhttps://t.co/M1lajeSZvp"
- datetime: 2022-02-24 07:34:00
  file_links:
  - target: ./assumed_type.f90
    text: assumed_type.f90
  ft_topic_id: generic-programming
  title: Assumed type arguments have no declared type.
  tweet_created_at: '2022-02-24T12:34:27.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran 2018
    allows assumed type arguments that have no declared type, with syntax type(*).
    Such arguments can only be used in a small number of intrinsic functions, including
    SHAPE, SIZE, and RANK. Actual arguments can have intrinsic or derived types.<a
    href="https://t.co/mDry4PCOh9">pic.twitter.com/mDry4PCOh9</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1496825853551992843?ref_src=twsrc%5Etfw">February
    24, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1496825853551992843'
  tweet_text: 'Fortran 2018 allows assumed type arguments that have no declared type,
    with syntax type(*). Such arguments can only be used in a small number of intrinsic
    functions, including SHAPE, SIZE, and RANK. Actual arguments can have intrinsic
    or derived types.

    https://t.co/mDry4PCOh9'
- datetime: 2022-02-23 08:03:00
  file_links:
  - target: ./unlimited_pointer.f90
    text: unlimited_pointer.f90
  ft_topic_id: generic-programming
  title: Unlimited polymorphic pointer can point to any type.
  tweet_created_at: '2022-02-23T13:03:04.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">An unlimited
    polymorphic pointer p<br><br>class(*), pointer :: p<br><br>can point to any type
    of variable or object and can be passed as a class(*) or class(*), pointer argument.
    Otherwise it must be disambiguated with SELECT TYPE before being used.<a href="https://t.co/AJaPqr1rBF">pic.twitter.com/AJaPqr1rBF</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1496470666576642048?ref_src=twsrc%5Etfw">February
    23, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1496470666576642048'
  tweet_text: 'An unlimited polymorphic pointer p


    class(*), pointer :: p


    can point to any type of variable or object and can be passed as a class(*) or
    class(*), pointer argument. Otherwise it must be disambiguated with SELECT TYPE
    before being used.

    https://t.co/AJaPqr1rBF'
- datetime: 2022-02-23 07:36:00
  file_links:
  - target: ./unlimited_poly.f90
    text: unlimited_poly.f90
  ft_topic_id: generic-programming
  title: Unlimited polymorphic allocatable variable can be set to any type.
  tweet_created_at: '2022-02-23T12:36:23.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">An unlimited
    polymorphic allocatable variable x<br><br>class(*), allocatable :: x<br><br>can
    hold any type of variable or object. It can be passed as a class(*) argument.
    Otherwise it must be disambiguated with SELECT TYPE before being used.<a href="https://t.co/gYj2OMhwQj">pic.twitter.com/gYj2OMhwQj</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1496463950375960579?ref_src=twsrc%5Etfw">February
    23, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1496463950375960579'
  tweet_text: 'An unlimited polymorphic allocatable variable x


    class(*), allocatable :: x


    can hold any type of variable or object. It can be passed as a class(*) argument.
    Otherwise it must be disambiguated with SELECT TYPE before being used.

    https://t.co/gYj2OMhwQj'
- datetime: 2022-02-22 07:59:00
  file_links:
  - target: ./assumed_rank.f90
    text: assumed_rank.f90
  ft_topic_id: procedures
  title: Fortran 2018 procedures can have assumed-rank arguments.
  tweet_created_at: '2022-02-22T12:59:16.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran 2018
    procedures with explicit interfaces can have assumed-rank arguments, denoted x(..),
    that can be scalars or arrays of arbitrary rank. Within the procedure the SELECT
    RANK construct and RANK intrinsic is used to handle each rank.<a href="https://t.co/Hzqt5e1H9r">pic.twitter.com/Hzqt5e1H9r</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1496107321457528835?ref_src=twsrc%5Etfw">February
    22, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1496107321457528835'
  tweet_text: 'Fortran 2018 procedures with explicit interfaces can have assumed-rank
    arguments, denoted x(..), that can be scalars or arrays of arbitrary rank. Within
    the procedure the SELECT RANK construct and RANK intrinsic is used to handle each
    rank.

    https://t.co/Hzqt5e1H9r'
- datetime: 2022-02-21 07:33:00
  file_links:
  - target: ./storage_size.f90
    text: storage_size.f90
  ft_topic_id: data-types
  title: storage_size(A) returns the storage size of argument A in bits.
  tweet_created_at: '2022-02-21T12:33:19.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">storage_size(A)
    is an F2008 function that returns the storage size of argument A in bits. If A
    is an array it returns the size of an element of A. If A is a derived type with
    allocatable components, the result of storage_size() is compiler-dependent.<a
    href="https://t.co/p5bobsQXUj">pic.twitter.com/p5bobsQXUj</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1495738404356689926?ref_src=twsrc%5Etfw">February
    21, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1495738404356689926'
  tweet_text: 'storage_size(A) is an F2008 function that returns the storage size
    of argument A in bits. If A is an array it returns the size of an element of A.
    If A is a derived type with allocatable components, the result of storage_size()
    is compiler-dependent.

    https://t.co/p5bobsQXUj'
- datetime: 2022-02-20 07:21:00
  file_links:
  - target: ./dt_private.f90
    text: dt_private.f90
  ft_topic_id: derived-types
  title: A derived type can have PRIVATE components.
  tweet_created_at: '2022-02-20T12:21:04.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Derived type
    components can be declared PRIVATE, in which case they are only visible in the
    module where the type is defined. Below, b is private and c is public.<br><br>type
    dt<br>  private<br>  real :: b<br>  real, public :: c ! override private<br>end
    type <a href="https://t.co/TD76teqpzi">pic.twitter.com/TD76teqpzi</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1495372934537428997?ref_src=twsrc%5Etfw">February
    20, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1495372934537428997'
  tweet_text: "Derived type components can be declared PRIVATE, in which case they\
    \ are only visible in the module where the type is defined. Below, b is private\
    \ and c is public.\n\ntype dt\n  private\n  real :: b\n  real, public :: c ! override\
    \ private\nend type \nhttps://t.co/TD76teqpzi"
- datetime: 2022-02-19 06:44:00
  file_links:
  - target: ./type_constructor_optional.f90
    text: type_constructor_optional.f90
  ft_topic_id: derived-types
  title: A derived type component can have a default value.
  tweet_created_at: '2022-02-19T11:44:46.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If a derived
    type component is given a default value, the default constructor can be called
    without setting that component, which takes that value.<a href="https://t.co/xQ8uWiZU52">pic.twitter.com/xQ8uWiZU52</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1495001410894811139?ref_src=twsrc%5Etfw">February
    19, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1495001410894811139'
  tweet_text: 'If a derived type component is given a default value, the default constructor
    can be called without setting that component, which takes that value.

    https://t.co/xQ8uWiZU52'
- datetime: 2022-02-18 07:32:00
  file_links:
  - target: ./derived_type_composition.f90
    text: derived_type_composition.f90
  ft_topic_id: derived-types
  title: A derived type can have derived type components.
  tweet_created_at: '2022-02-18T12:32:27.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A derived
    type may have components that are also derived types. If x is an instance of a
    derived type that has component y, and y has component z, you can write x%y%z
    to access z. A similar syntax applies with type extension of Fortran 2003.<a href="https://t.co/xCLrAss3hf">pic.twitter.com/xCLrAss3hf</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1494651022010200065?ref_src=twsrc%5Etfw">February
    18, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1494651022010200065'
  tweet_text: 'A derived type may have components that are also derived types. If
    x is an instance of a derived type that has component y, and y has component z,
    you can write x%y%z to access z. A similar syntax applies with type extension
    of Fortran 2003.

    https://t.co/xCLrAss3hf'
- datetime: 2022-02-17 07:59:00
  file_links:
  - target: ./elemental_func_arg.f90
    text: elemental_func_arg.f90
  ft_topic_id: derived-types
  title: A derived type can be used where a scalar is needed.
  tweet_created_at: '2022-02-17T12:59:29.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A derived
    type variable is a scalar even if it has array components. Arrays of varying-length
    strings or pointers can be simulated. A derived type can be used where a scalar
    is required, for example as the dummy argument of an elemental procedure.<a href="https://t.co/QMUCesqyVR">pic.twitter.com/QMUCesqyVR</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1494295438320713730?ref_src=twsrc%5Etfw">February
    17, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1494295438320713730'
  tweet_text: 'A derived type variable is a scalar even if it has array components.
    Arrays of varying-length strings or pointers can be simulated. A derived type
    can be used where a scalar is required, for example as the dummy argument of an
    elemental procedure.

    https://t.co/QMUCesqyVR'
- datetime: 2022-02-16 07:09:00
  file_links: []
  ft_topic_id: fortran-resources
  title: Modern Fortran Reference Card and Quick Reference/Cheat Sheet.
  tweet_created_at: '2022-02-16T12:09:22.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Modern Fortran
    Reference Card of Michael Goerz crams a lot of good information in 2 pages<a href="https://t.co/QzVEZpfe1Z">https://t.co/QzVEZpfe1Z</a>,
    as does the 5-page Quick Reference/Cheat Sheet of Ben Evans <a href="https://t.co/HDt5B4Swe4">https://t.co/HDt5B4Swe4</a>.</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1493920435997659145?ref_src=twsrc%5Etfw">February
    16, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1493920435997659145'
  tweet_text: 'Modern Fortran Reference Card of Michael Goerz crams a lot of good
    information in 2 pages

    https://t.co/QzVEZpfe1Z, as does the 5-page Quick Reference/Cheat Sheet of Ben
    Evans https://t.co/HDt5B4Swe4.'
- datetime: 2022-02-15 07:56:00
  file_links:
  - target: ./allocatable_bounds.f90
    text: allocatable_bounds.f90
  ft_topic_id: array-arguments
  title: Bounds of an allocatable array are preserved when passed to an allocatable,
    intent(in) or intent(in out) argument.
  tweet_created_at: '2022-02-15T12:56:35.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The bounds
    of an allocatable array are preserved when passed to an allocatable, intent(in)
    or intent(in out) argument in a procedure. The same is true for intent(in) or
    intent(in out) pointer array arguments.<a href="https://t.co/2S43P7demh">pic.twitter.com/2S43P7demh</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1493569929668354051?ref_src=twsrc%5Etfw">February
    15, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1493569929668354051'
  tweet_text: 'The bounds of an allocatable array are preserved when passed to an
    allocatable, intent(in) or intent(in out) argument in a procedure. The same is
    true for intent(in) or intent(in out) pointer array arguments.

    https://t.co/2S43P7demh'
- datetime: 2022-02-14 08:24:00
  file_links:
  - target: ./lbound_assumed_shape.f90
    text: lbound_assumed_shape.f90
  ft_topic_id: array-arguments
  title: Bounds of a derived type array component are preserved when passed to procedure.
  tweet_created_at: '2022-02-14T13:24:53.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The bounds
    of a derived type array component are preserved when the whole derived type is
    passed to a procedure, as shown in the code of the previous tip.</p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1493214664754438149?ref_src=twsrc%5Etfw">February
    14, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1493214664754438149'
  tweet_text: The bounds of a derived type array component are preserved when the
    whole derived type is passed to a procedure, as shown in the code of the previous
    tip.
- datetime: 2022-02-14 07:55:00
  file_links:
  - target: ./lbound_assumed_shape.f90
    text: lbound_assumed_shape.f90
  ft_topic_id: array-arguments
  title: Array lower bounds are not preserved when passed as assumed shape argument.
  tweet_created_at: '2022-02-14T12:55:42.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The lower
    bounds of an assumed shape dummy argument are 1 or the lower bounds specified
    in the procedure declaration, regardless of the lower bounds of actual argument
    in the caller. The lower bounds can be passed as arguments.<a href="https://t.co/wRauYCI75B">pic.twitter.com/wRauYCI75B</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1493207320184164352?ref_src=twsrc%5Etfw">February
    14, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1493207320184164352'
  tweet_text: 'The lower bounds of an assumed shape dummy argument are 1 or the lower
    bounds specified in the procedure declaration, regardless of the lower bounds
    of actual argument in the caller. The lower bounds can be passed as arguments.

    https://t.co/wRauYCI75B'
- datetime: 2022-02-13 07:52:00
  file_links:
  - target: ./reverse.f90
    text: reverse.f90
  ft_topic_id: arrays
  title: How to reverse an array or character string
  tweet_created_at: '2022-02-13T12:52:27.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Write<br><br>v
    = v(size(v):1:-1)<br><br>to reverse a 1-D array v with lower bound 1, otherwise<br><br>v
    = v(ubound(v):lbound(v):-1)<br><br>v(::-1) is a zero-size array unless size(v)
    = 1. A character string can be reversed with the function shown. <a href="https://t.co/ngOUfICgvf">pic.twitter.com/ngOUfICgvf</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1492844114492243971?ref_src=twsrc%5Etfw">February
    13, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1492844114492243971'
  tweet_text: 'Write


    v = v(size(v):1:-1)


    to reverse a 1-D array v with lower bound 1, otherwise


    v = v(ubound(v):lbound(v):-1)


    v(::-1) is a zero-size array unless size(v) = 1. A character string can be reversed
    with the function shown. https://t.co/ngOUfICgvf'
- datetime: 2022-02-12 08:23:00
  file_links:
  - target: ./compare_character.f90
    text: compare_character.f90
  ft_topic_id: character-variables
  title: Character variables can be compared like numerical variables.
  tweet_created_at: '2022-02-12T13:23:23.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The comparison
    operators &lt; &lt;= etc. or .lt. .le. etc. can be used for character variables,
    usually with the ASCII collating sequence. The lexical comparison functions LLT,
    LLE, LGE, LGT use this sequence. MINVAL, MINLOC, FINDLOC work on arrays of strings.
    <a href="https://t.co/fymX8ecd4j">pic.twitter.com/fymX8ecd4j</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1492489511821004805?ref_src=twsrc%5Etfw">February
    12, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1492489511821004805'
  tweet_text: The comparison operators &lt; &lt;= etc. or .lt. .le. etc. can be used
    for character variables, usually with the ASCII collating sequence. The lexical
    comparison functions LLT, LLE, LGE, LGT use this sequence. MINVAL, MINLOC, FINDLOC
    work on arrays of strings. https://t.co/fymX8ecd4j
- datetime: 2022-02-11 07:34:00
  file_links:
  - target: ./write_char.f90
    text: write_char.f90
  ft_topic_id: character-variables
  title: Internal write to character variable too small to hold output causes run-time
    error.
  tweet_created_at: '2022-02-11T12:34:50.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A character
    variable can be assigned to a character variable with smaller or larger LEN, resulting
    in padding with blanks or truncation, but an internal write to a character variable
    that is too small to hold the output will cause a run-time error. <a href="https://t.co/4wW4hTYTHS">pic.twitter.com/4wW4hTYTHS</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1492114908351283206?ref_src=twsrc%5Etfw">February
    11, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1492114908351283206'
  tweet_text: "A character variable can be assigned to a character variable with smaller\
    \ or larger LEN, resulting in padding with blanks or truncation, but an internal\
    \ write to a character variable that is too small to hold the output will cause\
    \ a run-time error. \nhttps://t.co/4wW4hTYTHS"
- datetime: 2022-02-10 07:43:00
  file_links:
  - target: ./internal_read_write.f90
    text: internal_read_write.f90
  ft_topic_id: character-variables
  title: Convert from strings to numbers and the reverse using internal READ and WRITE.
  tweet_created_at: '2022-02-10T12:43:19.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Type conversion
    from strings to numbers and vice-versa is most commonly done with internal reads
    and writes. You can read from and write to a character variable as with a file.
    You cannot write to an unallocated deferred-length character variable.<a href="https://t.co/wE0gLrf41d">pic.twitter.com/wE0gLrf41d</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1491754652030885888?ref_src=twsrc%5Etfw">February
    10, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1491754652030885888'
  tweet_text: 'Type conversion from strings to numbers and vice-versa is most commonly
    done with internal reads and writes. You can read from and write to a character
    variable as with a file. You cannot write to an unallocated deferred-length character
    variable.

    https://t.co/wE0gLrf41d'
- datetime: 2022-02-09 06:55:00
  file_links:
  - target: ./spread.f90
    text: spread.f90
  ft_topic_id: arrays
  title: spread(source, dim, ncopies) copies a SOURCE array NCOPIES times along dimension
    DIM.
  tweet_created_at: '2022-02-09T11:55:03.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">spread(source,
    dim, ncopies) copies a SOURCE array NCOPIES times along dimension DIM, creating
    an array one rank higher than SOURCE. It can be applied to a vector to get a result
    that is conformable with a matrix.<a href="https://t.co/gZRvWZckGz">pic.twitter.com/gZRvWZckGz</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1491380119616700417?ref_src=twsrc%5Etfw">February
    9, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1491380119616700417'
  tweet_text: 'spread(source, dim, ncopies) copies a SOURCE array NCOPIES times along
    dimension DIM, creating an array one rank higher than SOURCE. It can be applied
    to a vector to get a result that is conformable with a matrix.

    https://t.co/gZRvWZckGz'
- datetime: 2022-02-08 07:11:00
  file_links:
  - target: ./concatenate.f90
    text: concatenate.f90
  ft_topic_id: arrays
  title: Concatenate arrays and scalars in an array constructor []
  tweet_created_at: '2022-02-08T12:11:53.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A mix of
    arrays and scalars can be concatenated to a 1D array by putting them in an array
    constructor. Each array is flattened in column-major order to a 1D array.<br>Columns
    can be added to a matrix using RESHAPE on a concatenation. <a href="https://t.co/43bpTzHDTy">pic.twitter.com/43bpTzHDTy</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1491021968799600641?ref_src=twsrc%5Etfw">February
    8, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1491021968799600641'
  tweet_text: "A mix of arrays and scalars can be concatenated to a 1D array by putting\
    \ them in an array constructor. Each array is flattened in column-major order\
    \ to a 1D array.\nColumns can be added to a matrix using RESHAPE on a concatenation.\
    \ \nhttps://t.co/43bpTzHDTy"
- datetime: 2022-02-07 07:38:00
  file_links:
  - target: ./get_command.f90
    text: get_command.f90
  ft_topic_id: environment-variables
  title: get_command() and get_command_argument() get command line arguments.
  tweet_created_at: '2022-02-07T12:38:02.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In Fortran
    2003, get_command(command) and<br>get_command_argument(number,value) are subroutines
    to get the entire command line or the nth argument as character variables, and
    the function command_argument_count() returns the number of arguments.<a href="https://t.co/TfCZ8dzn5R">pic.twitter.com/TfCZ8dzn5R</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1490666160504905730?ref_src=twsrc%5Etfw">February
    7, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1490666160504905730'
  tweet_text: 'In Fortran 2003, get_command(command) and

    get_command_argument(number,value) are subroutines to get the entire command line
    or the nth argument as character variables, and the function command_argument_count()
    returns the number of arguments.

    https://t.co/TfCZ8dzn5R'
- datetime: 2022-02-06 09:21:00
  file_links:
  - target: ./get_env.f90
    text: get_env.f90
  ft_topic_id: environment-variables
  title: Demonstrate subroutine get_environment_variable(name,value) of Fortran 2003.
  tweet_created_at: '2022-02-06T14:21:15.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Subroutine
    get_environment_variable(name,value) of Fortran 2003 returns the value of an environment
    variable or a blank string if it does not exist. The user<br>and computer name
    can be added to results, and whether the OS is Windows or Unix can be queried.<a
    href="https://t.co/ctMhn0nXwl">pic.twitter.com/ctMhn0nXwl</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1490329749578731530?ref_src=twsrc%5Etfw">February
    6, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1490329749578731530'
  tweet_text: 'Subroutine get_environment_variable(name,value) of Fortran 2003 returns
    the value of an environment variable or a blank string if it does not exist. The
    user

    and computer name can be added to results, and whether the OS is Windows or Unix
    can be queried.

    https://t.co/ctMhn0nXwl'
- datetime: 2022-02-05 08:23:00
  file_links:
  - target: ./xpi.f90
    text: xpi.f90
  ft_topic_id: environment-variables
  title: Document results with compiler_version(), compiler_options(), and other intrinsics.
  tweet_created_at: '2022-02-05T13:23:25.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">To document
    results use get_command_argument(0,name) to get the<br>executable name, compiler_version()
    and compiler_options() to get the compiler and options used, date_and_time() for
    the time, and cpu_time() or system_clock() for time elapsed.<a href="https://t.co/ag8p4ipIqN">pic.twitter.com/ag8p4ipIqN</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1489952805649588226?ref_src=twsrc%5Etfw">February
    5, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1489952805649588226'
  tweet_text: 'To document results use get_command_argument(0,name) to get the

    executable name, compiler_version() and compiler_options() to get the compiler
    and options used, date_and_time() for the time, and cpu_time() or system_clock()
    for time elapsed.

    https://t.co/ag8p4ipIqN'
- datetime: 2022-02-04 07:44:00
  file_links: []
  ft_topic_id: environment-variables
  title: Execute_command_line() can call gnuplot to display a plot during a run.
  tweet_created_at: '2022-02-04T12:44:19.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://t.co/UW5eVxka7J">https://t.co/UW5eVxka7J</a>
    <br>execute_command_line() can call gnuplot to display a plot during a run, as
    done in GitHub project ogpf. Another use is execute_command_line(&quot;ls data/*.csv
    &gt; list.txt&quot;) to create a list of files to process.</p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1489580579653918729?ref_src=twsrc%5Etfw">February
    4, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1489580579653918729'
  tweet_text: "https://t.co/UW5eVxka7J \nexecute_command_line() can call gnuplot to\
    \ display a plot during a run, as done in GitHub project ogpf. Another use is\
    \ execute_command_line(\"ls data/*.csv &gt; list.txt\") to create a list of files\
    \ to process."
- datetime: 2022-02-03 07:23:00
  file_links:
  - target: ./execute.f90
    text: execute.f90
  ft_topic_id: environment-variables
  title: Execute_command_line() to pass a command to the shell.
  tweet_created_at: '2022-02-03T12:23:17.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">execute_command_line(command
    [,wait,exitstat]) is a Fortran 2008 subroutine that issues a command to the shell
    and returns the exit code exitstat of the command. The program pauses until the
    command is finished unless wait is PRESENT and .FALSE.<a href="https://t.co/XF3s5THxv8">pic.twitter.com/XF3s5THxv8</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1489212898777964545?ref_src=twsrc%5Etfw">February
    3, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1489212898777964545'
  tweet_text: 'execute_command_line(command [,wait,exitstat]) is a Fortran 2008 subroutine
    that issues a command to the shell and returns the exit code exitstat of the command.
    The program pauses until the command is finished unless wait is PRESENT and .FALSE.

    https://t.co/XF3s5THxv8'
- datetime: 2022-02-02 07:00:00
  file_links: []
  ft_topic_id: fortran-resources
  title: Mistakes in Fortran 90 Programs That Might Surprise You, by Szymanski
  tweet_created_at: '2022-02-02T12:00:33.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Here is a
    a survey of Fortran 90 pitfalls. Most are still relevant, but now<br>(1) Derived
    types can have allocatable components.<br>(2) A pointer can be initialized to
    null() in the<br>declaration.<br>(3) Stream I/O is an alternative to record-based
    I/O.<a href="https://t.co/P4tRJyN0Y6">https://t.co/P4tRJyN0Y6</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1488844789575569408?ref_src=twsrc%5Etfw">February
    2, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1488844789575569408'
  tweet_text: 'Here is a a survey of Fortran 90 pitfalls. Most are still relevant,
    but now

    (1) Derived types can have allocatable components.

    (2) A pointer can be initialized to null() in the

    declaration.

    (3) Stream I/O is an alternative to record-based I/O.

    https://t.co/P4tRJyN0Y6'
- datetime: 2022-02-01 07:41:00
  file_links:
  - target: ./truloc.f90
    text: truloc.f90
  ft_topic_id: arrays
  title: Setting the values of an array section
  tweet_created_at: '2022-02-01T12:41:17.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran array
    indices must be integers, so you cannot write<br><br>v(v&lt;0) = -1<br><br>as
    in R, but alternatives are<br><br>where (v&lt;0) v = -1<br>v = merge(-1,v,v&lt;0)<br>v(truloc(v&lt;0))
    = -1<br><br>where truloc is a user function that creates a vector subscript from
    a logical mask.<a href="https://t.co/Z8BM3iUNOF">pic.twitter.com/Z8BM3iUNOF</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1488492649166295043?ref_src=twsrc%5Etfw">February
    1, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1488492649166295043'
  tweet_text: 'Fortran array indices must be integers, so you cannot write


    v(v&lt;0) = -1


    as in R, but alternatives are


    where (v&lt;0) v = -1

    v = merge(-1,v,v&lt;0)

    v(truloc(v&lt;0)) = -1


    where truloc is a user function that creates a vector subscript from a logical
    mask.

    https://t.co/Z8BM3iUNOF'
- datetime: 2022-01-31 07:51:00
  file_links:
  - target: ./vector_subscript.f90
    text: vector_subscript.f90
  ft_topic_id: arrays
  title: Vector subscript can be used for non-contiguous array sections.
  tweet_created_at: '2022-01-31T12:51:03.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A vector
    subscript can be used for non-contiguous array sections, for example <br><br>real
    :: x(5)<br>print*,x([2,4])<br><br>An array section with a vector subscript cannot
    be passed as an intent(out) or intent(in out) argument. <a href="https://t.co/kTdDGksivR">pic.twitter.com/kTdDGksivR</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1488132722761609216?ref_src=twsrc%5Etfw">January
    31, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1488132722761609216'
  tweet_text: "A vector subscript can be used for non-contiguous array sections, for\
    \ example \n\nreal :: x(5)\nprint*,x([2,4])\n\nAn array section with a vector\
    \ subscript cannot be passed as an intent(out) or intent(in out) argument. https://t.co/kTdDGksivR"
- datetime: 2022-01-30 09:13:00
  file_links: []
  ft_topic_id: fortran-resources
  title: Polyhedron suggested compiler optimization options and Fortran 95 benchmarks
  tweet_created_at: '2022-01-30T14:13:57.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Polyhedron
    has suggested compiler options for optimization and compared compiler speed on
    some Fortran 95 codes. <a href="https://t.co/3zrgBY9TPM">https://t.co/3zrgBY9TPM</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1487791193710866437?ref_src=twsrc%5Etfw">January
    30, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1487791193710866437'
  tweet_text: "Polyhedron has suggested compiler options for optimization and compared\
    \ compiler speed on some Fortran 95 codes. \nhttps://t.co/3zrgBY9TPM"
- datetime: 2022-01-29 17:43:00
  file_links: []
  ft_topic_id: fortran-resources
  title: Google foo filetype:f90 or foo filetype:f to find Fortran code with foo.
  tweet_created_at: '2022-01-29T22:43:38.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Since Fortran
    source files usually have the .f90 or .f suffix, you can Google, for example,
    &quot;finite element&quot; filetype:f90 and &quot;finite element&quot; filetype:f
    to find finite element codes.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1487557071818084357?ref_src=twsrc%5Etfw">January
    29, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1487557071818084357'
  tweet_text: Since Fortran source files usually have the .f90 or .f suffix, you can
    Google, for example, "finite element" filetype:f90 and "finite element" filetype:f
    to find finite element codes.
- datetime: 2022-01-29 08:02:00
  file_links:
  - target: ./trapezoid.f90
    text: trapezoid.f90
  ft_topic_id: procedures
  title: A procedure can have an argument that is another PROCEDURE with an INTERFACE.
  tweet_created_at: '2022-01-29T13:02:27.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A procedure
    can have an argument that is another PROCEDURE with an INTERFACE, which is useful
    for writing a procedure that minimizes or integrates a function.<a href="https://t.co/NtVYKTbltS">pic.twitter.com/NtVYKTbltS</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1487410814919356419?ref_src=twsrc%5Etfw">January
    29, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1487410814919356419'
  tweet_text: 'A procedure can have an argument that is another PROCEDURE with an
    INTERFACE, which is useful for writing a procedure that minimizes or integrates
    a function.

    https://t.co/NtVYKTbltS'
- datetime: 2022-01-28 10:26:00
  file_links:
  - target: ./ieee_exceptions.f90
    text: ieee_exceptions.f90
  ft_topic_id: floating-point-arithmetic
  title: Call ieee_set_halting_mode() to set floating point conditions that halt program.
  tweet_created_at: '2022-01-28T15:26:13.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Call ieee_set_halting_mode()
    of F2003 module ieee_exceptions to set the floating point conditions (NaN, overflow,
    underflow, divide-by-zero, inexact) that will halt a program. Similar compiler
    options include <br>gfortran -ffpe-trap=invalid<br>ifort -fpe0.<a href="https://t.co/gHjgCZMQU0">pic.twitter.com/gHjgCZMQU0</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1487084606780325889?ref_src=twsrc%5Etfw">January
    28, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1487084606780325889'
  tweet_text: "Call ieee_set_halting_mode() of F2003 module ieee_exceptions to set\
    \ the floating point conditions (NaN, overflow, underflow, divide-by-zero, inexact)\
    \ that will halt a program. Similar compiler options include \ngfortran -ffpe-trap=invalid\n\
    ifort -fpe0.\nhttps://t.co/gHjgCZMQU0"
- datetime: 2022-01-27 09:22:00
  file_links:
  - target: ./ieee_arithmetic.f90
    text: ieee_arithmetic.f90
  ft_topic_id: floating-point-arithmetic
  title: IEEE_ARITHMETIC module has functions to test numerical conditions.
  tweet_created_at: '2022-01-27T14:22:15.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran 2003
    introduced an ieee_arithmetic module with elemental functions ieee_is_nan, ieee_is_finite,
    <br>ieee_is_negative, and ieee_is_normal, which test for those conditions. They
    have a real argument and logical RESULT.<a href="https://t.co/82On9iDxXQ">pic.twitter.com/82On9iDxXQ</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1486706121335263246?ref_src=twsrc%5Etfw">January
    27, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1486706121335263246'
  tweet_text: "Fortran 2003 introduced an ieee_arithmetic module with elemental functions\
    \ ieee_is_nan, ieee_is_finite, \nieee_is_negative, and ieee_is_normal, which test\
    \ for those conditions. They have a real argument and logical RESULT.\nhttps://t.co/82On9iDxXQ"
- datetime: 2022-01-26 07:20:00
  file_links:
  - target: ./definable_arg.f90
    text: definable_arg.f90
  ft_topic_id: procedures
  title: Dummy argument that is changed must be definable in the caller.
  tweet_created_at: '2022-01-26T12:20:20.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If a dummy
    argument without the VALUE attribute is changed in a procedure, the actual argument
    must be definable in the caller -- a variable, not a constant or expression.<a
    href="https://t.co/cpxhod0nN7">pic.twitter.com/cpxhod0nN7</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1486313053092208645?ref_src=twsrc%5Etfw">January
    26, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1486313053092208645'
  tweet_text: 'If a dummy argument without the VALUE attribute is changed in a procedure,
    the actual argument must be definable in the caller -- a variable, not a constant
    or expression.

    https://t.co/cpxhod0nN7'
- datetime: 2022-01-25 07:47:00
  file_links:
  - target: ./intent_out_allocatable.f90
    text: intent_out_allocatable.f90
  ft_topic_id: procedures
  title: ALLOCATABLE INTENT(OUT) argument is deallocated.
  tweet_created_at: '2022-01-25T12:47:40.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">An ALLOCATABLE
    INTENT(OUT) dummy argument is deallocated at the beginning of a procedure, as
    are the ALLOCATABLE components of an INTENT(OUT) derived type.<a href="https://t.co/gtBVzGD0nv">pic.twitter.com/gtBVzGD0nv</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1485957543990018053?ref_src=twsrc%5Etfw">January
    25, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1485957543990018053'
  tweet_text: 'An ALLOCATABLE INTENT(OUT) dummy argument is deallocated at the beginning
    of a procedure, as are the ALLOCATABLE components of an INTENT(OUT) derived type.

    https://t.co/gtBVzGD0nv'
- datetime: 2022-01-24 07:45:00
  file_links:
  - target: ./intent_out_undefined.f90
    text: intent_out_undefined.f90
  ft_topic_id: procedures
  title: An INTENT(OUT) argument is undefined at the beginning of a procedure
  tweet_created_at: '2022-01-24T12:45:45.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A non-allocatable
    INTENT(OUT) dummy argument is undefined at the beginning of a procedure. Although
    most compilers will set it to the value of the actual argument, you should declare
    the argument <br>INTENT(IN OUT) to mandate this behavior. <a href="https://t.co/3dLZA7aWwP">pic.twitter.com/3dLZA7aWwP</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1485594671300632576?ref_src=twsrc%5Etfw">January
    24, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1485594671300632576'
  tweet_text: "A non-allocatable INTENT(OUT) dummy argument is undefined at the beginning\
    \ of a procedure. Although most compilers will set it to the value of the actual\
    \ argument, you should declare the argument \nINTENT(IN OUT) to mandate this behavior.\
    \ https://t.co/3dLZA7aWwP"
- datetime: 2022-01-23 07:58:00
  file_links:
  - target: ./warnings.f90
    text: warnings.f90
  ft_topic_id: style
  title: Turn compiler warnings into errors to force code defects to be fixed.
  tweet_created_at: '2022-01-23T12:58:07.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">To ensure
    that code defects are fixed, use options to turn the relevant compiler warnings
    into errors in the build system. For example<br><br>gfortran -Werror=unused-variable
    -Werror=unused-function<br><br>rejects the code below. Mere warnings are often
    ignored.<a href="https://t.co/OiYA1EWwcj">pic.twitter.com/OiYA1EWwcj</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1485235396179079173?ref_src=twsrc%5Etfw">January
    23, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1485235396179079173'
  tweet_text: 'To ensure that code defects are fixed, use options to turn the relevant
    compiler warnings into errors in the build system. For example


    gfortran -Werror=unused-variable -Werror=unused-function


    rejects the code below. Mere warnings are often ignored.

    https://t.co/OiYA1EWwcj'
- datetime: 2022-01-22 08:05:00
  file_links:
  - target: ./value.f90
    text: value.f90
  ft_topic_id: procedures
  title: VALUE attribute for procedure arguments introduced in Fortran 2003
  tweet_created_at: '2022-01-22T13:05:13.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If an argument
    has the VALUE attribute, added in Fortran 2003, changes to the dummy argument
    in the procedure do not change the actual argument in the the caller.<a href="https://t.co/SVdZjbaw5v">pic.twitter.com/SVdZjbaw5v</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1484874794352918528?ref_src=twsrc%5Etfw">January
    22, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1484874794352918528'
  tweet_text: 'If an argument has the VALUE attribute, added in Fortran 2003, changes
    to the dummy argument in the procedure do not change the actual argument in the
    the caller.

    https://t.co/SVdZjbaw5v'
- datetime: 2022-01-21 08:23:00
  file_links:
  - target: ./intrinsic.f90
    text: intrinsic.f90
  ft_topic_id: procedures
  title: Use INTRINSIC to specify that compiler-provided procedures and modules are
    referenced
  tweet_created_at: '2022-01-21T13:23:50.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">You can supply
    procedures and modules with the same names as intrinsics. To specify that the
    intrinsic procedure or module provided by the compiler is used write<br><br>use,
    intrinsic :: iso_fortran_env<br>intrinsic :: sin <a href="https://t.co/NydDt6a9eD">pic.twitter.com/NydDt6a9eD</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1484517091738886147?ref_src=twsrc%5Etfw">January
    21, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1484517091738886147'
  tweet_text: "You can supply procedures and modules with the same names as intrinsics.\
    \ To specify that the intrinsic procedure or module provided by the compiler is\
    \ used write\n\nuse, intrinsic :: iso_fortran_env\nintrinsic :: sin \nhttps://t.co/NydDt6a9eD"
- datetime: 2022-01-20 07:12:00
  file_links:
  - target: ./protected.f90
    text: protected.f90
  ft_topic_id: modules
  title: PROTECTED module variables cannot be changed outside the module.
  tweet_created_at: '2022-01-20T12:12:29.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If a module
    variable is PROTECTED, an attribute introduced in Fortran 2003, it can only be
    modified by a procedure in the module where it is declared. It is useful for PUBLIC
    module variables that can be accessed but should not changed outside the module.<a
    href="https://t.co/HoABECoBdO">pic.twitter.com/HoABECoBdO</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1484136749924245509?ref_src=twsrc%5Etfw">January
    20, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1484136749924245509'
  tweet_text: 'If a module variable is PROTECTED, an attribute introduced in Fortran
    2003, it can only be modified by a procedure in the module where it is declared.
    It is useful for PUBLIC module variables that can be accessed but should not changed
    outside the module.

    https://t.co/HoABECoBdO'
- datetime: 2022-01-19 07:09:00
  file_links: []
  ft_topic_id: arrays
  title: Array constructor with [] was introduced in Fortran 2003. Still valid is
    (//)
  tweet_created_at: '2022-01-19T12:09:23.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Using []
    for an array constructor was introduced in Fortran 2003, although many Fortran
    95 compilers supported it. The older syntax (//) is still valid.<br><br>print*,
    all([4,9] == (/4,9/)) ! T</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1483773578839474180?ref_src=twsrc%5Etfw">January
    19, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1483773578839474180'
  tweet_text: 'Using [] for an array constructor was introduced in Fortran 2003, although
    many Fortran 95 compilers supported it. The older syntax (//) is still valid.


    print*, all([4,9] == (/4,9/)) ! T'
- datetime: 2022-01-18 08:26:00
  file_links:
  - target: ./random_normal.f90
    text: random_normal.f90
  ft_topic_id: procedures
  title: Impure elemental procedure can be used to generate array of non-uniform variates
  tweet_created_at: '2022-01-18T13:26:26.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The RANDOM_NUMBER
    intrinsic returns a scalar or an array of uniform variates. An impure elemental
    subroutine can do the same for normal variates, given an algorithm to generate
    a single normal variate, possibly using RANDOM_NUMBER.<a href="https://t.co/udthsbMT7T">pic.twitter.com/udthsbMT7T</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1483430581232967684?ref_src=twsrc%5Etfw">January
    18, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1483430581232967684'
  tweet_text: 'The RANDOM_NUMBER intrinsic returns a scalar or an array of uniform
    variates. An impure elemental subroutine can do the same for normal variates,
    given an algorithm to generate a single normal variate, possibly using RANDOM_NUMBER.

    https://t.co/udthsbMT7T'
- datetime: 2022-01-17 08:07:00
  file_links:
  - target: ./impure_elemental.f90
    text: impure_elemental.f90
  ft_topic_id: procedures
  title: Fortran 2008 introduced IMPURE ELEMENTAL procedures
  tweet_created_at: '2022-01-17T13:07:38.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran 2008
    allows procedures to be labeled IMPURE ELEMENTAL. Such procedures can do external
    I/O and have a STOP or ERROR STOP statement. They can simulate a loop over a collection.
    The plain ELEMENTAL designation means the same as PURE ELEMENTAL.<a href="https://t.co/e5Z6K7MvvC">pic.twitter.com/e5Z6K7MvvC</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1483063464562204672?ref_src=twsrc%5Etfw">January
    17, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1483063464562204672'
  tweet_text: 'Fortran 2008 allows procedures to be labeled IMPURE ELEMENTAL. Such
    procedures can do external I/O and have a STOP or ERROR STOP statement. They can
    simulate a loop over a collection. The plain ELEMENTAL designation means the same
    as PURE ELEMENTAL.

    https://t.co/e5Z6K7MvvC'
- datetime: 2022-01-16 08:42:00
  file_links:
  - target: https://github.com/Beliavsky/Fortran-Tools
    text: list
  ft_topic_id: fortran-resources
  title: List of Fortran compilers, build tools, text editors, etc.
  tweet_created_at: '2022-01-16T13:42:22.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">I keep a
    list of Fortran compilers, build tools, text editors and plug-ins, linters, preprocessors,
    translators to and from Fortran, profilers, tools for refactoring, interoperability,
    and automatic documentation, and unit testing frameworks.<a href="https://t.co/fnWwF04z5D">https://t.co/fnWwF04z5D</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1482709817466707969?ref_src=twsrc%5Etfw">January
    16, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1482709817466707969'
  tweet_text: 'I keep a list of Fortran compilers, build tools, text editors and plug-ins,
    linters, preprocessors, translators to and from Fortran, profilers, tools for
    refactoring, interoperability, and automatic documentation, and unit testing frameworks.

    https://t.co/fnWwF04z5D'
- datetime: 2022-01-16 07:14:00
  file_links:
  - target: ./iomsg.f90
    text: iomsg.f90
  - target: ./iomsg_data_file.txt
    text: data_file
  ft_topic_id: input-and-output
  title: Use iostat and iomsg to handle READ errors
  tweet_created_at: '2022-01-16T12:14:12.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The Fortran
    2003 module iso_fortran_env has constants <br><br>iostat_eor -- end of record<br>iostat_end
    -- end of file<br><br>to which the iostat of a READ statement will be set if that
    error occurs. READ also has an iomsg specifier returning a text error message.<a
    href="https://t.co/Rm6DmsKPP9">pic.twitter.com/Rm6DmsKPP9</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1482687630877892608?ref_src=twsrc%5Etfw">January
    16, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1482687630877892608'
  tweet_text: "The Fortran 2003 module iso_fortran_env has constants \n\niostat_eor\
    \ -- end of record\niostat_end -- end of file\n\nto which the iostat of a READ\
    \ statement will be set if that error occurs. READ also has an iomsg specifier\
    \ returning a text error message.\nhttps://t.co/Rm6DmsKPP9"
- datetime: 2022-01-15 07:29:00
  file_links:
  - target: ./imports.f90
    text: imports.f90
  ft_topic_id: modules
  title: An unqualified USE foo statement imports public entities defined in foo and
    what foo imported.
  tweet_created_at: '2022-01-15T12:29:06.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">use foo<br><br>imports
    not only the public entities defined in module foo but also the entities that
    foo imports from module bar. To avoid inadvertent imports and clarify what is
    imported, write<br><br>use foo, only: &lt;imports&gt;<br>use bar, only: &lt;imports&gt;
    ! if any<a href="https://t.co/9s78tF1V5Q">pic.twitter.com/9s78tF1V5Q</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1482328990798987266?ref_src=twsrc%5Etfw">January
    15, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1482328990798987266'
  tweet_text: 'use foo


    imports not only the public entities defined in module foo but also the entities
    that foo imports from module bar. To avoid inadvertent imports and clarify what
    is imported, write


    use foo, only: &lt;imports&gt;

    use bar, only: &lt;imports&gt; ! if any

    https://t.co/9s78tF1V5Q'
- datetime: 2022-01-14 07:45:00
  file_links:
  - target: ./private.f90
    text: private.f90
  ft_topic_id: modules
  title: Module entities are PUBLIC by default.
  tweet_created_at: '2022-01-14T12:45:32.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Module entities
    are PUBLIC by default, but if a blank PRIVATE statement is used, any public entities
    must be labeled so explicitly. Doing this clarifies what is exported from the
    module.<a href="https://t.co/4eJZDbU7CZ">pic.twitter.com/4eJZDbU7CZ</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1481970740475932676?ref_src=twsrc%5Etfw">January
    14, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1481970740475932676'
  tweet_text: 'Module entities are PUBLIC by default, but if a blank PRIVATE statement
    is used, any public entities must be labeled so explicitly. Doing this clarifies
    what is exported from the module.

    https://t.co/4eJZDbU7CZ'
- datetime: 2022-01-13 07:01:00
  file_links:
  - target: ./rename.f90
    text: rename.f90
  ft_topic_id: modules
  title: How to rename an imported module entity
  tweet_created_at: '2022-01-13T12:01:43.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">An imported
    module entity can be renamed with the syntax<br><br>use mod, only: local_name
    =&gt; use_name<br><br>or<br><br>use mod, local_name =&gt; use_name<br><br>This
    is necessary when importing procedures with the same name, not in interfaces,
    from different<br>modules. <a href="https://t.co/89mRx3jsWV">pic.twitter.com/89mRx3jsWV</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1481597325499842563?ref_src=twsrc%5Etfw">January
    13, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1481597325499842563'
  tweet_text: 'An imported module entity can be renamed with the syntax


    use mod, only: local_name =&gt; use_name


    or


    use mod, local_name =&gt; use_name


    This is necessary when importing procedures with the same name, not in interfaces,
    from different

    modules. https://t.co/89mRx3jsWV'
- datetime: 2022-01-12 07:52:00
  file_links:
  - target: ./shared_interface.f90
    text: shared_interface.f90
  ft_topic_id: modules
  title: Use the same name for analogous procedures defined in different modules using
    an INTERFACE
  tweet_created_at: '2022-01-12T12:52:41.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Using an
    INTERFACE, one can use the same name for analogous procedures that operate on
    derived types defined in different modules, for example str to convert a derived
    type to a string.<a href="https://t.co/VeqDzgg5AE">pic.twitter.com/VeqDzgg5AE</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1481247763048407042?ref_src=twsrc%5Etfw">January
    12, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1481247763048407042'
  tweet_text: 'Using an INTERFACE, one can use the same name for analogous procedures
    that operate on derived types defined in different modules, for example str to
    convert a derived type to a string.

    https://t.co/VeqDzgg5AE'
- datetime: 2022-01-11 08:26:00
  file_links:
  - target: ./arguments.f90
    text: arguments.f90
  ft_topic_id: procedures
  title: Procedures can be called with a mix of named and positional arguments.
  tweet_created_at: '2022-01-11T13:26:19.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Procedures
    can be called with a mix of named and positional arguments, but positional arguments
    cannot follow named ones. Naming arguments makes it easier to add arguments without
    breaking code. It&#39;s good to<br>name OPTIONAL arguments.<a href="https://t.co/rIl2jM0DTA">pic.twitter.com/rIl2jM0DTA</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1480893840068390913?ref_src=twsrc%5Etfw">January
    11, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1480893840068390913'
  tweet_text: 'Procedures can be called with a mix of named and positional arguments,
    but positional arguments cannot follow named ones. Naming arguments makes it easier
    to add arguments without breaking code. It''s good to

    name OPTIONAL arguments.

    https://t.co/rIl2jM0DTA'
- datetime: 2022-01-10 11:59:00
  file_links: []
  ft_topic_id: procedures
  title: UnALLOCATED variable passed to a procedure is not PRESENT there.
  tweet_created_at: '2022-01-10T16:59:31.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A variable
    that is not ALLOCATED, when passed as an OPTIONAL, non-allocatable argument to
    a procedure, is considered not PRESENT there. This Fortran 2008 feature can simplify
    code. <a href="https://t.co/TdSd5Jv0Pt">https://t.co/TdSd5Jv0Pt</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1480585104997163018?ref_src=twsrc%5Etfw">January
    10, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1480585104997163018'
  tweet_text: A variable that is not ALLOCATED, when passed as an OPTIONAL, non-allocatable
    argument to a procedure, is considered not PRESENT there. This Fortran 2008 feature
    can simplify code. https://t.co/TdSd5Jv0Pt
- datetime: 2022-01-09 08:00:00
  file_links:
  - target: ./dimension.f90
    text: dimension.f90
  ft_topic_id: arrays
  title: DIMENSION can be used to declare several arrays of the same SHAPE
  tweet_created_at: '2022-01-09T13:00:39.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">DIMENSION
    can be used to declare several arrays of the same SHAPE, which can be overridden
    on the same line.<br><br>real, dimension(3,4) :: x, y, z(5,6)<br><br>is legal
    but should be written<br><br>real, dimension(3,4) :: x, y<br>real :: z(5,6)<br><br>for
    clarity.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1480162604559523840?ref_src=twsrc%5Etfw">January
    9, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1480162604559523840'
  tweet_text: 'DIMENSION can be used to declare several arrays of the same SHAPE,
    which can be overridden on the same line.


    real, dimension(3,4) :: x, y, z(5,6)


    is legal but should be written


    real, dimension(3,4) :: x, y

    real :: z(5,6)


    for clarity.'
- datetime: 2022-01-08 08:23:00
  file_links:
  - target: ./optional_use.f90
    text: optional_use.f90
  ft_topic_id: procedures
  title: Propagation of an optional argument
  tweet_created_at: '2022-01-08T13:23:36.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A procedure
    with an OPTIONAL argument can call a procedure with that argument if it is OPTIONAL
    there too. The PRESENT status of the argument propagates to called procedures.
    The optval function of the Fortran stdlib project exploits this. <a href="https://t.co/amhSL1cbY7">pic.twitter.com/amhSL1cbY7</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1479805991382360066?ref_src=twsrc%5Etfw">January
    8, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1479805991382360066'
  tweet_text: A procedure with an OPTIONAL argument can call a procedure with that
    argument if it is OPTIONAL there too. The PRESENT status of the argument propagates
    to called procedures. The optval function of the Fortran stdlib project exploits
    this. https://t.co/amhSL1cbY7
- datetime: 2022-01-07 21:28:00
  file_links:
  - target: ./function.f90
    text: function.f90
  - target: ./function.txt
    text: function.txt
  ft_topic_id: procedures
  title: Two types of syntax for defining a function
  tweet_created_at: '2022-01-08T02:28:46.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Ways of defining
    a function:<br><br>1. Function and result name are the same.<br><br>2. RESULT
    has a different name within the function, which can be used<br>to return an array.<br><br>RETURN,
    when needed, is used to exit the function, not set its value. <a href="https://t.co/TYdVDZPwCz">pic.twitter.com/TYdVDZPwCz</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1479641195898826754?ref_src=twsrc%5Etfw">January
    8, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1479641195898826754'
  tweet_text: 'Ways of defining a function:


    1. Function and result name are the same.


    2. RESULT has a different name within the function, which can be used

    to return an array.


    RETURN, when needed, is used to exit the function, not set its value. https://t.co/TYdVDZPwCz'
- datetime: 2022-01-07 11:19:00
  file_links:
  - target: ./character_array.f90
    text: character_array.f90
  ft_topic_id: character-variables
  title: Syntax for character array without manual padding
  tweet_created_at: '2022-01-07T16:19:09.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran 2003
    lets you write an array of character variables as<br><br>s = [character (len=4)
    :: &quot;one&quot;,&quot;two&quot;,&quot;five&quot;]<br><br>instead of<br><br>s
    = [&quot;one &quot;,&quot;two &quot;,&quot;five&quot;] ! &quot;one&quot; and &quot;two&quot;
    padded<br><br>Manually padding large arrays of strings is a pain.<a href="https://t.co/TH7x2tQ5Wz">pic.twitter.com/TH7x2tQ5Wz</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1479487784205402116?ref_src=twsrc%5Etfw">January
    7, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1479487784205402116'
  tweet_text: 'Fortran 2003 lets you write an array of character variables as


    s = [character (len=4) :: "one","two","five"]


    instead of


    s = ["one ","two ","five"] ! "one" and "two" padded


    Manually padding large arrays of strings is a pain.

    https://t.co/TH7x2tQ5Wz'
- datetime: 2022-01-07 04:58:00
  file_links:
  - target: ./string_func.f90
    text: string_func.f90
  ft_topic_id: character-variables
  title: Intrinsic character functions
  tweet_created_at: '2022-01-07T09:58:16.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Character
    functions:<br><br>scan(x,y): first position of a character in x found in y<br>verify(x,y):
    first position in x NOT found in y<br>index(x,y): first position of substring
    y in x<br>adjustl/adjustr: remove leading/trailing spaces and pad to preserve
    LEN<a href="https://t.co/ZQZUyRq86b">pic.twitter.com/ZQZUyRq86b</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1479391930744283144?ref_src=twsrc%5Etfw">January
    7, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1479391930744283144'
  tweet_text: 'Character functions:


    scan(x,y): first position of a character in x found in y

    verify(x,y): first position in x NOT found in y

    index(x,y): first position of substring y in x

    adjustl/adjustr: remove leading/trailing spaces and pad to preserve LEN

    https://t.co/ZQZUyRq86b'
- datetime: 2022-01-06 11:31:00
  file_links:
  - target: ./substring.f90
    text: substring.f90
  ft_topic_id: character-variables
  title: Substrings of character variable arrays
  tweet_created_at: '2022-01-06T16:31:56.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">For variables<br><br>character
    (len=10) :: s, v(5)<br><br>s(2:4) is the substring from positions 2 to 4 and v(1:3)(2:4)
    is an array of substrings from <br>positions 2 to 4 of the elements v(1) to v(3).
    <a href="https://t.co/h5AIaZwYL2">pic.twitter.com/h5AIaZwYL2</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1479128610623606787?ref_src=twsrc%5Etfw">January
    6, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1479128610623606787'
  tweet_text: "For variables\n\ncharacter (len=10) :: s, v(5)\n\ns(2:4) is the substring\
    \ from positions 2 to 4 and v(1:3)(2:4) is an array of substrings from \npositions\
    \ 2 to 4 of the elements v(1) to v(3). https://t.co/h5AIaZwYL2"
- datetime: 2022-01-06 07:44:00
  file_links:
  - target: ./overlapping_arg.f90
    text: overlapping_arg.f90
  ft_topic_id: basics
  title: Parenthesize a variable to copy it "on the fly".
  tweet_created_at: '2022-01-06T12:44:56.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Parenthesize
    a variable to copy it &quot;on the fly&quot; to avoid overlapping INTENT(IN) and
    INTENT(OUT) arguments, which is non-standard, for example writing<br><br>call
    double((i),i)<br><br>instead of<br><br>call double(i,i) ! bad if args are intent(in)
    and intent(out)<a href="https://t.co/WqS0AvVcCE">pic.twitter.com/WqS0AvVcCE</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1479071485859962880?ref_src=twsrc%5Etfw">January
    6, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1479071485859962880'
  tweet_text: 'Parenthesize a variable to copy it "on the fly" to avoid overlapping
    INTENT(IN) and INTENT(OUT) arguments, which is non-standard, for example writing


    call double((i),i)


    instead of


    call double(i,i) ! bad if args are intent(in) and intent(out)

    https://t.co/WqS0AvVcCE'
- datetime: 2022-01-05 11:28:00
  file_links:
  - target: ./pow_real.f90
    text: pow_real.f90
  ft_topic_id: basics
  title: Use integer powers when possible.
  tweet_created_at: '2022-01-05T16:28:42.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use integer
    powers when possible, writing x**2 instead of x**2.0, since depending on the compiler
    option used, the latter may be computed as exp(2*log(x)), which is slower. <a
    href="https://t.co/vlBznFvWIf">pic.twitter.com/vlBznFvWIf</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478765410405298176?ref_src=twsrc%5Etfw">January
    5, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1478765410405298176'
  tweet_text: Use integer powers when possible, writing x**2 instead of x**2.0, since
    depending on the compiler option used, the latter may be computed as exp(2*log(x)),
    which is slower. https://t.co/vlBznFvWIf
- datetime: 2022-01-05 08:02:00
  file_links:
  - target: ./precision.f90
    text: precision.f90
  ft_topic_id: data-types
  title: Use d0 or \_kind to make a constant double precision.
  tweet_created_at: '2022-01-05T13:02:34.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use d0 or
    _kind to make a constant double precision. Merely having many decimal places in
    a literal constant does not do so.<br><br>real(kind(1.0d0)) :: pi<br>pi = 3.14159265358979323846
    ! RHS is single precision<br><br>probably does not do what the programmer intends!
    <a href="https://t.co/T9hNCwfcE2">pic.twitter.com/T9hNCwfcE2</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478713534850736129?ref_src=twsrc%5Etfw">January
    5, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1478713534850736129'
  tweet_text: 'Use d0 or _kind to make a constant double precision. Merely having
    many decimal places in a literal constant does not do so.


    real(kind(1.0d0)) :: pi

    pi = 3.14159265358979323846 ! RHS is single precision


    probably does not do what the programmer intends! https://t.co/T9hNCwfcE2'
- datetime: 2022-01-04 19:39:00
  file_links: []
  ft_topic_id: data-types
  title: KIND numbers of types are not portable across compilers and should not be
    used directly.
  tweet_created_at: '2022-01-05T00:39:46.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">KIND numbers
    of types are not portable across compilers and should not be used directly. It&#39;s
    better to use the named constants from iso_fortran_env. For both gfortran and
    Intel Fortran<br><br>use iso_fortran_env<br>print*,int8,int16,int32,int64<br><br>gives
    1 2 4 8, but NAG gives 1 2 3 4.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478526602136981511?ref_src=twsrc%5Etfw">January
    5, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1478526602136981511'
  tweet_text: 'KIND numbers of types are not portable across compilers and should
    not be used directly. It''s better to use the named constants from iso_fortran_env.
    For both gfortran and Intel Fortran


    use iso_fortran_env

    print*,int8,int16,int32,int64


    gives 1 2 4 8, but NAG gives 1 2 3 4.'
- datetime: 2022-01-04 08:50:00
  file_links:
  - target: ./implicit_save.f90
    text: implicit_save.f90
  - target: https://onlinegdb.com/BCZzmjYxs
    text: run
  ft_topic_id: procedures
  title: Avoid implicit save
  tweet_created_at: '2022-01-04T13:50:50.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A variable
    given a value in the declaration has the implicit SAVE attribute and is not re-initialized
    in later calls to the procedure. Write<br><br>integer :: i<br>i = 0<br><br>instead
    of <br><br>integer :: i = 0<br><br>If SAVE is intended be explicit:<br><br>integer,
    save :: i = 0<a href="https://t.co/X1ZUSZblZX">pic.twitter.com/X1ZUSZblZX</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478363292028784645?ref_src=twsrc%5Etfw">January
    4, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1478363292028784645'
  tweet_text: "A variable given a value in the declaration has the implicit SAVE attribute\
    \ and is not re-initialized in later calls to the procedure. Write\n\ninteger\
    \ :: i\ni = 0\n\ninstead of \n\ninteger :: i = 0\n\nIf SAVE is intended be explicit:\n\
    \ninteger, save :: i = 0\nhttps://t.co/X1ZUSZblZX"
- datetime: 2022-01-04 06:45:00
  file_links: []
  ft_topic_id: arrays
  title: Use parameters to dimension fixed-size arrays to make a code easier to change
  tweet_created_at: '2022-01-04T11:45:14.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use parameters
    to dimension fixed-size arrays to make a code easier to change, for example<br><br>integer,
    parameter :: n1=3,n2=5<br>real :: x(n1,n2),y(n1,n2),z(n1,n2)<br><br>or<br><br>real,
    dimension(n1,n2) :: x,y,z<br><br>Numbers other than 0 or 1 should not appear repeatedly
    and should be parameters.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478331686412861440?ref_src=twsrc%5Etfw">January
    4, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1478331686412861440'
  tweet_text: 'Use parameters to dimension fixed-size arrays to make a code easier
    to change, for example


    integer, parameter :: n1=3,n2=5

    real :: x(n1,n2),y(n1,n2),z(n1,n2)


    or


    real, dimension(n1,n2) :: x,y,z


    Numbers other than 0 or 1 should not appear repeatedly and should be parameters.'
- datetime: 2022-01-03 19:24:00
  file_links:
  - target: ./im_re.f90
    text: im_re.f90
  ft_topic_id: data-types
  title: Fortran 2008 introduced z%re and z%im as alternatives to real(z) and aimag(z)
  tweet_created_at: '2022-01-04T00:24:05.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran 2008
    introduced z%re and z%im as alternatives to real(z) and aimag(z) to refer to the
    real and imaginary parts of a complex variable z, either scalar or array. The
    %re and %im syntax does not apply to expressions, so (2*z)%im is disallowed. <a
    href="https://t.co/GcspgfI4zB">pic.twitter.com/GcspgfI4zB</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478160269671124993?ref_src=twsrc%5Etfw">January
    4, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1478160269671124993'
  tweet_text: Fortran 2008 introduced z%re and z%im as alternatives to real(z) and
    aimag(z) to refer to the real and imaginary parts of a complex variable z, either
    scalar or array. The %re and %im syntax does not apply to expressions, so (2*z)%im
    is disallowed. https://t.co/GcspgfI4zB
- datetime: 2022-01-03 10:47:00
  file_links:
  - target: ./kindfind.f90
    text: kindfind.f90
  ft_topic_id: data-types
  title: KindFinder code finds all KIND Values implemented by a compiler
  tweet_created_at: '2022-01-03T15:47:43.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The KindFinder
    Fortran 90 code of Werner Schulz can also find<br>all KIND Values implemented
    by a compiler, list the properties of the associated numeric models, and generate
    a KIND parameter module.<a href="https://t.co/RY5uLdCMXl">pic.twitter.com/RY5uLdCMXl</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478030318485577728?ref_src=twsrc%5Etfw">January
    3, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1478030318485577728'
  tweet_text: 'The KindFinder Fortran 90 code of Werner Schulz can also find

    all KIND Values implemented by a compiler, list the properties of the associated
    numeric models, and generate a KIND parameter module.

    https://t.co/RY5uLdCMXl'
- datetime: 2022-01-03 07:51:00
  file_links:
  - target: ./iso_kinds.f90
    text: iso_kinds.f90
  ft_topic_id: data-types
  title: Real and integer KIND constants from iso_fortran_env; HUGE() and TINY()
  tweet_created_at: '2022-01-03T12:51:13.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Module iso_fortran_env
    has KIND constants int8, int16, int32, int64 for integers with those storage sizes
    and real32, real64, real128 for reals.<br>Use huge(x) and tiny(x) to get the largest
    and smallest numbers of type real x and huge(i) for integer i.<a href="https://t.co/1T3srjZIsX">pic.twitter.com/1T3srjZIsX</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477985901145993221?ref_src=twsrc%5Etfw">January
    3, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1477985901145993221'
  tweet_text: 'Module iso_fortran_env has KIND constants int8, int16, int32, int64
    for integers with those storage sizes and real32, real64, real128 for reals.

    Use huge(x) and tiny(x) to get the largest and smallest numbers of type real x
    and huge(i) for integer i.

    https://t.co/1T3srjZIsX'
- datetime: 2022-01-02 18:47:00
  file_links:
  - target: ./advance_no.f90
    text: advance_no.f90
  ft_topic_id: input-and-output
  title: Advance="no" specifier of WRITE
  tweet_created_at: '2022-01-02T23:47:03.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">WRITE inserts
    a newline at the end, which can be avoided with the<br>advance=&quot;no&quot;
    specifier. This is useful for prompting input and reading it from the same line
    and for printing an unknown amount of data with one format before another format.
    From zoziha.<a href="https://t.co/38h3L99q8Q">pic.twitter.com/38h3L99q8Q</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477788560359141382?ref_src=twsrc%5Etfw">January
    2, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1477788560359141382'
  tweet_text: 'WRITE inserts a newline at the end, which can be avoided with the

    advance="no" specifier. This is useful for prompting input and reading it from
    the same line and for printing an unknown amount of data with one format before
    another format. From zoziha.

    https://t.co/38h3L99q8Q'
- datetime: 2022-01-02 08:27:00
  file_links:
  - target: ./join.f90
    text: join.f90
  ft_topic_id: procedures
  title: Len of character variable function result can depend on arguments
  tweet_created_at: '2022-01-02T13:27:41.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The LEN of
    a character variable function RESULT can also depend on intrinsic functions of
    the arguments.  <a href="https://t.co/6vXoO79BAK">pic.twitter.com/6vXoO79BAK</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477632693617799169?ref_src=twsrc%5Etfw">January
    2, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1477632693617799169'
  tweet_text: The LEN of a character variable function RESULT can also depend on intrinsic
    functions of the arguments.  https://t.co/6vXoO79BAK
- datetime: 2022-01-02 06:42:00
  file_links:
  - target: ./array_func.f90
    text: array_func.f90
  ft_topic_id: procedures
  title: How size of an array function result can depend on function arguments
  tweet_created_at: '2022-01-02T11:42:43.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The SIZE
    of a function result can be an argument, depend on an intrinsic function of an
    argument such as SIZE, or have an arbitrary dependence if the result is allocatable.
    <a href="https://t.co/MKlJOXn4yZ">pic.twitter.com/MKlJOXn4yZ</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477606275643019269?ref_src=twsrc%5Etfw">January
    2, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1477606275643019269'
  tweet_text: The SIZE of a function result can be an argument, depend on an intrinsic
    function of an argument such as SIZE, or have an arbitrary dependence if the result
    is allocatable. https://t.co/MKlJOXn4yZ
- datetime: 2022-01-01 11:46:00
  file_links: []
  ft_topic_id: fortran-resources
  title: List of the syntax and purpose of Fortran intrinsics, with usage examples
  tweet_created_at: '2022-01-01T16:46:29.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Urbanjost
    created a list of the syntax and purpose of all(?) Fortran intrinsics, along with
    examples of their use. A monumental effort! He has many other projects on GitHub.
    <a href="https://t.co/xeAFTdkacJ">https://t.co/xeAFTdkacJ</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477320332751130625?ref_src=twsrc%5Etfw">January
    1, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1477320332751130625'
  tweet_text: Urbanjost created a list of the syntax and purpose of all(?) Fortran
    intrinsics, along with examples of their use. A monumental effort! He has many
    other projects on GitHub. https://t.co/xeAFTdkacJ
- datetime: 2022-01-01 09:00:00
  file_links:
  - target: ./lower_case.f90
    text: lower_case.f90
  ft_topic_id: character-variables
  title: Do case-insensitive string comparisons by converting to lower case
  tweet_created_at: '2022-01-01T14:00:52.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Character
    variables are case-sensitive, and to compare two strings ignoring case you can
    first convert them to lower case. <a href="https://t.co/D4tnPO8tLE">pic.twitter.com/D4tnPO8tLE</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477278656376590340?ref_src=twsrc%5Etfw">January
    1, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1477278656376590340'
  tweet_text: Character variables are case-sensitive, and to compare two strings ignoring
    case you can first convert them to lower case. https://t.co/D4tnPO8tLE
- datetime: 2022-01-01 09:16:00
  file_links: []
  ft_topic_id: fortran-resources
  title: Fortran-lang suggested variable naming conventions
  tweet_created_at: '2022-01-01T14:16:40.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran-lang
    Best Practices:<br>1. Use lower case for all Fortran constructs, such as do, end
    do, if, then<br>2. Follow short mathematical notation for mathematical variables/functions<br>3.
    For other names use all lower case<br><br>Details at<a href="https://t.co/WHTD1MAbFq">https://t.co/WHTD1MAbFq</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477282631553269764?ref_src=twsrc%5Etfw">January
    1, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1477282631553269764'
  tweet_text: 'Fortran-lang Best Practices:

    1. Use lower case for all Fortran constructs, such as do, end do, if, then

    2. Follow short mathematical notation for mathematical variables/functions

    3. For other names use all lower case


    Details at

    https://t.co/WHTD1MAbFq'
- datetime: 2022-01-01 10:49:00
  file_links:
  - target: ./case_insensitivity.f90
    text: case_insensitivity.f90
  ft_topic_id: basics
  title: Case insensitivity
  tweet_created_at: '2022-01-01T10:49:47.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran used
    to be written entirely in UPPERCASE, but is now case insensitive. However, whilst
    the following example is completely valid, to ensure legibility it&#39;s highly
    recommended to choose a case convention and stick to it! <a href="https://t.co/AMXjjEVsOE">pic.twitter.com/AMXjjEVsOE</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477230568781795334?ref_src=twsrc%5Etfw">January
    1, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1477230568781795334'
  tweet_text: Fortran used to be written entirely in UPPERCASE, but is now case insensitive.
    However, whilst the following example is completely valid, to ensure legibility
    it's highly recommended to choose a case convention and stick to it! https://t.co/AMXjjEVsOE
- datetime: 2021-12-30 20:20:00
  file_links:
  - target: ./subroutine_dt.f90
    text: subroutine_dt.f90
  ft_topic_id: procedures
  title: Returning multiple values from a subroutine or function
  tweet_created_at: '2021-12-31T01:20:34.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran cannot
    return multiple values with syntax like<br><br>c, d = f(x)<br><br>You can use
    a subroutine<br><br>call f(x,c,d)<br><br>or a function that returns a derived
    type containing c and d or a function that returns a size-2 array if c and d have
    the same type. <a href="https://t.co/vYr5h8FsMw">pic.twitter.com/vYr5h8FsMw</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1476724929299197962?ref_src=twsrc%5Etfw">December
    31, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1476724929299197962'
  tweet_text: 'Fortran cannot return multiple values with syntax like


    c, d = f(x)


    You can use a subroutine


    call f(x,c,d)


    or a function that returns a derived type containing c and d or a function that
    returns a size-2 array if c and d have the same type. https://t.co/vYr5h8FsMw'
- datetime: 2021-12-30 07:13:00
  file_links: []
  ft_topic_id: math-intrinsic-functions
  title: MODULO vs. MOD function
  tweet_created_at: '2021-12-30T13:13:25.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran has
    similar MODULO and MOD functions.<br>MODULO (MOD) takes the sign of the 2nd (1st)
    argument.<br><br>print*,modulo([-1,0,1],2)  !   1 0  1<br>print*,mod([-1,0,1],2)        !
    -1 0  1<br>print*,modulo([-1,0,1],-2) ! -1 0 -1<br>print*,mod([-1,0,1],-2)      !
    -1 0   1<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1476541936681066501?ref_src=twsrc%5Etfw">December
    30, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1476541936681066501'
  tweet_text: 'Fortran has similar MODULO and MOD functions.

    MODULO (MOD) takes the sign of the 2nd (1st) argument.


    print*,modulo([-1,0,1],2)  !   1 0  1

    print*,mod([-1,0,1],2)        ! -1 0  1

    print*,modulo([-1,0,1],-2) ! -1 0 -1

    print*,mod([-1,0,1],-2)      ! -1 0   1

    end'
- datetime: 2021-12-29 13:59:00
  file_links: []
  ft_topic_id: fortran-resources
  title: Compiler Support for the Fortran 2008 and 2018 Standards
  tweet_created_at: '2021-12-29T19:59:06.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">There is
    a paper &quot;Compiler Support for the Fortran 2008 and 2018 Standards&quot; April
    2020 by Chivers &amp; Sleightholme covering Absoft Arm Cray Fujitsu gfortran IBM
    Intel Nag NEC Oracle PGI <a href="https://t.co/dPp0cZaLBs">https://t.co/dPp0cZaLBs</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1476281645011505162?ref_src=twsrc%5Etfw">December
    29, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1476281645011505162'
  tweet_text: '@jeff_replies @axccl @OndrejCertik There is a paper "Compiler Support
    for the Fortran 2008 and 2018 Standards" April 2020 by Chivers &amp; Sleightholme
    covering Absoft Arm Cray Fujitsu gfortran IBM Intel Nag NEC Oracle PGI https://t.co/dPp0cZaLBs'
- datetime: 2021-12-29 12:16:00
  file_links: []
  ft_topic_id: arrays
  title: Many compilers evaluate ALL(x==y) efficiently with short-circuiting
  tweet_created_at: '2021-12-29T18:16:59.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">For a code
    that evaluates ALL(x==y) with a short-circuiting function and the intrinsic, gfortran,
    ifort, and nvfortran seem to short-circuit the intrinsic, so it may be OK to use
    ALL for large expressions.<a href="https://t.co/n99MPh7rKt">https://t.co/n99MPh7rKt</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1476255945923641347?ref_src=twsrc%5Etfw">December
    29, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1476255945923641347'
  tweet_text: 'For a code that evaluates ALL(x==y) with a short-circuiting function
    and the intrinsic, gfortran, ifort, and nvfortran seem to short-circuit the intrinsic,
    so it may be OK to use ALL for large expressions.

    https://t.co/n99MPh7rKt'
- datetime: 2021-12-29 08:41:00
  file_links:
  - target: ./deferred_character.f90
    text: deferred_character.f90
  ft_topic_id: character-variables
  title: LEN of a character variable may be deferred in Fortran 2003 on
  tweet_created_at: '2021-12-29T14:41:13.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The LEN of
    a character variable may be deferred in F2003 on.<br><br>character (len=:), allocatable
    :: s,t(:)<br><br>declares a scalar and an array of such variables. The LEN is
    taken from the RHS of an assignment but not from a READ. Elements of t(:) have
    same LEN.<br> <a href="https://t.co/wP6lXJ3XL2">pic.twitter.com/wP6lXJ3XL2</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1476201645885337611?ref_src=twsrc%5Etfw">December
    29, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1476201645885337611'
  tweet_text: "The LEN of a character variable may be deferred in F2003 on.\n\ncharacter\
    \ (len=:), allocatable :: s,t(:)\n\ndeclares a scalar and an array of such variables.\
    \ The LEN is taken from the RHS of an assignment but not from a READ. Elements\
    \ of t(:) have same LEN.\n https://t.co/wP6lXJ3XL2"
- datetime: 2021-12-29 05:18:00
  file_links: []
  ft_topic_id: fortran-resources
  title: To learn about Fortran beyond F95, read the New Features articles of John
    Reid
  tweet_created_at: '2021-12-29T11:18:23.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">To learn
    about Fortran beyond F95, read the 3 articles of John Reid, convenor (chairman)
    of the standards committee 1999-2017 on the New Features of Fortran 2018, 2008,
    and 2003 <a href="https://t.co/y7bBC94ZdB">https://t.co/y7bBC94ZdB</a><a href="https://t.co/NrcHEeED8r">https://t.co/NrcHEeED8r</a><a
    href="https://t.co/tPtqc8BU3J">https://t.co/tPtqc8BU3J</a><br>and his co-authored
    book.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1476150602866511873?ref_src=twsrc%5Etfw">December
    29, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1476150602866511873'
  tweet_text: 'To learn about Fortran beyond F95, read the 3 articles of John Reid,
    convenor (chairman) of the standards committee 1999-2017 on the New Features of
    Fortran 2018, 2008, and 2003 https://t.co/y7bBC94ZdB

    https://t.co/NrcHEeED8r

    https://t.co/tPtqc8BU3J

    and his co-authored book.'
- datetime: 2021-12-28 13:04:00
  file_links: []
  ft_topic_id: data-types
  title: Use .true. and .false. for Booleans, not 1 and 0
  tweet_created_at: '2021-12-28T19:04:47.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use .true.
    and .false. for Booleans and use the expression <br><br>merge(1,0,logical_variable)<br><br>if
    needed. Fortran standards have never specified an equivalence between integers
    and Booleans. <a href="https://t.co/V1ZfGdxAWT">https://t.co/V1ZfGdxAWT</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475905587774959616?ref_src=twsrc%5Etfw">December
    28, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1475905587774959616'
  tweet_text: "Use .true. and .false. for Booleans and use the expression \n\nmerge(1,0,logical_variable)\n\
    \nif needed. Fortran standards have never specified an equivalence between integers\
    \ and Booleans. https://t.co/V1ZfGdxAWT"
- datetime: 2021-12-28 08:47:00
  file_links: []
  ft_topic_id: conditionals
  title: Standards committee has approved conditional expressions
  tweet_created_at: '2021-12-28T14:47:54.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The standards
    committee has approved conditional expressions, with <br><br>y = ( i&gt;=1 .And.
    i&lt;=Size(a) ? a(i) : -Huge(y) )<br><br>equivalent to<br><br>if (i&gt;=1 .And.
    i&lt;=Size(a)) then<br>   y = a(i)<br>else<br>   y = -Huge(y)<br>end if<a href="https://t.co/NKcB9wR2kU">https://t.co/NKcB9wR2kU</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475840940791279616?ref_src=twsrc%5Etfw">December
    28, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1475840940791279616'
  tweet_text: "@arclight The standards committee has approved conditional expressions,\
    \ with \n\ny = ( i&gt;=1 .And. i&lt;=Size(a) ? a(i) : -Huge(y) )\n\nequivalent\
    \ to\n\nif (i&gt;=1 .And. i&lt;=Size(a)) then\n   y = a(i)\nelse\n   y = -Huge(y)\n\
    end if\n\nhttps://t.co/NKcB9wR2kU"
- datetime: 2021-12-28 08:02:00
  file_links: []
  ft_topic_id: conditionals
  title: ANY and ALL may not be the most efficient methods to compare arrays.
  tweet_created_at: '2021-12-28T14:02:13.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">ANY and ALL
    may not be the most efficient methods to compare arrays. They<br>may generate
    a logical array the size of the input arrays or always test all elements, depending
    on how they are<br>implemented. More from urbanjost:<a href="https://t.co/8I5ed7nnDT">pic.twitter.com/8I5ed7nnDT</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475829444543717378?ref_src=twsrc%5Etfw">December
    28, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1475829444543717378'
  tweet_text: 'ANY and ALL may not be the most efficient methods to compare arrays.
    They

    may generate a logical array the size of the input arrays or always test all elements,
    depending on how they are

    implemented. More from urbanjost:

    https://t.co/8I5ed7nnDT'
- datetime: 2021-12-28 07:51:00
  file_links:
  - target: ./compare_floats.f90
    text: compare_floats.f90
  ft_topic_id: basics
  title: Consider using a tolerance to compare floats
  tweet_created_at: '2021-12-28T13:51:07.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If the arrays
    are INTEGER or CHARACTER, then the comparison can be exact. For REAL or COMPLEX
    arrays, you should consider using a suitably small tolerance when comparing values.
    This and the previous tip are from urbanjost. <a href="https://t.co/qjaMf5T06W">pic.twitter.com/qjaMf5T06W</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475826650835214338?ref_src=twsrc%5Etfw">December
    28, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1475826650835214338'
  tweet_text: If the arrays are INTEGER or CHARACTER, then the comparison can be exact.
    For REAL or COMPLEX arrays, you should consider using a suitably small tolerance
    when comparing values. This and the previous tip are from urbanjost. https://t.co/qjaMf5T06W
- datetime: 2021-12-28 07:33:00
  file_links:
  - target: ./all_any.f90
    text: all_any.f90
  ft_topic_id: arrays
  title: Use ALL(A==B) to test for array equality
  tweet_created_at: '2021-12-28T13:33:04.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If size(A)==size(B),
    use ALL(A==B) to test for equality of arrays A and B and ANY(A==B) to test for
    equality of any corresponding elements. <a href="https://t.co/sx1gxm5XIh">pic.twitter.com/sx1gxm5XIh</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475822105358913540?ref_src=twsrc%5Etfw">December
    28, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1475822105358913540'
  tweet_text: If size(A)==size(B), use ALL(A==B) to test for equality of arrays A
    and B and ANY(A==B) to test for equality of any corresponding elements. https://t.co/sx1gxm5XIh
- datetime: 2021-12-27 09:52:00
  file_links: []
  ft_topic_id: fortran-resources
  title: Intel Fortran Compiler (ifx)
  tweet_created_at: '2021-12-27T15:52:37.000Z'
  tweet_embed: "<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">The\
    \ Intel\xAE Fortran Compiler (ifx), available in the oneAPI HPC Toolkit 2022.1,\
    \ is production-ready for CPUs and GPUs. ifx is based on the Intel\xAE Fortran\
    \ Compiler Classic (ifort) frontend and runtime libraries, but uses LLVM backend\
    \ compiler technology.  <a href=\"https://t.co/YC72lJcOVC\">https://t.co/YC72lJcOVC</a></p>&mdash;\
    \ FortranTip (@fortrantip) <a href=\"https://twitter.com/fortrantip/status/1475494838074318852?ref_src=twsrc%5Etfw\"\
    >December 27, 2021</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\"\
    \ charset=\"utf-8\"></script>"
  tweet_id: '1475494838074318852'
  tweet_text: "The Intel\xAE Fortran Compiler (ifx), available in the oneAPI HPC Toolkit\
    \ 2022.1, is production-ready for CPUs and GPUs. ifx is based on the Intel\xAE\
    \ Fortran Compiler Classic (ifort) frontend and runtime libraries, but uses LLVM\
    \ backend compiler technology.  https://t.co/YC72lJcOVC"
- datetime: 2021-12-27 07:07:00
  file_links:
  - target: ./doubled_delim.f90
    text: doubled_delim.f90
  ft_topic_id: character-variables
  title: Doubled delimiter in a string is regarded as a single character of the constant
  tweet_created_at: '2021-12-27T13:07:38.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A doubled
    delimiter in a string without any embedded intervening blanks is regarded as a
    single character of the constant. One can also put a single quote in double quotes
    or a double quote in single quotes. Thanks to Amir Shahmoradi for tip.<br> <a
    href="https://t.co/JSneWjHZgo">pic.twitter.com/JSneWjHZgo</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475453317526528003?ref_src=twsrc%5Etfw">December
    27, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1475453317526528003'
  tweet_text: "A doubled delimiter in a string without any embedded intervening blanks\
    \ is regarded as a single character of the constant. One can also put a single\
    \ quote in double quotes or a double quote in single quotes. Thanks to Amir Shahmoradi\
    \ for tip.\n https://t.co/JSneWjHZgo"
- datetime: 2021-12-26 09:55:00
  file_links:
  - target: ./derived_type_array.f90
    text: derived_type_array.f90
  ft_topic_id: derived-types
  title: Store data as an array of derived types or a derived type with array components?
  tweet_created_at: '2021-12-26T15:55:31.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Whether to
    store data as an array of derived types or a derived type with array components
    also depends on how the data will typically be accessed.<a href="https://t.co/UUqiYkaLO7">pic.twitter.com/UUqiYkaLO7</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475133178763427848?ref_src=twsrc%5Etfw">December
    26, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1475133178763427848'
  tweet_text: 'Whether to store data as an array of derived types or a derived type
    with array components also depends on how the data will typically be accessed.

    https://t.co/UUqiYkaLO7'
- datetime: 2021-12-26 04:22:00
  file_links:
  - target: ./column_major.f90
    text: column_major.f90
  ft_topic_id: arrays
  title: Fortran is column-major
  tweet_created_at: '2021-12-26T10:22:26.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The order
    you loop through multidimensional arrays can have a big impact on speed. Fortran
    is column-major, meaning consecutive elements of a column are stored next to each
    other in memory, and you should loop through arrays in this order. <a href="https://t.co/oEtrOaMbzC">pic.twitter.com/oEtrOaMbzC</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475049356155883524?ref_src=twsrc%5Etfw">December
    26, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1475049356155883524'
  tweet_text: The order you loop through multidimensional arrays can have a big impact
    on speed. Fortran is column-major, meaning consecutive elements of a column are
    stored next to each other in memory, and you should loop through arrays in this
    order. https://t.co/oEtrOaMbzC
- datetime: 2021-12-24 18:30:00
  file_links:
  - target: ./cmplx.f90
    text: cmplx.f90
  ft_topic_id: data-types
  title: CMPLX should be used with a KIND argument
  tweet_created_at: '2021-12-25T00:30:25.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">CMPLX(X,Y,[KIND])
    returns a single precision complex variable, even if X and Y are double precision,
    unless a KIND is specified. <br><br>Merry Christmas and Happy Holidays! Posts
    may be sparse until the new year. <a href="https://t.co/MD9tCw4pTB">pic.twitter.com/MD9tCw4pTB</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1474537984066301959?ref_src=twsrc%5Etfw">December
    25, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1474537984066301959'
  tweet_text: "CMPLX(X,Y,[KIND]) returns a single precision complex variable, even\
    \ if X and Y are double precision, unless a KIND is specified. \n\nMerry Christmas\
    \ and Happy Holidays! Posts may be sparse until the new year. \nhttps://t.co/MD9tCw4pTB"
- datetime: 2021-12-24 09:00:00
  file_links:
  - target: ./reshape_array.f90
    text: reshape_array.f90
  ft_topic_id: arrays
  title: RESHAPE with the optional ORDER and PAD arguments
  tweet_created_at: '2021-12-24T15:00:41.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">RESHAPE returns
    an array with a different shape than the SOURCE array. Optional ORDER argument
    changes the order of elements of SOURCE from the usual column major. Optional
    PAD argument fills the result, with recycling, after source is exhausted. <a href="https://t.co/Xb3RCZ6LcW">pic.twitter.com/Xb3RCZ6LcW</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1474394605890244614?ref_src=twsrc%5Etfw">December
    24, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1474394605890244614'
  tweet_text: RESHAPE returns an array with a different shape than the SOURCE array.
    Optional ORDER argument changes the order of elements of SOURCE from the usual
    column major. Optional PAD argument fills the result, with recycling, after source
    is exhausted. https://t.co/Xb3RCZ6LcW
- datetime: 2021-12-24 06:35:00
  file_links:
  - target: ./factorial.f90
    text: factorial.f90
  ft_topic_id: math-intrinsic-functions
  title: Use GAMMA to compute factorials
  tweet_created_at: '2021-12-24T12:35:00.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Why does
    Fortran not have a factorial function? It does, as for positive whole values of
    X the Gamma function simplifies to the factorial function for (X-1).<br>That is,<br><br>x!
    == gamma(x+1)<br><br>Thanks to urbanjost for tip! <a href="https://t.co/fTAPvhKEpr">pic.twitter.com/fTAPvhKEpr</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1474357943667671060?ref_src=twsrc%5Etfw">December
    24, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1474357943667671060'
  tweet_text: "Why does Fortran not have a factorial function? It does, as for positive\
    \ whole values of X the Gamma function simplifies to the factorial function for\
    \ (X-1).\nThat is,\n\nx! == gamma(x+1)\n\nThanks to urbanjost for tip! \nhttps://t.co/fTAPvhKEpr"
- datetime: 2021-12-23 18:04:00
  file_links:
  - target: ./date.f90
    text: date.f90
  ft_topic_id: derived-types
  title: Derived type definition, initialization, and operator overloading
  tweet_created_at: '2021-12-24T00:04:30.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">How to define
    a derived type, initialize it, access its components, convert it to a string,
    and define operators for it. <a href="https://t.co/jcai3Usy25">pic.twitter.com/jcai3Usy25</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1474169072665440259?ref_src=twsrc%5Etfw">December
    24, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1474169072665440259'
  tweet_text: How to define a derived type, initialize it, access its components,
    convert it to a string, and define operators for it. https://t.co/jcai3Usy25
- datetime: 2021-12-23 13:52:00
  file_links: []
  ft_topic_id: input-and-output
  title: List-directed vs. explicitly formatted output
  tweet_created_at: '2021-12-23T19:52:23.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">List-directed
    output (format *) is convenient, but don&#39;t use it when you care about layout
    as you&#39;ll lose control over spacing, line breaks and number of significant
    digits. If you care, use explicit formats instead.</p>&mdash; FortranTip (@fortrantip)
    <a href="https://twitter.com/fortrantip/status/1474105626611662857?ref_src=twsrc%5Etfw">December
    23, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1474105626611662857'
  tweet_text: List-directed output (format *) is convenient, but don't use it when
    you care about layout as you'll lose control over spacing, line breaks and number
    of significant digits. If you care, use explicit formats instead.
- datetime: 2021-12-23 04:08:00
  file_links: []
  ft_topic_id: arrays
  title: Fortran equivalents of NumPy
  tweet_created_at: '2021-12-23T10:08:41.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Used to NumPy?
    Lots of the Fortran intrinsics to deal with arrays will already be familiar to
    you. <a href="https://t.co/GnKnbscsDX">pic.twitter.com/GnKnbscsDX</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473958733571104773?ref_src=twsrc%5Etfw">December
    23, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1473958733571104773'
  tweet_text: Used to NumPy? Lots of the Fortran intrinsics to deal with arrays will
    already be familiar to you. https://t.co/GnKnbscsDX
- datetime: 2021-12-22 20:51:00
  file_links:
  - target: ./zero_size.f90
    text: zero_size.f90
  ft_topic_id: arrays
  title: Zero-size array constructor such as [real ::]
  tweet_created_at: '2021-12-23T02:51:21.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">[data_type
    :: ] is a zero-size array of type data_type.<a href="https://t.co/XmBx5W4ZBG">pic.twitter.com/XmBx5W4ZBG</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473848675566858242?ref_src=twsrc%5Etfw">December
    23, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1473848675566858242'
  tweet_text: '[data_type :: ] is a zero-size array of type data_type.

    https://t.co/XmBx5W4ZBG'
- datetime: 2021-12-22 09:44:00
  file_links: []
  ft_topic_id: input-and-output
  title: Use G0.d and colon edit descriptors with infinite repeat count to write delimited
    (CSV, etc.) output
  tweet_created_at: '2021-12-22T15:44:11.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Combine the
    G0.d and colon edit descriptors, along with infinite repeat count, to write delimited
    (CSV, etc.) output. <a href="https://t.co/QfMmdEj7Fn">pic.twitter.com/QfMmdEj7Fn</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473680777279852553?ref_src=twsrc%5Etfw">December
    22, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1473680777279852553'
  tweet_text: Combine the G0.d and colon edit descriptors, along with infinite repeat
    count, to write delimited (CSV, etc.) output. https://t.co/QfMmdEj7Fn
- datetime: 2021-12-22 06:48:00
  file_links:
  - target: ./automatic.f90
    text: automatic.f90
  ft_topic_id: allocation
  title: If allocation errors must be handled, use ALLOCATABLE rather than automatic
    arrays in procedures
  tweet_created_at: '2021-12-22T12:48:07.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If allocation
    errors must be handled, use ALLOCATABLE rather than automatic arrays in procedures,
    and check the STAT of ALLOCATE. <a href="https://t.co/EV4jE4pfdx">pic.twitter.com/EV4jE4pfdx</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473636468405030913?ref_src=twsrc%5Etfw">December
    22, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1473636468405030913'
  tweet_text: If allocation errors must be handled, use ALLOCATABLE rather than automatic
    arrays in procedures, and check the STAT of ALLOCATE. https://t.co/EV4jE4pfdx
- datetime: 2021-12-21 11:13:00
  file_links: []
  ft_topic_id: modules
  title: Name modules and the source files containing them consistently, with one
    module per file.
  tweet_created_at: '2021-12-21T17:13:00.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Name modules
    and the source files containing them consistently, with one module per file. The
    convention I use is that a module named  m_mod is defined in a source file m.f90.
    That way if I see <br><br>use m_mod, only: foo<br><br>in my code I know to look
    in m.f90 for the definition of foo.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473340740055015431?ref_src=twsrc%5Etfw">December
    21, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1473340740055015431'
  tweet_text: "Name modules and the source files containing them consistently, with\
    \ one module per file. The convention I use is that a module named  m_mod is defined\
    \ in a source file m.f90. That way if I see \n\nuse m_mod, only: foo\n\nin my\
    \ code I know to look in m.f90 for the definition of foo."
- datetime: 2021-12-21 05:59:00
  file_links:
  - target: ./stream_io.f90
    text: stream_io.f90
  ft_topic_id: input-and-output
  title: Use unformatted stream of Fortran 2003 for large-scale I/O.
  tweet_created_at: '2021-12-21T11:59:56.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use unformatted
    stream of Fortran 2003 for large-scale I/O. <a href="https://t.co/I2PHa3YiaA">pic.twitter.com/I2PHa3YiaA</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473261954244435973?ref_src=twsrc%5Etfw">December
    21, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1473261954244435973'
  tweet_text: Use unformatted stream of Fortran 2003 for large-scale I/O. https://t.co/I2PHa3YiaA
- datetime: 2021-12-20 12:38:00
  file_links:
  - target: ./read_write_file.f90
    text: read_write_file.f90
  ft_topic_id: input-and-output
  title: Using READ and WRITE for file i/o
  tweet_created_at: '2021-12-20T18:38:36.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Using READ
    and WRITE for file i/o. <a href="https://t.co/Be3gH8SLnL">pic.twitter.com/Be3gH8SLnL</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472999893631447043?ref_src=twsrc%5Etfw">December
    20, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472999893631447043'
  tweet_text: Using READ and WRITE for file i/o. https://t.co/Be3gH8SLnL
- datetime: 2021-12-20 08:47:00
  file_links:
  - target: ./read_sum.f90
    text: read_sum.f90
  ft_topic_id: input-and-output
  title: Reading user input
  tweet_created_at: '2021-12-20T14:47:57.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/pzKMXlNriJ">pic.twitter.com/pzKMXlNriJ</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472941850218700805?ref_src=twsrc%5Etfw">December
    20, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472941850218700805'
  tweet_text: Created with @carbon_app https://t.co/pzKMXlNriJ
- datetime: 2021-12-20 08:02:00
  file_links:
  - target: ./select_case.f90
    text: select_case.f90
  ft_topic_id: conditionals
  title: SELECT CASE for conditional execution
  tweet_created_at: '2021-12-20T14:02:38.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/5R6yeSnvpY">pic.twitter.com/5R6yeSnvpY</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472930444572336128?ref_src=twsrc%5Etfw">December
    20, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472930444572336128'
  tweet_text: Created with @carbon_app https://t.co/5R6yeSnvpY
- datetime: 2021-12-19 21:32:00
  file_links:
  - target: ./kind.f90
    text: kind.f90
  ft_topic_id: data-types
  title: Declare floating point variables with KINDs
  tweet_created_at: '2021-12-20T03:32:24.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/Pxu7PbR5b6">pic.twitter.com/Pxu7PbR5b6</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472771842242920451?ref_src=twsrc%5Etfw">December
    20, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472771842242920451'
  tweet_text: Created with @carbon_app https://t.co/Pxu7PbR5b6
- datetime: 2021-12-19 21:35:00
  file_links: []
  ft_topic_id: data-types
  title: Replace non-standard REAL\*8 declaration with REAL(KIND=REAL64)
  tweet_created_at: '2021-12-20T03:35:19.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In older
    code, declarations such as<br><br>real*8 x<br><br>are common but non-standard.
    They should be replaced by<br><br>real(kind=real64) :: x<br><br>or <br><br>real(kind=wp)
    :: x<br><br>with wp set appropriately.</p>&mdash; FortranTip (@fortrantip) <a
    href="https://twitter.com/fortrantip/status/1472772577600942083?ref_src=twsrc%5Etfw">December
    20, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472772577600942083'
  tweet_text: "In older code, declarations such as\n\nreal*8 x\n\nare common but non-standard.\
    \ They should be replaced by\n\nreal(kind=real64) :: x\n\nor \n\nreal(kind=wp)\
    \ :: x\n\nwith wp set appropriately."
- datetime: 2021-12-19 18:00:00
  file_links:
  - target: ./module_parameter.f90
    text: module_parameter.f90
  ft_topic_id: modules
  title: Use PARAMETERs in modules to define physical and mathematical constants
  tweet_created_at: '2021-12-20T00:00:11.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/vWJuAwle97">pic.twitter.com/vWJuAwle97</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472718436040073226?ref_src=twsrc%5Etfw">December
    20, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472718436040073226'
  tweet_text: Created with @carbon_app https://t.co/vWJuAwle97
- datetime: 2021-12-19 16:56:00
  file_links: []
  ft_topic_id: procedures
  title: Procedures can be RECURSIVE
  tweet_created_at: '2021-12-19T22:56:34.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/czICWzekYU">pic.twitter.com/czICWzekYU</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472702427740745728?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472702427740745728'
  tweet_text: Created with @carbon_app https://t.co/czICWzekYU
- datetime: 2021-12-19 16:39:00
  file_links: []
  ft_topic_id: procedures
  title: Specify function and subroutine argument INTENTs
  tweet_created_at: '2021-12-19T22:39:54.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Function
    and subroutine argument INTENTs were introduced in the Fortran 90 standard. Much
    Fortran code does not specify intents, which is legal, but all new code should.
    Arguments should be intent(in) or intent(out) unless intent(in out) is necessary.</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472698233298333699?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472698233298333699'
  tweet_text: Function and subroutine argument INTENTs were introduced in the Fortran
    90 standard. Much Fortran code does not specify intents, which is legal, but all
    new code should. Arguments should be intent(in) or intent(out) unless intent(in
    out) is necessary.
- datetime: 2021-12-19 16:34:00
  file_links:
  - target: ./intent_in_out.f90
    text: intent_in_out.f90
  ft_topic_id: procedures
  title: Subroutines can have INTENT(IN OUT) arguments, but functions should not
  tweet_created_at: '2021-12-19T22:34:39.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/3FjJkJUHSn">pic.twitter.com/3FjJkJUHSn</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472696912541364224?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472696912541364224'
  tweet_text: Created with @carbon_app https://t.co/3FjJkJUHSn
- datetime: 2021-12-19 16:16:00
  file_links:
  - target: ./subroutine.f90
    text: subroutine.f90
  ft_topic_id: procedures
  title: Define and call a subroutine
  tweet_created_at: '2021-12-19T22:16:21.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/Wi7Imqi5vW">pic.twitter.com/Wi7Imqi5vW</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472692305522044932?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472692305522044932'
  tweet_text: Created with @carbon_app https://t.co/Wi7Imqi5vW
- datetime: 2021-12-19 15:44:00
  file_links:
  - target: ./optional.f90
    text: optional.f90
  ft_topic_id: procedures
  title: Demonstrate optional arguments and RANDOM_NUMBER
  tweet_created_at: '2021-12-19T21:44:07.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/ZNqwgg3Wgq">pic.twitter.com/ZNqwgg3Wgq</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472684194765672450?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472684194765672450'
  tweet_text: Created with @carbon_app https://t.co/ZNqwgg3Wgq
- datetime: 2021-12-19 12:05:00
  file_links:
  - target: ./interface.f90
    text: interface.f90
  ft_topic_id: modules
  title: Function overloading using an interface with module procedures
  tweet_created_at: '2021-12-19T18:05:10.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/qsfPFLVUkl">pic.twitter.com/qsfPFLVUkl</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472629090758836229?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472629090758836229'
  tweet_text: Created with @carbon_app https://t.co/qsfPFLVUkl
- datetime: 2021-12-19 11:04:00
  file_links: []
  ft_topic_id: modules
  title: USE, ONLY to avoid polluting the namespace
  tweet_created_at: '2021-12-19T17:04:53.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In Fortran,
    <br><br>use m<br><br>is equivalent to Python<br><br>from m import *<br><br>It
    is better to write <br><br>use m, only: foo, bar<br><br>to avoid polluting the
    namespace and to clarify the origin of imported entities.</p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472613921886552065?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472613921886552065'
  tweet_text: "In Fortran, \n\nuse m\n\nis equivalent to Python\n\nfrom m import *\n\
    \nIt is better to write \n\nuse m, only: foo, bar\n\nto avoid polluting the namespace\
    \ and to clarify the origin of imported entities."
- datetime: 2021-12-19 10:50:00
  file_links:
  - target: ./module.f90
    text: module.f90
  ft_topic_id: procedures
  title: Put functions and subroutines in modules to ensure that interfaces are checked.
  tweet_created_at: '2021-12-19T16:50:54.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran procedures
    should be defined in modules to<br>ensure that interfaces are checked.<br><br>module
    m<br>contains<br>integer function area(length,width)<br>integer, intent(in) ::
    length,width<br>area = length*width<br>end<br>end module m<br>program main<br>use
    m<br>print*,area(3,4) ! 12<br>end program main</p>&mdash; FortranTip (@fortrantip)
    <a href="https://twitter.com/fortrantip/status/1472610403884670976?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472610403884670976'
  tweet_text: 'Fortran procedures should be defined in modules to

    ensure that interfaces are checked.


    module m

    contains

    integer function area(length,width)

    integer, intent(in) :: length,width

    area = length*width

    end

    end module m

    program main

    use m

    print*,area(3,4) ! 12

    end program main'
- datetime: 2021-12-19 10:37:00
  file_links:
  - target: ./elemental.f90
    text: elemental.f90
  ft_topic_id: procedures
  title: ELEMENTAL functions broadcast arguments
  tweet_created_at: '2021-12-19T16:37:02.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Elemental
    functions broadcast arguments. Neat Fortran feature!<br><br>print*,area(3,4) !
    12<br>print*,area(3,[4,5]) ! 12 15<br>print*,area([3,4],[4,5]) ! 12 20<br>contains<br>integer
    elemental function area(length,width)<br>integer, intent(in) :: length,width<br>area
    = length*width<br>end function area<br>end</p>&mdash; FortranTip (@fortrantip)
    <a href="https://twitter.com/fortrantip/status/1472606914857078793?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472606914857078793'
  tweet_text: 'Elemental functions broadcast arguments. Neat Fortran feature!


    print*,area(3,4) ! 12

    print*,area(3,[4,5]) ! 12 15

    print*,area([3,4],[4,5]) ! 12 20

    contains

    integer elemental function area(length,width)

    integer, intent(in) :: length,width

    area = length*width

    end function area

    end'
- datetime: 2021-12-19 10:25:00
  file_links:
  - target: ./func.f90
    text: func.f90
  ft_topic_id: procedures
  title: Functions should be PURE and have INTENT(IN) arguments
  tweet_created_at: '2021-12-19T16:25:02.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Demo of a
    Fortran function. Intent(in) arguments<br>cannot be changed. Function arguments
    should be intent(in). Pure = no side-effects.<br><br>print*,area(3.,4.) ! 12<br>contains<br>real
    pure function area(length,width)<br>real, intent(in) :: length,width<br>area =
    length*width<br>end function area<br>end</p>&mdash; FortranTip (@fortrantip) <a
    href="https://twitter.com/fortrantip/status/1472603894886932482?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472603894886932482'
  tweet_text: 'Demo of a Fortran function. Intent(in) arguments

    cannot be changed. Function arguments should be intent(in). Pure = no side-effects.


    print*,area(3.,4.) ! 12

    contains

    real pure function area(length,width)

    real, intent(in) :: length,width

    area = length*width

    end function area

    end'
- datetime: 2021-12-19 10:13:00
  file_links:
  - target: ./count_pack.f90
    text: count_pack.f90
  ft_topic_id: arrays
  title: PACK selects elements
  tweet_created_at: '2021-12-19T16:13:01.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Pack selects
    elements<br><br>integer :: v(3) = [1,-4,9]<br>print*,pack(v,v&gt;0) ! 1 9 -- keep
    values &gt; 0<br>print*,count(v&gt;0)  ! 2   -- count values &gt; 0<br>print*,size(v)     !
    3<br>print*,sum(v)      ! 6<br>print*,sum(v,v&gt;0)  ! 10  -- sum has optional
    mask<br>print*,sum(pack(v,v&gt;0)) ! 10<br>end</p>&mdash; FortranTip (@fortrantip)
    <a href="https://twitter.com/fortrantip/status/1472600871192125451?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472600871192125451'
  tweet_text: 'Pack selects elements


    integer :: v(3) = [1,-4,9]

    print*,pack(v,v&gt;0) ! 1 9 -- keep values &gt; 0

    print*,count(v&gt;0)  ! 2   -- count values &gt; 0

    print*,size(v)     ! 3

    print*,sum(v)      ! 6

    print*,sum(v,v&gt;0)  ! 10  -- sum has optional mask

    print*,sum(pack(v,v&gt;0)) ! 10

    end'
- datetime: 2021-12-19 10:04:00
  file_links:
  - target: ./do_loop_index.f90
    text: do_loop_index.f90
  ft_topic_id: loops
  title: Loop variable equals the upper bound plus the stride after normal completion
    of a loop
  tweet_created_at: '2021-12-19T16:04:23.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The loop
    variable equals the upper bound plus the stride<br>after normal completion of
    a loop<br><br>integer :: i<br>do i=1,3<br>  if (i &gt; 1) exit<br>end do<br>print*,i
    ! 2<br>do i=1,3 ! stride of 1<br>  continue ! placeholder<br>end do<br>print*,i
    ! 4<br>do i=1,3,2 ! stride of 2<br>  continue<br>end do<br>print*,i ! 5<br>end</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472598697489965061?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472598697489965061'
  tweet_text: "The loop variable equals the upper bound plus the stride\nafter normal\
    \ completion of a loop\n\ninteger :: i\ndo i=1,3\n  if (i &gt; 1) exit\nend do\n\
    print*,i ! 2\ndo i=1,3 ! stride of 1\n  continue ! placeholder\nend do\nprint*,i\
    \ ! 4\ndo i=1,3,2 ! stride of 2\n  continue\nend do\nprint*,i ! 5\nend"
- datetime: 2021-12-19 07:52:00
  file_links:
  - target: ./assoc.f90
    text: assoc.f90
  ft_topic_id: associate
  title: Associate creates an alias for expressions or variables.
  tweet_created_at: '2021-12-19T13:52:31.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Associate
    creates an alias for expressions or variables.<br><br>integer, allocatable ::
    u(:)<br>u = [4,9]<br>associate (v =&gt; u)<br>v = v - 2<br>print*,v ! 2 7<br>print*,u
    ! 2 7<br>associate (w =&gt; [4,9])<br>print*,w<br>w = w - 2 ! illegal since w
    set to a constant expression<br>end associate<br>end associate<br>end</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472565511628197891?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472565511628197891'
  tweet_text: 'Associate creates an alias for expressions or variables.


    integer, allocatable :: u(:)

    u = [4,9]

    associate (v =&gt; u)

    v = v - 2

    print*,v ! 2 7

    print*,u ! 2 7

    associate (w =&gt; [4,9])

    print*,w

    w = w - 2 ! illegal since w set to a constant expression

    end associate

    end associate

    end'
- datetime: 2021-12-18 18:36:00
  file_links:
  - target: ./one_line_if.f90
    text: one_line_if.f90
  ft_topic_id: conditionals
  title: In addition to if-elseif, Fortran has a one-line if
  tweet_created_at: '2021-12-19T00:36:05.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In addition
    to if-elseif, Fortran has a one-line if:<br>if (condition) executable_statement<br><br>integer
    :: i<br>do i=-1,1<br>   if (i /= 0) print*,i,1/i ! one-line if equivalent to below<br>   if
    (i /= 0) then<br>      print*,i,1/i<br>   end if<br>end do<br>end<br>! output:<br>!
    -1  -1<br>! -1  -1<br>!  1   1<br>!  1   1</p>&mdash; FortranTip (@fortrantip)
    <a href="https://twitter.com/fortrantip/status/1472365082067755017?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472365082067755017'
  tweet_text: "In addition to if-elseif, Fortran has a one-line if:\nif (condition)\
    \ executable_statement\n\ninteger :: i\ndo i=-1,1\n   if (i /= 0) print*,i,1/i\
    \ ! one-line if equivalent to below\n   if (i /= 0) then\n      print*,i,1/i\n\
    \   end if\nend do\nend\n! output:\n! -1  -1\n! -1  -1\n!  1   1\n!  1   1"
- datetime: 2021-12-18 08:18:00
  file_links: []
  ft_topic_id: character-variables
  title: Character variables are padded with spaces at the end if necessary.
  tweet_created_at: '2021-12-18T14:18:16.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran character
    variables are padded with spaces at the end if necessary. The // operator concatenates.
    Trim removes trailing spaces.<br><br>character (len=5) :: v = &quot;one&quot;<br>print*,&quot;&#39;&quot;
    // v // &quot;&#39;&quot; ! &#39;one  &#39;<br>print*,&quot;&#39;&quot; // trim(v)
    // &quot;&#39;&quot; ! &#39;one&#39;<br>print*,len(v),len_trim(v) ! 5 3<br>end</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472209602074849285?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472209602074849285'
  tweet_text: 'Fortran character variables are padded with spaces at the end if necessary.
    The // operator concatenates. Trim removes trailing spaces.


    character (len=5) :: v = "one"

    print*,"''" // v // "''" ! ''one  ''

    print*,"''" // trim(v) // "''" ! ''one''

    print*,len(v),len_trim(v) ! 5 3

    end'
- datetime: 2021-12-18 08:10:00
  file_links:
  - target: ./char.f90
    text: char.f90
  ft_topic_id: character-variables
  title: An array of character variables has elements of the same LEN(gth).
  tweet_created_at: '2021-12-18T14:10:13.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">An array
    of character variables has elements of the same LEN(gth).<br><br>character(len=5)
    :: w(3)<br>w = [&quot;one&quot;,&quot;four&quot;,&quot;seven&quot;] ! invalid<br>w
    = [&quot;one  &quot;,&quot;four &quot;,&quot;seven&quot;] ! same as below<br>w
    = [character(5) :: &quot;one&quot;,&quot;four&quot;,&quot;seven&quot;] <br>print*,w<br>end</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472207576133783564?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472207576133783564'
  tweet_text: "An array of character variables has elements of the same LEN(gth).\n\
    \ncharacter(len=5) :: w(3)\nw = [\"one\",\"four\",\"seven\"] ! invalid\nw = [\"\
    one  \",\"four \",\"seven\"] ! same as below\nw = [character(5) :: \"one\",\"\
    four\",\"seven\"] \nprint*,w\nend"
- datetime: 2021-12-18 08:01:00
  file_links:
  - target: ./merge.f90
    text: merge.f90
  ft_topic_id: conditionals
  title: MERGE(x,y,condition) returns x if condition is true, otherwise y
  tweet_created_at: '2021-12-18T14:01:16.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">merge(x,y,condition)
    returns x if condition is true, otherwise y. Same output as previous:<br><br>integer
    :: i<br>do i=-1,1<br>   print*,i<br>   ! &quot;zero&quot; padded to have same
    length as &quot;negative&quot;<br>   print*,merge(&quot;negative&quot;,merge(&quot;zero    &quot;,
    &amp;  <br>                &quot;positive&quot;,i==0),i&lt;0)<br>end do<br>end</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472205323763073026?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472205323763073026'
  tweet_text: "merge(x,y,condition) returns x if condition is true, otherwise y. Same\
    \ output as previous:\n\ninteger :: i\ndo i=-1,1\n   print*,i\n   ! \"zero\" padded\
    \ to have same length as \"negative\"\n   print*,merge(\"negative\",merge(\"zero\
    \    \", &amp;  \n                \"positive\",i==0),i&lt;0)\nend do\nend"
- datetime: 2021-12-18 07:50:00
  file_links:
  - target: ./if.f90
    text: if.f90
  ft_topic_id: conditionals
  title: IF-ELSEIF-ENDIF block
  tweet_created_at: '2021-12-18T13:50:45.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If-elseif-endif
    block:<br><br>integer :: i<br>do i=-1,1<br>   print*,i<br>   if (i &lt; 0) then<br>      print*,&quot;negative&quot;<br>   else
    if (i == 0) then<br>      print*,&quot;zero&quot;<br>   else<br>      print*,&quot;positive&quot;<br>   end
    if<br>end do<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472202678054920196?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472202678054920196'
  tweet_text: "If-elseif-endif block:\n\ninteger :: i\ndo i=-1,1\n   print*,i\n  \
    \ if (i &lt; 0) then\n      print*,\"negative\"\n   else if (i == 0) then\n  \
    \    print*,\"zero\"\n   else\n      print*,\"positive\"\n   end if\nend do\n\
    end"
- datetime: 2021-12-18 06:36:00
  file_links: []
  ft_topic_id: style
  title: New Fortran code should be written using free source form and stored in a
    file with the .f90 suffix.
  tweet_created_at: '2021-12-18T12:36:16.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">New Fortran
    code should be written using free source form and stored in a file with the .f90
    suffix. Free form was introduced in the Fortran 90 standard, but using the .f90
    suffix does NOT mean the code is restricted to Fortran 90 features. Don&#39;t
    use .f95 .f08 .f18 suffixes.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472183935044145157?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472183935044145157'
  tweet_text: New Fortran code should be written using free source form and stored
    in a file with the .f90 suffix. Free form was introduced in the Fortran 90 standard,
    but using the .f90 suffix does NOT mean the code is restricted to Fortran 90 features.
    Don't use .f95 .f08 .f18 suffixes.
- datetime: 2021-12-18 06:26:00
  file_links:
  - target: ./alloc.f90
    text: alloc.f90
  ft_topic_id: allocation
  title: Fortran has allocation on assignment.
  tweet_created_at: '2021-12-18T12:26:59.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran has
    allocation on assignment, but you cannot use the ALLOCATE statement for an array
    that is allocated<br><br>integer, allocatable :: v(:)<br>v = [4,9]<br>deallocate(v)
    ! necessary for line below to work<br>allocate (v,source=[4,9]) ! same as above</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472181598833549316?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472181598833549316'
  tweet_text: 'Fortran has allocation on assignment, but you cannot use the ALLOCATE
    statement for an array that is allocated


    integer, allocatable :: v(:)

    v = [4,9]

    deallocate(v) ! necessary for line below to work

    allocate (v,source=[4,9]) ! same as above'
- datetime: 2021-12-17 19:40:00
  file_links:
  - target: ./2d_array.f90
    text: 2d_array.f90
  ft_topic_id: arrays
  title: SUM and other array functions have an optional DIM(ension) argument.
  tweet_created_at: '2021-12-18T01:40:03.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">sum and other
    array functions have an optional dim(ension) argument<br><br>integer :: v(2,3)
    ! 2x3 matrix<br>v(1,:) = [1,2,3]<br>v(2,:) = 10*v(1,:) ! set to [10,20,30]<br>print*,sum(v)
    ! all elements: 66<br>print*,sum(v,dim=1) ! sum each row: 6 60<br>print*,sum(v,dim=2)
    ! sum each col: 11 22 33</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472018791525720069?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472018791525720069'
  tweet_text: 'sum and other array functions have an optional dim(ension) argument


    integer :: v(2,3) ! 2x3 matrix

    v(1,:) = [1,2,3]

    v(2,:) = 10*v(1,:) ! set to [10,20,30]

    print*,sum(v) ! all elements: 66

    print*,sum(v,dim=1) ! sum each row: 6 60

    print*,sum(v,dim=2) ! sum each col: 11 22 33'
- datetime: 2021-12-17 18:16:00
  file_links:
  - target: ./bounds.f90
    text: bounds.f90
  ft_topic_id: arrays
  title: Fortran arrays can have any lower bound. The default is 1.
  tweet_created_at: '2021-12-18T00:16:29.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran arrays
    can have any lower bound. <br>The default is 1. Array functions have optional
    mask arguments to determine the elements used.<br><br>integer :: v(-1:1) = [1,-2,3]<br>print*,lbound(v),ubound(v),size(v)
    ! -1 1 3<br>print*,sum(v) ! 2<br>print*,sum(v,mask=v&gt;0) ! 4 -- sum excludes
    -2<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471997763848183810?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471997763848183810'
  tweet_text: "Fortran arrays can have any lower bound. \nThe default is 1. Array\
    \ functions have optional mask arguments to determine the elements used.\n\ninteger\
    \ :: v(-1:1) = [1,-2,3]\nprint*,lbound(v),ubound(v),size(v) ! -1 1 3\nprint*,sum(v)\
    \ ! 2\nprint*,sum(v,mask=v&gt;0) ! 4 -- sum excludes -2\nend"
- datetime: 2021-12-17 18:01:00
  file_links:
  - target: ./sections.f90
    text: sections.f90
  ft_topic_id: arrays
  title: Fortran array sections contain both endpoints
  tweet_created_at: '2021-12-18T00:01:56.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran array
    sections contain both endpoints like Julia, Matlab and R, unlike Python.<br><br>integer,
    parameter :: v(3) = [10,20,30]<br>print*,v(1:2) ! output 10 20<br>print*,v(:2)  !
    10 20<br>print*,v(2:3) ! 20 30<br>print*,v(2:)  ! 20 30<br>print*,v(::2) ! 10
    30 -- stride of 2</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471994100161388545?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471994100161388545'
  tweet_text: 'Fortran array sections contain both endpoints like Julia, Matlab and
    R, unlike Python.


    integer, parameter :: v(3) = [10,20,30]

    print*,v(1:2) ! output 10 20

    print*,v(:2)  ! 10 20

    print*,v(2:3) ! 20 30

    print*,v(2:)  ! 20 30

    print*,v(::2) ! 10 30 -- stride of 2'
- datetime: 2021-12-17 17:44:00
  file_links:
  - target: ./array_intrinsics.f90
    text: array_intrinsics.f90
  ft_topic_id: arrays
  title: 'Array intrinsic functions: SUM, MINVAL, MAXVAL, MINLOC, FINDLOC'
  tweet_created_at: '2021-12-17T23:44:41.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="fr" dir="ltr">Fortran has
    many array intrinsic functions. Below, ! starts a comment.<br><br>integer, parameter
    :: vec(3) = [4,1,9]<br>print*,minval(vec),maxval(vec) ! output: 1 9<br>print*,sum(vec),product(vec)
    ! 14 36<br>print*,minloc(vec),maxloc(vec) ! 2 3<br>print*,findloc(vec,9),findloc(vec,8)
    ! 3 0<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471989760046641153?ref_src=twsrc%5Etfw">December
    17, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471989760046641153'
  tweet_text: 'Fortran has many array intrinsic functions. Below, ! starts a comment.


    integer, parameter :: vec(3) = [4,1,9]

    print*,minval(vec),maxval(vec) ! output: 1 9

    print*,sum(vec),product(vec) ! 14 36

    print*,minloc(vec),maxloc(vec) ! 2 3

    print*,findloc(vec,9),findloc(vec,8) ! 3 0

    end'
- datetime: 2021-12-17 14:14:00
  file_links: []
  ft_topic_id: basics
  title: Integer division truncates.
  tweet_created_at: '2021-12-17T20:14:04.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">print*,2+3,2-3,2*3,2/3,2/3.0,2.0/3,2**3<br><br>gives<br><br>5
    -1 6 0 0.6666667 0.6666667 8<br><br>2/3 = 0 in Fortran because the quotient of
    two integers is truncated to an integer. The quotient of an integer and a real
    is a real.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471936756857643008?ref_src=twsrc%5Etfw">December
    17, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471936756857643008'
  tweet_text: 'print*,2+3,2-3,2*3,2/3,2/3.0,2.0/3,2**3


    gives


    5 -1 6 0 0.6666667 0.6666667 8


    2/3 = 0 in Fortran because the quotient of two integers is truncated to an integer.
    The quotient of an integer and a real is a real.'
- datetime: 2021-12-17 12:03:00
  file_links:
  - target: ./power.f90
    text: power.f90
  ft_topic_id: basics
  title: \** is the exponentiation operator.
  tweet_created_at: '2021-12-17T18:03:07.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The exponentiation
    operator in Fortran is **, as in Python. <br><br>print*,1.2**2<br><br>gives 1.44<br><br>Many
    Fortran operators and intrinsic functions are elemental, and brackets denote arrays,
    so<br><br>print*,[1.0,1.1,1.2,1.3]**2<br><br>gives<br><br>1.00000000       1.21000004       1.44000006       1.68999982</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471903802185986050?ref_src=twsrc%5Etfw">December
    17, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471903802185986050'
  tweet_text: "The exponentiation operator in Fortran is **, as in Python. \n\nprint*,1.2**2\n\
    \ngives 1.44\n\nMany Fortran operators and intrinsic functions are elemental,\
    \ and brackets denote arrays, so\n\nprint*,[1.0,1.1,1.2,1.3]**2\n\ngives\n\n1.00000000\
    \       1.21000004       1.44000006       1.68999982"
- datetime: 2021-12-17 11:37:00
  file_links: []
  ft_topic_id: fortran-resources
  title: Fortran compilers and tutorials
  tweet_created_at: '2021-12-17T17:37:22.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Two good
    sites to get started with Fortran are <a href="https://t.co/i6lkcIfPqy">https://t.co/i6lkcIfPqy</a>
    and <a href="https://t.co/uxmVspKsPm">https://t.co/uxmVspKsPm</a> . A good free
    compiler is gfortran, part of gcc. Intel Fortran is also free. LFortran is an
    interactive compiler that covers most but not yet all of Fortran.</p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471897319671046147?ref_src=twsrc%5Etfw">December
    17, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471897319671046147'
  tweet_text: Two good sites to get started with Fortran are https://t.co/i6lkcIfPqy
    and https://t.co/uxmVspKsPm . A good free compiler is gfortran, part of gcc. Intel
    Fortran is also free. LFortran is an interactive compiler that covers most but
    not yet all of Fortran.
- datetime: 2021-12-17 11:30:00
  file_links:
  - target: ./sum_exit.f90
    text: sum_exit.f90
  ft_topic_id: loops
  title: EXIT a loop
  tweet_created_at: '2021-12-17T17:30:06.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">You EXIT
    a loop as shown in the code below, which accumulates the sums of squared integers
    until the sum exceeds 100<br><br>implicit none<br>integer :: i,ssq<br>ssq = 0<br>i
    = 0<br>do<br>   i = i+1<br>   ssq = ssq + i**2<br>   if (ssq &gt; 100) exit<br>end
    do  <br>print*,&quot;sum of squares from 1 to &quot;,i,&quot; is&quot;,ssq<br>end</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471895490346291206?ref_src=twsrc%5Etfw">December
    17, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471895490346291206'
  tweet_text: "You EXIT a loop as shown in the code below, which accumulates the sums\
    \ of squared integers until the sum exceeds 100\n\nimplicit none\ninteger :: i,ssq\n\
    ssq = 0\ni = 0\ndo\n   i = i+1\n   ssq = ssq + i**2\n   if (ssq &gt; 100) exit\n\
    end do  \nprint*,\"sum of squares from 1 to \",i,\" is\",ssq\nend"
- datetime: 2021-12-17 11:14:00
  file_links:
  - target: ./loop.f90
    text: loop.f90
  ft_topic_id: loops
  title: DO-ENDDO loop
  tweet_created_at: '2021-12-17T17:14:49.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The primary
    looping construct in Fortran is do ... end do. A program to print the sum the
    squares of the integers from 1 to 5 is<br><br>implicit none<br>integer :: i,ssq<br>ssq
    = 0<br>do i=1,5<br>   ssq = ssq + i**2<br>end do<br>print*,&quot;sum of squares
    is &quot;,ssq<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471891644370796550?ref_src=twsrc%5Etfw">December
    17, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471891644370796550'
  tweet_text: "The primary looping construct in Fortran is do ... end do. A program\
    \ to print the sum the squares of the integers from 1 to 5 is\n\nimplicit none\n\
    integer :: i,ssq\nssq = 0\ndo i=1,5\n   ssq = ssq + i**2\nend do\nprint*,\"sum\
    \ of squares is \",ssq\nend"
- datetime: 2021-12-17 11:09:00
  file_links: []
  ft_topic_id: data-types
  title: 'Intrinsic data types: integer, real, complex, logical, and character'
  tweet_created_at: '2021-12-17T17:09:41.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran has
    5 intrinsic data types: integer, real, complex, logical, and character. The types
    have various KINDs that determine the range of data they can represent.</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471890355561943054?ref_src=twsrc%5Etfw">December
    17, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471890355561943054'
  tweet_text: 'Fortran has 5 intrinsic data types: integer, real, complex, logical,
    and character. The types have various KINDs that determine the range of data they
    can represent.'
- datetime: 2021-12-17 10:58:00
  file_links:
  - target: ./hello_world.f90
    text: hello_world.f90
  ft_topic_id: basics
  title: Hello World
  tweet_created_at: '2021-12-17T16:58:36.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Hello World
    in Fortran is<br><br>print*,&quot;Hello, World.&quot;<br>end</p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471887565745799173?ref_src=twsrc%5Etfw">December
    17, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471887565745799173'
  tweet_text: 'Hello World in Fortran is


    print*,"Hello, World."

    end'
