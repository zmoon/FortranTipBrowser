# !! This file is autogenerated by auto-data.py !!
- datetime: 2022-03-18 08:14:00
  file_links:
  - target: ./direct_access.f90
    text: direct_access.f90
  ft_topic_id: input-and-output
  title: DIRECT access file allows access to arbitrary record without looping over
    the previous records.
  tweet_created_at: '2022-03-18T12:14:33.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A DIRECT
    access data file lets you read or write an arbitrary record without looping over
    the previous records, as needed with the usual SEQUENTIAL access. The record length
    RECL is given in the OPEN statement, and READ or WRITE need a record number REC.<a
    href="https://t.co/FRvhhG3che">pic.twitter.com/FRvhhG3che</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1504793375765155840?ref_src=twsrc%5Etfw">March
    18, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1504793375765155840'
  tweet_text: 'A DIRECT access data file lets you read or write an arbitrary record
    without looping over the previous records, as needed with the usual SEQUENTIAL
    access. The record length RECL is given in the OPEN statement, and READ or WRITE
    need a record number REC.

    https://t.co/FRvhhG3che'
- datetime: 2022-03-17 07:41:00
  file_links:
  - target: ./write_append.f90
    text: write_append.f90
  ft_topic_id: input-and-output
  title: How to append to a file or delete it
  tweet_created_at: '2022-03-17T11:41:58.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In an OPEN
    statement with ACTION=&quot;write&quot;, use POSITION=&quot;append&quot; to append
    data to a file rather than overwriting it. To delete a file that is connected
    to a unit, CLOSE that unit with STATUS=&quot;delete&quot;.<a href="https://t.co/WN3uo3agpf">pic.twitter.com/WN3uo3agpf</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1504422788517576704?ref_src=twsrc%5Etfw">March
    17, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1504422788517576704'
  tweet_text: 'In an OPEN statement with ACTION="write", use POSITION="append" to
    append data to a file rather than overwriting it. To delete a file that is connected
    to a unit, CLOSE that unit with STATUS="delete".

    https://t.co/WN3uo3agpf'
- datetime: 2022-03-16 08:09:00
  file_links:
  - target: ./inquire.f90
    text: inquire.f90
  ft_topic_id: input-and-output
  title: Use INQUIRE to get unit and file properties.
  tweet_created_at: '2022-03-16T12:09:07.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The INQUIRE
    statement can tell if a unit has been opened, if a file exists, a file&#39;s size,
    whether it is open for reading or writing, formatted or not, its form of access,
    and other properties. Common uses of INQUIRE can be wrapped as functions as shown.<a
    href="https://t.co/4ksASPJnLS">pic.twitter.com/4ksASPJnLS</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1504067234326528000?ref_src=twsrc%5Etfw">March
    16, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1504067234326528000'
  tweet_text: 'The INQUIRE statement can tell if a unit has been opened, if a file
    exists, a file''s size, whether it is open for reading or writing, formatted or
    not, its form of access, and other properties. Common uses of INQUIRE can be wrapped
    as functions as shown.

    https://t.co/4ksASPJnLS'
- datetime: 2022-03-15 07:51:00
  file_links:
  - target: ./newunit.f90
    text: newunit.f90
  ft_topic_id: input-and-output
  title: Use NEWUNIT in OPEN to get an unused unit number.
  tweet_created_at: '2022-03-15T11:51:58.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">open (newunit=iu,...)<br><br>is
    a Fortran 2008 feature that finds an unused unit number less than -1. By doing
    this instead of hard coding a unit number, you avoid inadvertently using a unit
    number that is already connected.<a href="https://t.co/197XS6ABbM">pic.twitter.com/197XS6ABbM</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1503700530496946177?ref_src=twsrc%5Etfw">March
    15, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1503700530496946177'
  tweet_text: 'open (newunit=iu,...)


    is a Fortran 2008 feature that finds an unused unit number less than -1. By doing
    this instead of hard coding a unit number, you avoid inadvertently using a unit
    number that is already connected.

    https://t.co/197XS6ABbM'
- datetime: 2022-03-14 07:58:00
  file_links:
  - target: ./open_units_limit.f90
    text: open_units_limit.f90
  ft_topic_id: input-and-output
  title: Number of files open simultaneously is limited, so they should be closed
    when possible.
  tweet_created_at: '2022-03-14T11:58:16.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The number
    of files that can be connected simultaneously differs by compiler and operating
    system, so files that will no longer be used should be closed, especially when
    opened in a loop. On Unix ulimit -n gives the maximum # of open file descriptors.<a
    href="https://t.co/sSJe11cw8X">pic.twitter.com/sSJe11cw8X</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1503339726534852615?ref_src=twsrc%5Etfw">March
    14, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1503339726534852615'
  tweet_text: 'The number of files that can be connected simultaneously differs by
    compiler and operating system, so files that will no longer be used should be
    closed, especially when opened in a loop. On Unix ulimit -n gives the maximum
    # of open file descriptors.

    https://t.co/sSJe11cw8X'
- datetime: 2022-03-13 10:28:00
  file_links:
  - target: ./write_many_files.f90
    text: write_many_files.f90
  ft_topic_id: input-and-output
  title: Write to many files by creating file names with internal write.
  tweet_created_at: '2022-03-13T14:28:21.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">To portably
    create many files named by integers with specified prefix and suffix you can loop
    over the integers and in the loop body use an internal write to create the file
    name, connect the file to a unit, write to it, and then close it.<a href="https://t.co/M7UFaRglkv">pic.twitter.com/M7UFaRglkv</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1503015109354045442?ref_src=twsrc%5Etfw">March
    13, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1503015109354045442'
  tweet_text: 'To portably create many files named by integers with specified prefix
    and suffix you can loop over the integers and in the loop body use an internal
    write to create the file name, connect the file to a unit, write to it, and then
    close it.

    https://t.co/M7UFaRglkv'
- datetime: 2022-03-12 07:40:00
  file_links:
  - target: ./implicitly_connected.f90
    text: implicitly_connected.f90
  ft_topic_id: input-and-output
  title: Unit n is connected to fort.n by default for most compilers.
  tweet_created_at: '2022-03-12T12:40:09.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">For a positive
    integer n other than 5 or 6 that has not been connected to a file with OPEN,<br><br>write
    (n,*) &quot;hello&quot;<br><br>will write to a file with n in the name, such as
    fort.10 for n = 10, with details up to the compiler.<a href="https://t.co/bv8FnEq0UZ">pic.twitter.com/bv8FnEq0UZ</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1502625494499536904?ref_src=twsrc%5Etfw">March
    12, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1502625494499536904'
  tweet_text: 'For a positive integer n other than 5 or 6 that has not been connected
    to a file with OPEN,


    write (n,*) "hello"


    will write to a file with n in the name, such as fort.10 for n = 10, with details
    up to the compiler.

    https://t.co/bv8FnEq0UZ'
- datetime: 2022-03-11 08:39:00
  file_links:
  - target: ./output_unit.f90
    text: output_unit.f90
  ft_topic_id: input-and-output
  title: Connect INPUT_UNIT and OUTPUT_UNIT to files to redirect standard input and
    output.
  tweet_created_at: '2022-03-11T13:39:06.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Module ISO_FORTRAN_ENV
    has named constants INPUT_UNIT and OUTPUT_UNIT, usually 5 and 6. Connecting output_unit
    to a file sends the output of<br>PRINT fmt, and WRITE (*,fmt) to that file. Connecting
    input_unit to a file causes READ (*,fmt) to access that file<a href="https://t.co/2IdX5vwkfu">pic.twitter.com/2IdX5vwkfu</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1502277940066893835?ref_src=twsrc%5Etfw">March
    11, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1502277940066893835'
  tweet_text: 'Module ISO_FORTRAN_ENV has named constants INPUT_UNIT and OUTPUT_UNIT,
    usually 5 and 6. Connecting output_unit to a file sends the output of

    PRINT fmt, and WRITE (*,fmt) to that file. Connecting input_unit to a file causes
    READ (*,fmt) to access that file

    https://t.co/2IdX5vwkfu'
- datetime: 2022-03-10 07:33:00
  file_links: []
  ft_topic_id: pointers
  title: Use ALLOCATABLE arrays or ASSOCIATE instead of POINTER when possible.
  tweet_created_at: '2022-03-10T12:33:18.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In Fortran
    90, allocatable arrays could not be used as procedure arguments or derived type
    components. An old code may use pointers in these situations, where it is now
    safer and more convenient to use allocatable arrays. In other cases POINTER can
    be replaced by<br>ASSOCIATE.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1501898993785319429?ref_src=twsrc%5Etfw">March
    10, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1501898993785319429'
  tweet_text: 'In Fortran 90, allocatable arrays could not be used as procedure arguments
    or derived type components. An old code may use pointers in these situations,
    where it is now safer and more convenient to use allocatable arrays. In other
    cases POINTER can be replaced by

    ASSOCIATE.'
- datetime: 2022-03-09 08:16:00
  file_links:
  - target: ./pointer_use.f90
    text: pointer_use.f90
  ft_topic_id: pointers
  title: Pointer should be initialized to null() to avoid undefined association status.
  tweet_created_at: '2022-03-09T13:16:52.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Whether a
    pointer is initially ASSOCIATED is undefined, unless the pointer is initialized
    to null(), which makes it not associated. This is recommended. A pointer becomes
    associated by being allocated or by being given a target.<a href="https://t.co/D8eBKzMZ0i">pic.twitter.com/D8eBKzMZ0i</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1501547568307728385?ref_src=twsrc%5Etfw">March
    9, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1501547568307728385'
  tweet_text: 'Whether a pointer is initially ASSOCIATED is undefined, unless the
    pointer is initialized to null(), which makes it not associated. This is recommended.
    A pointer becomes associated by being allocated or by being given a target.

    https://t.co/D8eBKzMZ0i'
- datetime: 2022-03-08 07:14:00
  file_links:
  - target: ./pointer_reshape.f90
    text: pointer_reshape.f90
  ft_topic_id: pointers
  title: Pointer can remap array shape and bounds.
  tweet_created_at: '2022-03-08T12:14:51.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A pointer
    can be used to map an array to an array of the same type and size but a different
    shape, rank, or bounds, for example<br><br>real, target  :: y(6)<br>real, pointer
    :: p(:,:)<br>p(-1:1,1:2) =&gt; y ! map y(:) to 3x2 matrix with LB -1, 1<a href="https://t.co/rZ72DjBWgH">pic.twitter.com/rZ72DjBWgH</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1501169574997377025?ref_src=twsrc%5Etfw">March
    8, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1501169574997377025'
  tweet_text: 'A pointer can be used to map an array to an array of the same type
    and size but a different shape, rank, or bounds, for example


    real, target  :: y(6)

    real, pointer :: p(:,:)

    p(-1:1,1:2) =&gt; y ! map y(:) to 3x2 matrix with LB -1, 1

    https://t.co/rZ72DjBWgH'
- datetime: 2022-03-07 07:38:00
  file_links:
  - target: ./associate_bounds.f90
    text: associate_bounds.f90
  ft_topic_id: associate
  title: Bounds of associate-name for whole array or array section selector
  tweet_created_at: '2022-03-07T12:38:46.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The left-hand
    side of an association (associate-name) has the same bounds as the right-hand
    side (selector) if it is a whole array but has lower bounds of 1 if the selector
    is an array section.<a href="https://t.co/uQzrh5I0iR">pic.twitter.com/uQzrh5I0iR</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1500813206356430848?ref_src=twsrc%5Etfw">March
    7, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1500813206356430848'
  tweet_text: 'The left-hand side of an association (associate-name) has the same
    bounds as the right-hand side (selector) if it is a whole array but has lower
    bounds of 1 if the selector is an array section.

    https://t.co/uQzrh5I0iR'
- datetime: 2022-03-06 09:03:00
  file_links: []
  ft_topic_id: null
  title: Tips by topic
  tweet_created_at: '2022-03-06T14:03:31.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Since the
    tip topics have jumped around, I have listed them by topic.<a href="https://t.co/rUZiffPR5o">https://t.co/rUZiffPR5o</a><br>To
    suggest a topic please raise an issue at GitHub or send a direct message.</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1500472144878313473?ref_src=twsrc%5Etfw">March
    6, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1500472144878313473'
  tweet_text: 'Since the tip topics have jumped around, I have listed them by topic.

    https://t.co/rUZiffPR5o

    To suggest a topic please raise an issue at GitHub or send a direct message.'
- datetime: 2022-03-06 07:30:00
  file_links:
  - target: ./associate_alloc.f90
    text: associate_alloc.f90
  ft_topic_id: associate
  title: A variable ASSOCIATEd to an ALLOCATABLE variable is not ALLOCATABLE.
  tweet_created_at: '2022-03-06T12:30:20.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In an ASSOCIATE
    statement the LHS is not ALLOCATABLE even if the RHS is. If the RHS is an allocatable
    array, it must already be ALLOCATED, and it should not be reallocated or deallocated
    within the ASSOCIATE block.<a href="https://t.co/cOHvBuqK4X">pic.twitter.com/cOHvBuqK4X</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1500448694734364675?ref_src=twsrc%5Etfw">March
    6, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1500448694734364675'
  tweet_text: 'In an ASSOCIATE statement the LHS is not ALLOCATABLE even if the RHS
    is. If the RHS is an allocatable array, it must already be ALLOCATED, and it should
    not be reallocated or deallocated within the ASSOCIATE block.

    https://t.co/cOHvBuqK4X'
- datetime: 2022-03-05 07:33:00
  file_links:
  - target: ./associate_many.f90
    text: associate_many.f90
  ft_topic_id: associate
  title: ASSOCIATE statement can set several independent variables.
  tweet_created_at: '2022-03-05T12:33:44.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A single
    ASSOCIATE statement can create multiple variables, but they must be independent.
    If y depends on x you must first ASSOCIATE x and then ASSOCIATE y in a following
    statement. A loop with an ASSOCIATE must also have an END ASSOCIATE.<a href="https://t.co/aTf72Py2cg">pic.twitter.com/aTf72Py2cg</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1500087163668549636?ref_src=twsrc%5Etfw">March
    5, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1500087163668549636'
  tweet_text: 'A single ASSOCIATE statement can create multiple variables, but they
    must be independent. If y depends on x you must first ASSOCIATE x and then ASSOCIATE
    y in a following statement. A loop with an ASSOCIATE must also have an END ASSOCIATE.

    https://t.co/aTf72Py2cg'
- datetime: 2022-03-04 07:16:00
  file_links:
  - target: ./associate_vs_pointer.f90
    text: associate_vs_pointer.f90
  ft_topic_id: associate
  title: ASSOCIATE is preferred over POINTER to create an alias because POINTER can
    inhibit optimization.
  tweet_created_at: '2022-03-04T12:16:45.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Although
    ASSOCIATE of Fortran 2003 and POINTER of Fortran 90 can both create an alias for
    a derived type component or an array section, ASSOCIATE is now preferred since
    the use of POINTER can inhibit optimization.<a href="https://t.co/n39lBNhTEz">pic.twitter.com/n39lBNhTEz</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1499720499181535247?ref_src=twsrc%5Etfw">March
    4, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1499720499181535247'
  tweet_text: 'Although ASSOCIATE of Fortran 2003 and POINTER of Fortran 90 can both
    create an alias for a derived type component or an array section, ASSOCIATE is
    now preferred since the use of POINTER can inhibit optimization.

    https://t.co/n39lBNhTEz'
- datetime: 2022-03-03 07:59:00
  file_links:
  - target: ./copy.f90
    text: copy.f90
  ft_topic_id: associate
  title: Pointer assignment and ASSOCIATE can create shallow copies.
  tweet_created_at: '2022-03-03T12:59:51.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A pointer
    assignment or ASSOCIATE with the RHS a variable can create shallow copies where
    changes in one variable affect another. Normal assignment or ALLOCATE with SOURCE
    creates a deep copy.<br>Created with <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a>
    <a href="https://t.co/7FPHzH0uX2">pic.twitter.com/7FPHzH0uX2</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1499368960151760896?ref_src=twsrc%5Etfw">March
    3, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1499368960151760896'
  tweet_text: 'A pointer assignment or ASSOCIATE with the RHS a variable can create
    shallow copies where changes in one variable affect another. Normal assignment
    or ALLOCATE with SOURCE creates a deep copy.

    Created with @carbon_app https://t.co/7FPHzH0uX2'
- datetime: 2022-03-02 08:29:00
  file_links:
  - target: ./scope.f90
    text: scope.f90
  ft_topic_id: procedures
  title: Internal procedures have access to variables from the host unless they are
    overridden by local variables.
  tweet_created_at: '2022-03-02T13:29:52.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">An internal
    procedure can declare variables with the same names as the enclosing procedure,
    which can declare variables with the same names as module variables. Within a
    scope a name refers to the local variable. Variables from the host are accessible.<a
    href="https://t.co/9ics0WynEP">pic.twitter.com/9ics0WynEP</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1499014126265372685?ref_src=twsrc%5Etfw">March
    2, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1499014126265372685'
  tweet_text: 'An internal procedure can declare variables with the same names as
    the enclosing procedure, which can declare variables with the same names as module
    variables. Within a scope a name refers to the local variable. Variables from
    the host are accessible.

    https://t.co/9ics0WynEP'
- datetime: 2022-03-01 08:08:00
  file_links:
  - target: ./block.f90
    text: block.f90
  ft_topic_id: basics
  title: BLOCK construct allows declarations after executable statements.
  tweet_created_at: '2022-03-01T13:08:44.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The BLOCK
    construct of Fortran 2008 allows variables to be declared and exist only within
    the block. This permits variables to be declared closer to their use and deallocated
    earlier and can avoid name clashes. If the block is named, EXIT &lt;name&gt; leaves
    it <a href="https://t.co/4iAzqE52Qg">pic.twitter.com/4iAzqE52Qg</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1498646417778548736?ref_src=twsrc%5Etfw">March
    1, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1498646417778548736'
  tweet_text: The BLOCK construct of Fortran 2008 allows variables to be declared
    and exist only within the block. This permits variables to be declared closer
    to their use and deallocated earlier and can avoid name clashes. If the block
    is named, EXIT &lt;name&gt; leaves it https://t.co/4iAzqE52Qg
- datetime: 2022-02-28 08:38:00
  file_links: []
  ft_topic_id: fortran-resources
  title: Five free C C++ Fortran compiler families
  tweet_created_at: '2022-02-28T13:38:02.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://t.co/6R7rwViMRE">https://t.co/6R7rwViMRE</a><br>They
    are GNU, IntelOneAPI, LLVM, NVIDIA HPC, and IBM XL (for POWER CPUs).</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1498291406556876806?ref_src=twsrc%5Etfw">February
    28, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1498291406556876806'
  tweet_text: 'https://t.co/6R7rwViMRE

    They are GNU, IntelOneAPI, LLVM, NVIDIA HPC, and IBM XL (for POWER CPUs).'
- datetime: 2022-02-27 06:53:00
  file_links:
  - target: ./optional_err.f90
    text: optional_err.f90
  ft_topic_id: procedures
  title: Errors in a procedure can be handled with an optional argument.
  tweet_created_at: '2022-02-27T11:53:07.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Errors in
    a procedure can be handled by setting an error flag and returning or by stopping
    with an error message. A procedure with an optional error flag argument can handle
    errors in either way, depending on whether an error flag is passed.<a href="https://t.co/IMhQY8pLfw">pic.twitter.com/IMhQY8pLfw</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1497902611915284482?ref_src=twsrc%5Etfw">February
    27, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1497902611915284482'
  tweet_text: 'Errors in a procedure can be handled by setting an error flag and returning
    or by stopping with an error message. A procedure with an optional error flag
    argument can handle errors in either way, depending on whether an error flag is
    passed.

    https://t.co/IMhQY8pLfw'
- datetime: 2022-02-26 08:21:00
  file_links:
  - target: ./error_handling.f90
    text: error_handling.f90
  ft_topic_id: array-arguments
  title: Check that assumed-shape array arguments have consistent dimensions.
  tweet_created_at: '2022-02-26T13:21:53.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Check that
    assumed-shape array arguments have consistent dimensions. Using the FINDLOC function
    of Fortran 2008 on a logical array of constraints can reduce the amount of boilerplate
    code needed:<br><br>ierr = findloc([con1,con2,con3],value=.false.,dim=1)<a href="https://t.co/aRUxpXWIEY">pic.twitter.com/aRUxpXWIEY</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1497562564334694401?ref_src=twsrc%5Etfw">February
    26, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1497562564334694401'
  tweet_text: 'Check that assumed-shape array arguments have consistent dimensions.
    Using the FINDLOC function of Fortran 2008 on a logical array of constraints can
    reduce the amount of boilerplate code needed:


    ierr = findloc([con1,con2,con3],value=.false.,dim=1)

    https://t.co/aRUxpXWIEY'
- datetime: 2022-02-25 07:07:00
  file_links:
  - target: ./error_stop.f90
    text: error_stop.f90
  ft_topic_id: basics
  title: ERROR STOP vs. STOP.
  tweet_created_at: '2022-02-25T12:07:48.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran 2008
    introduced the ERROR STOP statement, which can be used in PURE procedures, <br>unlike
    STOP. Error stop or stop can be followed by an integer or string that is printed.
    Error stop on one coarray image will terminate the entire program.<a href="https://t.co/M1lajeSZvp">pic.twitter.com/M1lajeSZvp</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1497181532146089985?ref_src=twsrc%5Etfw">February
    25, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1497181532146089985'
  tweet_text: "Fortran 2008 introduced the ERROR STOP statement, which can be used\
    \ in PURE procedures, \nunlike STOP. Error stop or stop can be followed by an\
    \ integer or string that is printed. Error stop on one coarray image will terminate\
    \ the entire program.\nhttps://t.co/M1lajeSZvp"
- datetime: 2022-02-24 07:34:00
  file_links:
  - target: ./assumed_type.f90
    text: assumed_type.f90
  ft_topic_id: generic-programming
  title: Assumed type arguments have no declared type.
  tweet_created_at: '2022-02-24T12:34:27.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran 2018
    allows assumed type arguments that have no declared type, with syntax type(*).
    Such arguments can only be used in a small number of intrinsic functions, including
    SHAPE, SIZE, and RANK. Actual arguments can have intrinsic or derived types.<a
    href="https://t.co/mDry4PCOh9">pic.twitter.com/mDry4PCOh9</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1496825853551992843?ref_src=twsrc%5Etfw">February
    24, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1496825853551992843'
  tweet_text: 'Fortran 2018 allows assumed type arguments that have no declared type,
    with syntax type(*). Such arguments can only be used in a small number of intrinsic
    functions, including SHAPE, SIZE, and RANK. Actual arguments can have intrinsic
    or derived types.

    https://t.co/mDry4PCOh9'
- datetime: 2022-02-23 08:03:00
  file_links:
  - target: ./unlimited_pointer.f90
    text: unlimited_pointer.f90
  ft_topic_id: generic-programming
  title: Unlimited polymorphic pointer can point to any type.
  tweet_created_at: '2022-02-23T13:03:04.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">An unlimited
    polymorphic pointer p<br><br>class(*), pointer :: p<br><br>can point to any type
    of variable or object and can be passed as a class(*) or class(*), pointer argument.
    Otherwise it must be disambiguated with SELECT TYPE before being used.<a href="https://t.co/AJaPqr1rBF">pic.twitter.com/AJaPqr1rBF</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1496470666576642048?ref_src=twsrc%5Etfw">February
    23, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1496470666576642048'
  tweet_text: 'An unlimited polymorphic pointer p


    class(*), pointer :: p


    can point to any type of variable or object and can be passed as a class(*) or
    class(*), pointer argument. Otherwise it must be disambiguated with SELECT TYPE
    before being used.

    https://t.co/AJaPqr1rBF'
- datetime: 2022-02-23 07:36:00
  file_links:
  - target: ./unlimited_poly.f90
    text: unlimited_poly.f90
  ft_topic_id: generic-programming
  title: Unlimited polymorphic allocatable variable can be set to any type.
  tweet_created_at: '2022-02-23T12:36:23.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">An unlimited
    polymorphic allocatable variable x<br><br>class(*), allocatable :: x<br><br>can
    hold any type of variable or object. It can be passed as a class(*) argument.
    Otherwise it must be disambiguated with SELECT TYPE before being used.<a href="https://t.co/gYj2OMhwQj">pic.twitter.com/gYj2OMhwQj</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1496463950375960579?ref_src=twsrc%5Etfw">February
    23, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1496463950375960579'
  tweet_text: 'An unlimited polymorphic allocatable variable x


    class(*), allocatable :: x


    can hold any type of variable or object. It can be passed as a class(*) argument.
    Otherwise it must be disambiguated with SELECT TYPE before being used.

    https://t.co/gYj2OMhwQj'
- datetime: 2022-02-22 07:59:00
  file_links:
  - target: ./assumed_rank.f90
    text: assumed_rank.f90
  ft_topic_id: procedures
  title: Fortran 2018 procedures can have assumed-rank arguments.
  tweet_created_at: '2022-02-22T12:59:16.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran 2018
    procedures with explicit interfaces can have assumed-rank arguments, denoted x(..),
    that can be scalars or arrays of arbitrary rank. Within the procedure the SELECT
    RANK construct and RANK intrinsic is used to handle each rank.<a href="https://t.co/Hzqt5e1H9r">pic.twitter.com/Hzqt5e1H9r</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1496107321457528835?ref_src=twsrc%5Etfw">February
    22, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1496107321457528835'
  tweet_text: 'Fortran 2018 procedures with explicit interfaces can have assumed-rank
    arguments, denoted x(..), that can be scalars or arrays of arbitrary rank. Within
    the procedure the SELECT RANK construct and RANK intrinsic is used to handle each
    rank.

    https://t.co/Hzqt5e1H9r'
- datetime: 2022-02-21 07:33:00
  file_links:
  - target: ./storage_size.f90
    text: storage_size.f90
  ft_topic_id: data-types
  title: storage_size(A) returns the storage size of argument A in bits.
  tweet_created_at: '2022-02-21T12:33:19.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">storage_size(A)
    is an F2008 function that returns the storage size of argument A in bits. If A
    is an array it returns the size of an element of A. If A is a derived type with
    allocatable components, the result of storage_size() is compiler-dependent.<a
    href="https://t.co/p5bobsQXUj">pic.twitter.com/p5bobsQXUj</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1495738404356689926?ref_src=twsrc%5Etfw">February
    21, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1495738404356689926'
  tweet_text: 'storage_size(A) is an F2008 function that returns the storage size
    of argument A in bits. If A is an array it returns the size of an element of A.
    If A is a derived type with allocatable components, the result of storage_size()
    is compiler-dependent.

    https://t.co/p5bobsQXUj'
- datetime: 2022-02-20 07:21:00
  file_links:
  - target: ./dt_private.f90
    text: dt_private.f90
  ft_topic_id: derived-types
  title: A derived type can have PRIVATE components.
  tweet_created_at: '2022-02-20T12:21:04.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Derived type
    components can be declared PRIVATE, in which case they are only visible in the
    module where the type is defined. Below, b is private and c is public.<br><br>type
    dt<br>  private<br>  real :: b<br>  real, public :: c ! override private<br>end
    type <a href="https://t.co/TD76teqpzi">pic.twitter.com/TD76teqpzi</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1495372934537428997?ref_src=twsrc%5Etfw">February
    20, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1495372934537428997'
  tweet_text: "Derived type components can be declared PRIVATE, in which case they\
    \ are only visible in the module where the type is defined. Below, b is private\
    \ and c is public.\n\ntype dt\n  private\n  real :: b\n  real, public :: c ! override\
    \ private\nend type \nhttps://t.co/TD76teqpzi"
- datetime: 2022-02-19 06:44:00
  file_links:
  - target: ./type_constructor_optional.f90
    text: type_constructor_optional.f90
  ft_topic_id: derived-types
  title: A derived type component can have a default value.
  tweet_created_at: '2022-02-19T11:44:46.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If a derived
    type component is given a default value, the default constructor can be called
    without setting that component, which takes that value.<a href="https://t.co/xQ8uWiZU52">pic.twitter.com/xQ8uWiZU52</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1495001410894811139?ref_src=twsrc%5Etfw">February
    19, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1495001410894811139'
  tweet_text: 'If a derived type component is given a default value, the default constructor
    can be called without setting that component, which takes that value.

    https://t.co/xQ8uWiZU52'
- datetime: 2022-02-18 07:32:00
  file_links:
  - target: ./derived_type_composition.f90
    text: derived_type_composition.f90
  ft_topic_id: derived-types
  title: A derived type can have derived type components.
  tweet_created_at: '2022-02-18T12:32:27.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A derived
    type may have components that are also derived types. If x is an instance of a
    derived type that has component y, and y has component z, you can write x%y%z
    to access z. A similar syntax applies with type extension of Fortran 2003.<a href="https://t.co/xCLrAss3hf">pic.twitter.com/xCLrAss3hf</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1494651022010200065?ref_src=twsrc%5Etfw">February
    18, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1494651022010200065'
  tweet_text: 'A derived type may have components that are also derived types. If
    x is an instance of a derived type that has component y, and y has component z,
    you can write x%y%z to access z. A similar syntax applies with type extension
    of Fortran 2003.

    https://t.co/xCLrAss3hf'
- datetime: 2022-02-17 07:59:00
  file_links:
  - target: ./elemental_func_arg.f90
    text: elemental_func_arg.f90
  ft_topic_id: derived-types
  title: A derived type can be used where a scalar is needed.
  tweet_created_at: '2022-02-17T12:59:29.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A derived
    type variable is a scalar even if it has array components. Arrays of varying-length
    strings or pointers can be simulated. A derived type can be used where a scalar
    is required, for example as the dummy argument of an elemental procedure.<a href="https://t.co/QMUCesqyVR">pic.twitter.com/QMUCesqyVR</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1494295438320713730?ref_src=twsrc%5Etfw">February
    17, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1494295438320713730'
  tweet_text: 'A derived type variable is a scalar even if it has array components.
    Arrays of varying-length strings or pointers can be simulated. A derived type
    can be used where a scalar is required, for example as the dummy argument of an
    elemental procedure.

    https://t.co/QMUCesqyVR'
- datetime: 2022-02-16 07:09:00
  file_links: []
  ft_topic_id: fortran-resources
  title: Modern Fortran Reference Card and Quick Reference/Cheat Sheet.
  tweet_created_at: '2022-02-16T12:09:22.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Modern Fortran
    Reference Card of Michael Goerz crams a lot of good information in 2 pages<a href="https://t.co/QzVEZpfe1Z">https://t.co/QzVEZpfe1Z</a>,
    as does the 5-page Quick Reference/Cheat Sheet of Ben Evans <a href="https://t.co/HDt5B4Swe4">https://t.co/HDt5B4Swe4</a>.</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1493920435997659145?ref_src=twsrc%5Etfw">February
    16, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1493920435997659145'
  tweet_text: 'Modern Fortran Reference Card of Michael Goerz crams a lot of good
    information in 2 pages

    https://t.co/QzVEZpfe1Z, as does the 5-page Quick Reference/Cheat Sheet of Ben
    Evans https://t.co/HDt5B4Swe4.'
- datetime: 2022-02-15 07:56:00
  file_links:
  - target: ./allocatable_bounds.f90
    text: allocatable_bounds.f90
  ft_topic_id: array-arguments
  title: Bounds of an allocatable array are preserved when passed to an allocatable,
    intent(in) or intent(in out) argument.
  tweet_created_at: '2022-02-15T12:56:35.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The bounds
    of an allocatable array are preserved when passed to an allocatable, intent(in)
    or intent(in out) argument in a procedure. The same is true for intent(in) or
    intent(in out) pointer array arguments.<a href="https://t.co/2S43P7demh">pic.twitter.com/2S43P7demh</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1493569929668354051?ref_src=twsrc%5Etfw">February
    15, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1493569929668354051'
  tweet_text: 'The bounds of an allocatable array are preserved when passed to an
    allocatable, intent(in) or intent(in out) argument in a procedure. The same is
    true for intent(in) or intent(in out) pointer array arguments.

    https://t.co/2S43P7demh'
- datetime: 2022-02-14 08:24:00
  file_links:
  - target: ./lbound_assumed_shape.f90
    text: lbound_assumed_shape.f90
  ft_topic_id: array-arguments
  title: Bounds of a derived type array component are preserved when passed to procedure.
  tweet_created_at: '2022-02-14T13:24:53.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The bounds
    of a derived type array component are preserved when the whole derived type is
    passed to a procedure, as shown in the code of the previous tip.</p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1493214664754438149?ref_src=twsrc%5Etfw">February
    14, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1493214664754438149'
  tweet_text: The bounds of a derived type array component are preserved when the
    whole derived type is passed to a procedure, as shown in the code of the previous
    tip.
- datetime: 2022-02-14 07:55:00
  file_links:
  - target: ./lbound_assumed_shape.f90
    text: lbound_assumed_shape.f90
  ft_topic_id: array-arguments
  title: Array lower bounds are not preserved when passed as assumed shape argument.
  tweet_created_at: '2022-02-14T12:55:42.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The lower
    bounds of an assumed shape dummy argument are 1 or the lower bounds specified
    in the procedure declaration, regardless of the lower bounds of actual argument
    in the caller. The lower bounds can be passed as arguments.<a href="https://t.co/wRauYCI75B">pic.twitter.com/wRauYCI75B</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1493207320184164352?ref_src=twsrc%5Etfw">February
    14, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1493207320184164352'
  tweet_text: 'The lower bounds of an assumed shape dummy argument are 1 or the lower
    bounds specified in the procedure declaration, regardless of the lower bounds
    of actual argument in the caller. The lower bounds can be passed as arguments.

    https://t.co/wRauYCI75B'
- datetime: 2022-02-13 07:52:00
  file_links:
  - target: ./reverse.f90
    text: reverse.f90
  ft_topic_id: arrays
  title: How to reverse an array or character string
  tweet_created_at: '2022-02-13T12:52:27.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Write<br><br>v
    = v(size(v):1:-1)<br><br>to reverse a 1-D array v with lower bound 1, otherwise<br><br>v
    = v(ubound(v):lbound(v):-1)<br><br>v(::-1) is a zero-size array unless size(v)
    = 1. A character string can be reversed with the function shown. <a href="https://t.co/ngOUfICgvf">pic.twitter.com/ngOUfICgvf</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1492844114492243971?ref_src=twsrc%5Etfw">February
    13, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1492844114492243971'
  tweet_text: 'Write


    v = v(size(v):1:-1)


    to reverse a 1-D array v with lower bound 1, otherwise


    v = v(ubound(v):lbound(v):-1)


    v(::-1) is a zero-size array unless size(v) = 1. A character string can be reversed
    with the function shown. https://t.co/ngOUfICgvf'
- datetime: 2022-02-12 08:23:00
  file_links:
  - target: ./compare_character.f90
    text: compare_character.f90
  ft_topic_id: character-variables
  title: Character variables can be compared like numerical variables.
  tweet_created_at: '2022-02-12T13:23:23.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The comparison
    operators &lt; &lt;= etc. or .lt. .le. etc. can be used for character variables,
    usually with the ASCII collating sequence. The lexical comparison functions LLT,
    LLE, LGE, LGT use this sequence. MINVAL, MINLOC, FINDLOC work on arrays of strings.
    <a href="https://t.co/fymX8ecd4j">pic.twitter.com/fymX8ecd4j</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1492489511821004805?ref_src=twsrc%5Etfw">February
    12, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1492489511821004805'
  tweet_text: The comparison operators &lt; &lt;= etc. or .lt. .le. etc. can be used
    for character variables, usually with the ASCII collating sequence. The lexical
    comparison functions LLT, LLE, LGE, LGT use this sequence. MINVAL, MINLOC, FINDLOC
    work on arrays of strings. https://t.co/fymX8ecd4j
- datetime: 2022-02-11 07:34:00
  file_links:
  - target: ./write_char.f90
    text: write_char.f90
  ft_topic_id: character-variables
  title: Internal write to character variable too small to hold output causes run-time
    error.
  tweet_created_at: '2022-02-11T12:34:50.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A character
    variable can be assigned to a character variable with smaller or larger LEN, resulting
    in padding with blanks or truncation, but an internal write to a character variable
    that is too small to hold the output will cause a run-time error. <a href="https://t.co/4wW4hTYTHS">pic.twitter.com/4wW4hTYTHS</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1492114908351283206?ref_src=twsrc%5Etfw">February
    11, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1492114908351283206'
  tweet_text: "A character variable can be assigned to a character variable with smaller\
    \ or larger LEN, resulting in padding with blanks or truncation, but an internal\
    \ write to a character variable that is too small to hold the output will cause\
    \ a run-time error. \nhttps://t.co/4wW4hTYTHS"
- datetime: 2022-02-10 07:43:00
  file_links:
  - target: ./internal_read_write.f90
    text: internal_read_write.f90
  ft_topic_id: character-variables
  title: Convert from strings to numbers and the reverse using internal READ and WRITE.
  tweet_created_at: '2022-02-10T12:43:19.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Type conversion
    from strings to numbers and vice-versa is most commonly done with internal reads
    and writes. You can read from and write to a character variable as with a file.
    You cannot write to an unallocated deferred-length character variable.<a href="https://t.co/wE0gLrf41d">pic.twitter.com/wE0gLrf41d</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1491754652030885888?ref_src=twsrc%5Etfw">February
    10, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1491754652030885888'
  tweet_text: 'Type conversion from strings to numbers and vice-versa is most commonly
    done with internal reads and writes. You can read from and write to a character
    variable as with a file. You cannot write to an unallocated deferred-length character
    variable.

    https://t.co/wE0gLrf41d'
- datetime: 2022-02-09 06:55:00
  file_links:
  - target: ./spread.f90
    text: spread.f90
  ft_topic_id: arrays
  title: spread(source, dim, ncopies) copies a SOURCE array NCOPIES times along dimension
    DIM.
  tweet_created_at: '2022-02-09T11:55:03.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">spread(source,
    dim, ncopies) copies a SOURCE array NCOPIES times along dimension DIM, creating
    an array one rank higher than SOURCE. It can be applied to a vector to get a result
    that is conformable with a matrix.<a href="https://t.co/gZRvWZckGz">pic.twitter.com/gZRvWZckGz</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1491380119616700417?ref_src=twsrc%5Etfw">February
    9, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1491380119616700417'
  tweet_text: 'spread(source, dim, ncopies) copies a SOURCE array NCOPIES times along
    dimension DIM, creating an array one rank higher than SOURCE. It can be applied
    to a vector to get a result that is conformable with a matrix.

    https://t.co/gZRvWZckGz'
- datetime: 2022-02-08 07:11:00
  file_links:
  - target: ./concatenate.f90
    text: concatenate.f90
  ft_topic_id: arrays
  title: Concatenate arrays and scalars in an array constructor []
  tweet_created_at: '2022-02-08T12:11:53.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A mix of
    arrays and scalars can be concatenated to a 1D array by putting them in an array
    constructor. Each array is flattened in column-major order to a 1D array.<br>Columns
    can be added to a matrix using RESHAPE on a concatenation. <a href="https://t.co/43bpTzHDTy">pic.twitter.com/43bpTzHDTy</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1491021968799600641?ref_src=twsrc%5Etfw">February
    8, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1491021968799600641'
  tweet_text: "A mix of arrays and scalars can be concatenated to a 1D array by putting\
    \ them in an array constructor. Each array is flattened in column-major order\
    \ to a 1D array.\nColumns can be added to a matrix using RESHAPE on a concatenation.\
    \ \nhttps://t.co/43bpTzHDTy"
- datetime: 2022-02-07 07:38:00
  file_links:
  - target: ./get_command.f90
    text: get_command.f90
  ft_topic_id: environment-variables
  title: get_command() and get_command_argument() get command line arguments.
  tweet_created_at: '2022-02-07T12:38:02.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In Fortran
    2003, get_command(command) and<br>get_command_argument(number,value) are subroutines
    to get the entire command line or the nth argument as character variables, and
    the function command_argument_count() returns the number of arguments.<a href="https://t.co/TfCZ8dzn5R">pic.twitter.com/TfCZ8dzn5R</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1490666160504905730?ref_src=twsrc%5Etfw">February
    7, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1490666160504905730'
  tweet_text: 'In Fortran 2003, get_command(command) and

    get_command_argument(number,value) are subroutines to get the entire command line
    or the nth argument as character variables, and the function command_argument_count()
    returns the number of arguments.

    https://t.co/TfCZ8dzn5R'
- datetime: 2022-02-06 09:21:00
  file_links:
  - target: ./get_env.f90
    text: get_env.f90
  ft_topic_id: environment-variables
  title: Demonstrate subroutine get_environment_variable(name,value) of Fortran 2003.
  tweet_created_at: '2022-02-06T14:21:15.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Subroutine
    get_environment_variable(name,value) of Fortran 2003 returns the value of an environment
    variable or a blank string if it does not exist. The user<br>and computer name
    can be added to results, and whether the OS is Windows or Unix can be queried.<a
    href="https://t.co/ctMhn0nXwl">pic.twitter.com/ctMhn0nXwl</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1490329749578731530?ref_src=twsrc%5Etfw">February
    6, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1490329749578731530'
  tweet_text: 'Subroutine get_environment_variable(name,value) of Fortran 2003 returns
    the value of an environment variable or a blank string if it does not exist. The
    user

    and computer name can be added to results, and whether the OS is Windows or Unix
    can be queried.

    https://t.co/ctMhn0nXwl'
- datetime: 2022-02-05 08:23:00
  file_links:
  - target: ./xpi.f90
    text: xpi.f90
  ft_topic_id: environment-variables
  title: Document results with compiler_version(), compiler_options(), and other intrinsics.
  tweet_created_at: '2022-02-05T13:23:25.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">To document
    results use get_command_argument(0,name) to get the<br>executable name, compiler_version()
    and compiler_options() to get the compiler and options used, date_and_time() for
    the time, and cpu_time() or system_clock() for time elapsed.<a href="https://t.co/ag8p4ipIqN">pic.twitter.com/ag8p4ipIqN</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1489952805649588226?ref_src=twsrc%5Etfw">February
    5, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1489952805649588226'
  tweet_text: 'To document results use get_command_argument(0,name) to get the

    executable name, compiler_version() and compiler_options() to get the compiler
    and options used, date_and_time() for the time, and cpu_time() or system_clock()
    for time elapsed.

    https://t.co/ag8p4ipIqN'
- datetime: 2022-02-04 07:44:00
  file_links: []
  ft_topic_id: environment-variables
  title: Execute_command_line() can call gnuplot to display a plot during a run.
  tweet_created_at: '2022-02-04T12:44:19.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://t.co/UW5eVxka7J">https://t.co/UW5eVxka7J</a>
    <br>execute_command_line() can call gnuplot to display a plot during a run, as
    done in GitHub project ogpf. Another use is execute_command_line(&quot;ls data/*.csv
    &gt; list.txt&quot;) to create a list of files to process.</p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1489580579653918729?ref_src=twsrc%5Etfw">February
    4, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1489580579653918729'
  tweet_text: "https://t.co/UW5eVxka7J \nexecute_command_line() can call gnuplot to\
    \ display a plot during a run, as done in GitHub project ogpf. Another use is\
    \ execute_command_line(\"ls data/*.csv &gt; list.txt\") to create a list of files\
    \ to process."
- datetime: 2022-02-03 07:23:00
  file_links:
  - target: ./execute.f90
    text: execute.f90
  ft_topic_id: environment-variables
  title: Execute_command_line() to pass a command to the shell.
  tweet_created_at: '2022-02-03T12:23:17.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">execute_command_line(command
    [,wait,exitstat]) is a Fortran 2008 subroutine that issues a command to the shell
    and returns the exit code exitstat of the command. The program pauses until the
    command is finished unless wait is PRESENT and .FALSE.<a href="https://t.co/XF3s5THxv8">pic.twitter.com/XF3s5THxv8</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1489212898777964545?ref_src=twsrc%5Etfw">February
    3, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1489212898777964545'
  tweet_text: 'execute_command_line(command [,wait,exitstat]) is a Fortran 2008 subroutine
    that issues a command to the shell and returns the exit code exitstat of the command.
    The program pauses until the command is finished unless wait is PRESENT and .FALSE.

    https://t.co/XF3s5THxv8'
- datetime: 2022-02-02 07:00:00
  file_links: []
  ft_topic_id: fortran-resources
  title: Mistakes in Fortran 90 Programs That Might Surprise You, by Szymanski
  tweet_created_at: '2022-02-02T12:00:33.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Here is a
    a survey of Fortran 90 pitfalls. Most are still relevant, but now<br>(1) Derived
    types can have allocatable components.<br>(2) A pointer can be initialized to
    null() in the<br>declaration.<br>(3) Stream I/O is an alternative to record-based
    I/O.<a href="https://t.co/P4tRJyN0Y6">https://t.co/P4tRJyN0Y6</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1488844789575569408?ref_src=twsrc%5Etfw">February
    2, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1488844789575569408'
  tweet_text: 'Here is a a survey of Fortran 90 pitfalls. Most are still relevant,
    but now

    (1) Derived types can have allocatable components.

    (2) A pointer can be initialized to null() in the

    declaration.

    (3) Stream I/O is an alternative to record-based I/O.

    https://t.co/P4tRJyN0Y6'
- datetime: 2022-02-01 07:41:00
  file_links:
  - target: ./truloc.f90
    text: truloc.f90
  ft_topic_id: arrays
  title: Setting the values of an array section
  tweet_created_at: '2022-02-01T12:41:17.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran array
    indices must be integers, so you cannot write<br><br>v(v&lt;0) = -1<br><br>as
    in R, but alternatives are<br><br>where (v&lt;0) v = -1<br>v = merge(-1,v,v&lt;0)<br>v(truloc(v&lt;0))
    = -1<br><br>where truloc is a user function that creates a vector subscript from
    a logical mask.<a href="https://t.co/Z8BM3iUNOF">pic.twitter.com/Z8BM3iUNOF</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1488492649166295043?ref_src=twsrc%5Etfw">February
    1, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1488492649166295043'
  tweet_text: 'Fortran array indices must be integers, so you cannot write


    v(v&lt;0) = -1


    as in R, but alternatives are


    where (v&lt;0) v = -1

    v = merge(-1,v,v&lt;0)

    v(truloc(v&lt;0)) = -1


    where truloc is a user function that creates a vector subscript from a logical
    mask.

    https://t.co/Z8BM3iUNOF'
- datetime: 2022-01-31 07:51:00
  file_links:
  - target: ./vector_subscript.f90
    text: vector_subscript.f90
  ft_topic_id: arrays
  title: Vector subscript can be used for non-contiguous array sections.
  tweet_created_at: '2022-01-31T12:51:03.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A vector
    subscript can be used for non-contiguous array sections, for example <br><br>real
    :: x(5)<br>print*,x([2,4])<br><br>An array section with a vector subscript cannot
    be passed as an intent(out) or intent(in out) argument. <a href="https://t.co/kTdDGksivR">pic.twitter.com/kTdDGksivR</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1488132722761609216?ref_src=twsrc%5Etfw">January
    31, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1488132722761609216'
  tweet_text: "A vector subscript can be used for non-contiguous array sections, for\
    \ example \n\nreal :: x(5)\nprint*,x([2,4])\n\nAn array section with a vector\
    \ subscript cannot be passed as an intent(out) or intent(in out) argument. https://t.co/kTdDGksivR"
- datetime: 2022-01-30 09:13:00
  file_links: []
  ft_topic_id: fortran-resources
  title: Polyhedron suggested compiler optimization options and Fortran 95 benchmarks
  tweet_created_at: '2022-01-30T14:13:57.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Polyhedron
    has suggested compiler options for optimization and compared compiler speed on
    some Fortran 95 codes. <a href="https://t.co/3zrgBY9TPM">https://t.co/3zrgBY9TPM</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1487791193710866437?ref_src=twsrc%5Etfw">January
    30, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1487791193710866437'
  tweet_text: "Polyhedron has suggested compiler options for optimization and compared\
    \ compiler speed on some Fortran 95 codes. \nhttps://t.co/3zrgBY9TPM"
- datetime: 2022-01-29 17:43:00
  file_links: []
  ft_topic_id: fortran-resources
  title: Google foo filetype:f90 or foo filetype:f to find Fortran code with foo.
  tweet_created_at: '2022-01-29T22:43:38.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Since Fortran
    source files usually have the .f90 or .f suffix, you can Google, for example,
    &quot;finite element&quot; filetype:f90 and &quot;finite element&quot; filetype:f
    to find finite element codes.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1487557071818084357?ref_src=twsrc%5Etfw">January
    29, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1487557071818084357'
  tweet_text: Since Fortran source files usually have the .f90 or .f suffix, you can
    Google, for example, "finite element" filetype:f90 and "finite element" filetype:f
    to find finite element codes.
- datetime: 2022-01-29 08:02:00
  file_links:
  - target: ./trapezoid.f90
    text: trapezoid.f90
  ft_topic_id: procedures
  title: A procedure can have an argument that is another PROCEDURE with an INTERFACE.
  tweet_created_at: '2022-01-29T13:02:27.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A procedure
    can have an argument that is another PROCEDURE with an INTERFACE, which is useful
    for writing a procedure that minimizes or integrates a function.<a href="https://t.co/NtVYKTbltS">pic.twitter.com/NtVYKTbltS</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1487410814919356419?ref_src=twsrc%5Etfw">January
    29, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1487410814919356419'
  tweet_text: 'A procedure can have an argument that is another PROCEDURE with an
    INTERFACE, which is useful for writing a procedure that minimizes or integrates
    a function.

    https://t.co/NtVYKTbltS'
- datetime: 2022-01-28 10:26:00
  file_links:
  - target: ./ieee_exceptions.f90
    text: ieee_exceptions.f90
  ft_topic_id: floating-point-arithmetic
  title: Call ieee_set_halting_mode() to set floating point conditions that halt program.
  tweet_created_at: '2022-01-28T15:26:13.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Call ieee_set_halting_mode()
    of F2003 module ieee_exceptions to set the floating point conditions (NaN, overflow,
    underflow, divide-by-zero, inexact) that will halt a program. Similar compiler
    options include <br>gfortran -ffpe-trap=invalid<br>ifort -fpe0.<a href="https://t.co/gHjgCZMQU0">pic.twitter.com/gHjgCZMQU0</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1487084606780325889?ref_src=twsrc%5Etfw">January
    28, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1487084606780325889'
  tweet_text: "Call ieee_set_halting_mode() of F2003 module ieee_exceptions to set\
    \ the floating point conditions (NaN, overflow, underflow, divide-by-zero, inexact)\
    \ that will halt a program. Similar compiler options include \ngfortran -ffpe-trap=invalid\n\
    ifort -fpe0.\nhttps://t.co/gHjgCZMQU0"
- datetime: 2022-01-27 09:22:00
  file_links:
  - target: ./ieee_arithmetic.f90
    text: ieee_arithmetic.f90
  ft_topic_id: floating-point-arithmetic
  title: IEEE_ARITHMETIC module has functions to test numerical conditions.
  tweet_created_at: '2022-01-27T14:22:15.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran 2003
    introduced an ieee_arithmetic module with elemental functions ieee_is_nan, ieee_is_finite,
    <br>ieee_is_negative, and ieee_is_normal, which test for those conditions. They
    have a real argument and logical RESULT.<a href="https://t.co/82On9iDxXQ">pic.twitter.com/82On9iDxXQ</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1486706121335263246?ref_src=twsrc%5Etfw">January
    27, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1486706121335263246'
  tweet_text: "Fortran 2003 introduced an ieee_arithmetic module with elemental functions\
    \ ieee_is_nan, ieee_is_finite, \nieee_is_negative, and ieee_is_normal, which test\
    \ for those conditions. They have a real argument and logical RESULT.\nhttps://t.co/82On9iDxXQ"
- datetime: 2022-01-26 07:20:00
  file_links:
  - target: ./definable_arg.f90
    text: definable_arg.f90
  ft_topic_id: procedures
  title: Dummy argument that is changed must be definable in the caller.
  tweet_created_at: '2022-01-26T12:20:20.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If a dummy
    argument without the VALUE attribute is changed in a procedure, the actual argument
    must be definable in the caller -- a variable, not a constant or expression.<a
    href="https://t.co/cpxhod0nN7">pic.twitter.com/cpxhod0nN7</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1486313053092208645?ref_src=twsrc%5Etfw">January
    26, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1486313053092208645'
  tweet_text: 'If a dummy argument without the VALUE attribute is changed in a procedure,
    the actual argument must be definable in the caller -- a variable, not a constant
    or expression.

    https://t.co/cpxhod0nN7'
- datetime: 2022-01-25 07:47:00
  file_links:
  - target: ./intent_out_allocatable.f90
    text: intent_out_allocatable.f90
  ft_topic_id: procedures
  title: ALLOCATABLE INTENT(OUT) argument is deallocated.
  tweet_created_at: '2022-01-25T12:47:40.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">An ALLOCATABLE
    INTENT(OUT) dummy argument is deallocated at the beginning of a procedure, as
    are the ALLOCATABLE components of an INTENT(OUT) derived type.<a href="https://t.co/gtBVzGD0nv">pic.twitter.com/gtBVzGD0nv</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1485957543990018053?ref_src=twsrc%5Etfw">January
    25, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1485957543990018053'
  tweet_text: 'An ALLOCATABLE INTENT(OUT) dummy argument is deallocated at the beginning
    of a procedure, as are the ALLOCATABLE components of an INTENT(OUT) derived type.

    https://t.co/gtBVzGD0nv'
- datetime: 2022-01-24 07:45:00
  file_links:
  - target: ./intent_out_undefined.f90
    text: intent_out_undefined.f90
  ft_topic_id: procedures
  title: An INTENT(OUT) argument is undefined at the beginning of a procedure
  tweet_created_at: '2022-01-24T12:45:45.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A non-allocatable
    INTENT(OUT) dummy argument is undefined at the beginning of a procedure. Although
    most compilers will set it to the value of the actual argument, you should declare
    the argument <br>INTENT(IN OUT) to mandate this behavior. <a href="https://t.co/3dLZA7aWwP">pic.twitter.com/3dLZA7aWwP</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1485594671300632576?ref_src=twsrc%5Etfw">January
    24, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1485594671300632576'
  tweet_text: "A non-allocatable INTENT(OUT) dummy argument is undefined at the beginning\
    \ of a procedure. Although most compilers will set it to the value of the actual\
    \ argument, you should declare the argument \nINTENT(IN OUT) to mandate this behavior.\
    \ https://t.co/3dLZA7aWwP"
- datetime: 2022-01-23 07:58:00
  file_links:
  - target: ./warnings.f90
    text: warnings.f90
  ft_topic_id: style
  title: Turn compiler warnings into errors to force code defects to be fixed.
  tweet_created_at: '2022-01-23T12:58:07.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">To ensure
    that code defects are fixed, use options to turn the relevant compiler warnings
    into errors in the build system. For example<br><br>gfortran -Werror=unused-variable
    -Werror=unused-function<br><br>rejects the code below. Mere warnings are often
    ignored.<a href="https://t.co/OiYA1EWwcj">pic.twitter.com/OiYA1EWwcj</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1485235396179079173?ref_src=twsrc%5Etfw">January
    23, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1485235396179079173'
  tweet_text: 'To ensure that code defects are fixed, use options to turn the relevant
    compiler warnings into errors in the build system. For example


    gfortran -Werror=unused-variable -Werror=unused-function


    rejects the code below. Mere warnings are often ignored.

    https://t.co/OiYA1EWwcj'
- datetime: 2022-01-22 08:05:00
  file_links:
  - target: ./value.f90
    text: value.f90
  ft_topic_id: procedures
  title: VALUE attribute for procedure arguments introduced in Fortran 2003
  tweet_created_at: '2022-01-22T13:05:13.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If an argument
    has the VALUE attribute, added in Fortran 2003, changes to the dummy argument
    in the procedure do not change the actual argument in the the caller.<a href="https://t.co/SVdZjbaw5v">pic.twitter.com/SVdZjbaw5v</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1484874794352918528?ref_src=twsrc%5Etfw">January
    22, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1484874794352918528'
  tweet_text: 'If an argument has the VALUE attribute, added in Fortran 2003, changes
    to the dummy argument in the procedure do not change the actual argument in the
    the caller.

    https://t.co/SVdZjbaw5v'
- datetime: 2022-01-21 08:23:00
  file_links:
  - target: ./intrinsic.f90
    text: intrinsic.f90
  ft_topic_id: procedures
  title: Use INTRINSIC to specify that compiler-provided procedures and modules are
    referenced
  tweet_created_at: '2022-01-21T13:23:50.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">You can supply
    procedures and modules with the same names as intrinsics. To specify that the
    intrinsic procedure or module provided by the compiler is used write<br><br>use,
    intrinsic :: iso_fortran_env<br>intrinsic :: sin <a href="https://t.co/NydDt6a9eD">pic.twitter.com/NydDt6a9eD</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1484517091738886147?ref_src=twsrc%5Etfw">January
    21, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1484517091738886147'
  tweet_text: "You can supply procedures and modules with the same names as intrinsics.\
    \ To specify that the intrinsic procedure or module provided by the compiler is\
    \ used write\n\nuse, intrinsic :: iso_fortran_env\nintrinsic :: sin \nhttps://t.co/NydDt6a9eD"
- datetime: 2022-01-20 07:12:00
  file_links:
  - target: ./protected.f90
    text: protected.f90
  ft_topic_id: modules
  title: PROTECTED module variables cannot be changed outside the module.
  tweet_created_at: '2022-01-20T12:12:29.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If a module
    variable is PROTECTED, an attribute introduced in Fortran 2003, it can only be
    modified by a procedure in the module where it is declared. It is useful for PUBLIC
    module variables that can be accessed but should not changed outside the module.<a
    href="https://t.co/HoABECoBdO">pic.twitter.com/HoABECoBdO</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1484136749924245509?ref_src=twsrc%5Etfw">January
    20, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1484136749924245509'
  tweet_text: 'If a module variable is PROTECTED, an attribute introduced in Fortran
    2003, it can only be modified by a procedure in the module where it is declared.
    It is useful for PUBLIC module variables that can be accessed but should not changed
    outside the module.

    https://t.co/HoABECoBdO'
- datetime: 2022-01-19 07:09:00
  file_links: []
  ft_topic_id: arrays
  title: Array constructor with [] was introduced in Fortran 2003. Still valid is
    (//)
  tweet_created_at: '2022-01-19T12:09:23.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Using []
    for an array constructor was introduced in Fortran 2003, although many Fortran
    95 compilers supported it. The older syntax (//) is still valid.<br><br>print*,
    all([4,9] == (/4,9/)) ! T</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1483773578839474180?ref_src=twsrc%5Etfw">January
    19, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1483773578839474180'
  tweet_text: 'Using [] for an array constructor was introduced in Fortran 2003, although
    many Fortran 95 compilers supported it. The older syntax (//) is still valid.


    print*, all([4,9] == (/4,9/)) ! T'
- datetime: 2022-01-18 08:26:00
  file_links:
  - target: ./random_normal.f90
    text: random_normal.f90
  ft_topic_id: procedures
  title: Impure elemental procedure can be used to generate array of non-uniform variates
  tweet_created_at: '2022-01-18T13:26:26.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The RANDOM_NUMBER
    intrinsic returns a scalar or an array of uniform variates. An impure elemental
    subroutine can do the same for normal variates, given an algorithm to generate
    a single normal variate, possibly using RANDOM_NUMBER.<a href="https://t.co/udthsbMT7T">pic.twitter.com/udthsbMT7T</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1483430581232967684?ref_src=twsrc%5Etfw">January
    18, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1483430581232967684'
  tweet_text: 'The RANDOM_NUMBER intrinsic returns a scalar or an array of uniform
    variates. An impure elemental subroutine can do the same for normal variates,
    given an algorithm to generate a single normal variate, possibly using RANDOM_NUMBER.

    https://t.co/udthsbMT7T'
- datetime: 2022-01-17 08:07:00
  file_links:
  - target: ./impure_elemental.f90
    text: impure_elemental.f90
  ft_topic_id: procedures
  title: Fortran 2008 introduced IMPURE ELEMENTAL procedures
  tweet_created_at: '2022-01-17T13:07:38.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran 2008
    allows procedures to be labeled IMPURE ELEMENTAL. Such procedures can do external
    I/O and have a STOP or ERROR STOP statement. They can simulate a loop over a collection.
    The plain ELEMENTAL designation means the same as PURE ELEMENTAL.<a href="https://t.co/e5Z6K7MvvC">pic.twitter.com/e5Z6K7MvvC</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1483063464562204672?ref_src=twsrc%5Etfw">January
    17, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1483063464562204672'
  tweet_text: 'Fortran 2008 allows procedures to be labeled IMPURE ELEMENTAL. Such
    procedures can do external I/O and have a STOP or ERROR STOP statement. They can
    simulate a loop over a collection. The plain ELEMENTAL designation means the same
    as PURE ELEMENTAL.

    https://t.co/e5Z6K7MvvC'
- datetime: 2022-01-16 08:42:00
  file_links:
  - target: https://github.com/Beliavsky/Fortran-Tools
    text: list
  ft_topic_id: fortran-resources
  title: List of Fortran compilers, build tools, text editors, etc.
  tweet_created_at: '2022-01-16T13:42:22.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">I keep a
    list of Fortran compilers, build tools, text editors and plug-ins, linters, preprocessors,
    translators to and from Fortran, profilers, tools for refactoring, interoperability,
    and automatic documentation, and unit testing frameworks.<a href="https://t.co/fnWwF04z5D">https://t.co/fnWwF04z5D</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1482709817466707969?ref_src=twsrc%5Etfw">January
    16, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1482709817466707969'
  tweet_text: 'I keep a list of Fortran compilers, build tools, text editors and plug-ins,
    linters, preprocessors, translators to and from Fortran, profilers, tools for
    refactoring, interoperability, and automatic documentation, and unit testing frameworks.

    https://t.co/fnWwF04z5D'
- datetime: 2022-01-16 07:14:00
  file_links:
  - target: ./iomsg.f90
    text: iomsg.f90
  - target: ./iomsg_data_file.txt
    text: data_file
  ft_topic_id: input-and-output
  title: Use iostat and iomsg to handle READ errors
  tweet_created_at: '2022-01-16T12:14:12.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The Fortran
    2003 module iso_fortran_env has constants <br><br>iostat_eor -- end of record<br>iostat_end
    -- end of file<br><br>to which the iostat of a READ statement will be set if that
    error occurs. READ also has an iomsg specifier returning a text error message.<a
    href="https://t.co/Rm6DmsKPP9">pic.twitter.com/Rm6DmsKPP9</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1482687630877892608?ref_src=twsrc%5Etfw">January
    16, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1482687630877892608'
  tweet_text: "The Fortran 2003 module iso_fortran_env has constants \n\niostat_eor\
    \ -- end of record\niostat_end -- end of file\n\nto which the iostat of a READ\
    \ statement will be set if that error occurs. READ also has an iomsg specifier\
    \ returning a text error message.\nhttps://t.co/Rm6DmsKPP9"
- datetime: 2022-01-15 07:29:00
  file_links:
  - target: ./imports.f90
    text: imports.f90
  ft_topic_id: modules
  title: An unqualified USE foo statement imports public entities defined in foo and
    what foo imported.
  tweet_created_at: '2022-01-15T12:29:06.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">use foo<br><br>imports
    not only the public entities defined in module foo but also the entities that
    foo imports from module bar. To avoid inadvertent imports and clarify what is
    imported, write<br><br>use foo, only: &lt;imports&gt;<br>use bar, only: &lt;imports&gt;
    ! if any<a href="https://t.co/9s78tF1V5Q">pic.twitter.com/9s78tF1V5Q</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1482328990798987266?ref_src=twsrc%5Etfw">January
    15, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1482328990798987266'
  tweet_text: 'use foo


    imports not only the public entities defined in module foo but also the entities
    that foo imports from module bar. To avoid inadvertent imports and clarify what
    is imported, write


    use foo, only: &lt;imports&gt;

    use bar, only: &lt;imports&gt; ! if any

    https://t.co/9s78tF1V5Q'
- datetime: 2022-01-14 07:45:00
  file_links:
  - target: ./private.f90
    text: private.f90
  ft_topic_id: modules
  title: Module entities are PUBLIC by default.
  tweet_created_at: '2022-01-14T12:45:32.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Module entities
    are PUBLIC by default, but if a blank PRIVATE statement is used, any public entities
    must be labeled so explicitly. Doing this clarifies what is exported from the
    module.<a href="https://t.co/4eJZDbU7CZ">pic.twitter.com/4eJZDbU7CZ</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1481970740475932676?ref_src=twsrc%5Etfw">January
    14, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1481970740475932676'
  tweet_text: 'Module entities are PUBLIC by default, but if a blank PRIVATE statement
    is used, any public entities must be labeled so explicitly. Doing this clarifies
    what is exported from the module.

    https://t.co/4eJZDbU7CZ'
- datetime: 2022-01-13 07:01:00
  file_links:
  - target: ./rename.f90
    text: rename.f90
  ft_topic_id: modules
  title: How to rename an imported module entity
  tweet_created_at: '2022-01-13T12:01:43.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">An imported
    module entity can be renamed with the syntax<br><br>use mod, only: local_name
    =&gt; use_name<br><br>or<br><br>use mod, local_name =&gt; use_name<br><br>This
    is necessary when importing procedures with the same name, not in interfaces,
    from different<br>modules. <a href="https://t.co/89mRx3jsWV">pic.twitter.com/89mRx3jsWV</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1481597325499842563?ref_src=twsrc%5Etfw">January
    13, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1481597325499842563'
  tweet_text: 'An imported module entity can be renamed with the syntax


    use mod, only: local_name =&gt; use_name


    or


    use mod, local_name =&gt; use_name


    This is necessary when importing procedures with the same name, not in interfaces,
    from different

    modules. https://t.co/89mRx3jsWV'
- datetime: 2022-01-12 07:52:00
  file_links:
  - target: ./shared_interface.f90
    text: shared_interface.f90
  ft_topic_id: modules
  title: Use the same name for analogous procedures defined in different modules using
    an INTERFACE
  tweet_created_at: '2022-01-12T12:52:41.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Using an
    INTERFACE, one can use the same name for analogous procedures that operate on
    derived types defined in different modules, for example str to convert a derived
    type to a string.<a href="https://t.co/VeqDzgg5AE">pic.twitter.com/VeqDzgg5AE</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1481247763048407042?ref_src=twsrc%5Etfw">January
    12, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1481247763048407042'
  tweet_text: 'Using an INTERFACE, one can use the same name for analogous procedures
    that operate on derived types defined in different modules, for example str to
    convert a derived type to a string.

    https://t.co/VeqDzgg5AE'
- datetime: 2022-01-11 08:26:00
  file_links:
  - target: ./arguments.f90
    text: arguments.f90
  ft_topic_id: procedures
  title: Procedures can be called with a mix of named and positional arguments.
  tweet_created_at: '2022-01-11T13:26:19.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Procedures
    can be called with a mix of named and positional arguments, but positional arguments
    cannot follow named ones. Naming arguments makes it easier to add arguments without
    breaking code. It&#39;s good to<br>name OPTIONAL arguments.<a href="https://t.co/rIl2jM0DTA">pic.twitter.com/rIl2jM0DTA</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1480893840068390913?ref_src=twsrc%5Etfw">January
    11, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1480893840068390913'
  tweet_text: 'Procedures can be called with a mix of named and positional arguments,
    but positional arguments cannot follow named ones. Naming arguments makes it easier
    to add arguments without breaking code. It''s good to

    name OPTIONAL arguments.

    https://t.co/rIl2jM0DTA'
- datetime: 2022-01-10 11:59:00
  file_links: []
  ft_topic_id: procedures
  title: UnALLOCATED variable passed to a procedure is not PRESENT there.
  tweet_created_at: '2022-01-10T16:59:31.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A variable
    that is not ALLOCATED, when passed as an OPTIONAL, non-allocatable argument to
    a procedure, is considered not PRESENT there. This Fortran 2008 feature can simplify
    code. <a href="https://t.co/TdSd5Jv0Pt">https://t.co/TdSd5Jv0Pt</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1480585104997163018?ref_src=twsrc%5Etfw">January
    10, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1480585104997163018'
  tweet_text: A variable that is not ALLOCATED, when passed as an OPTIONAL, non-allocatable
    argument to a procedure, is considered not PRESENT there. This Fortran 2008 feature
    can simplify code. https://t.co/TdSd5Jv0Pt
- datetime: 2022-01-09 08:00:00
  file_links:
  - target: ./dimension.f90
    text: dimension.f90
  ft_topic_id: arrays
  title: DIMENSION can be used to declare several arrays of the same SHAPE
  tweet_created_at: '2022-01-09T13:00:39.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">DIMENSION
    can be used to declare several arrays of the same SHAPE, which can be overridden
    on the same line.<br><br>real, dimension(3,4) :: x, y, z(5,6)<br><br>is legal
    but should be written<br><br>real, dimension(3,4) :: x, y<br>real :: z(5,6)<br><br>for
    clarity.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1480162604559523840?ref_src=twsrc%5Etfw">January
    9, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1480162604559523840'
  tweet_text: 'DIMENSION can be used to declare several arrays of the same SHAPE,
    which can be overridden on the same line.


    real, dimension(3,4) :: x, y, z(5,6)


    is legal but should be written


    real, dimension(3,4) :: x, y

    real :: z(5,6)


    for clarity.'
- datetime: 2022-01-08 08:23:00
  file_links:
  - target: ./optional_use.f90
    text: optional_use.f90
  ft_topic_id: procedures
  title: Propagation of an optional argument
  tweet_created_at: '2022-01-08T13:23:36.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A procedure
    with an OPTIONAL argument can call a procedure with that argument if it is OPTIONAL
    there too. The PRESENT status of the argument propagates to called procedures.
    The optval function of the Fortran stdlib project exploits this. <a href="https://t.co/amhSL1cbY7">pic.twitter.com/amhSL1cbY7</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1479805991382360066?ref_src=twsrc%5Etfw">January
    8, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1479805991382360066'
  tweet_text: A procedure with an OPTIONAL argument can call a procedure with that
    argument if it is OPTIONAL there too. The PRESENT status of the argument propagates
    to called procedures. The optval function of the Fortran stdlib project exploits
    this. https://t.co/amhSL1cbY7
- datetime: 2022-01-07 21:28:00
  file_links:
  - target: ./function.f90
    text: function.f90
  - target: ./function.txt
    text: function.txt
  ft_topic_id: procedures
  title: Two types of syntax for defining a function
  tweet_created_at: '2022-01-08T02:28:46.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Ways of defining
    a function:<br><br>1. Function and result name are the same.<br><br>2. RESULT
    has a different name within the function, which can be used<br>to return an array.<br><br>RETURN,
    when needed, is used to exit the function, not set its value. <a href="https://t.co/TYdVDZPwCz">pic.twitter.com/TYdVDZPwCz</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1479641195898826754?ref_src=twsrc%5Etfw">January
    8, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1479641195898826754'
  tweet_text: 'Ways of defining a function:


    1. Function and result name are the same.


    2. RESULT has a different name within the function, which can be used

    to return an array.


    RETURN, when needed, is used to exit the function, not set its value. https://t.co/TYdVDZPwCz'
- datetime: 2022-01-07 11:19:00
  file_links:
  - target: ./character_array.f90
    text: character_array.f90
  ft_topic_id: character-variables
  title: Syntax for character array without manual padding
  tweet_created_at: '2022-01-07T16:19:09.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran 2003
    lets you write an array of character variables as<br><br>s = [character (len=4)
    :: &quot;one&quot;,&quot;two&quot;,&quot;five&quot;]<br><br>instead of<br><br>s
    = [&quot;one &quot;,&quot;two &quot;,&quot;five&quot;] ! &quot;one&quot; and &quot;two&quot;
    padded<br><br>Manually padding large arrays of strings is a pain.<a href="https://t.co/TH7x2tQ5Wz">pic.twitter.com/TH7x2tQ5Wz</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1479487784205402116?ref_src=twsrc%5Etfw">January
    7, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1479487784205402116'
  tweet_text: 'Fortran 2003 lets you write an array of character variables as


    s = [character (len=4) :: "one","two","five"]


    instead of


    s = ["one ","two ","five"] ! "one" and "two" padded


    Manually padding large arrays of strings is a pain.

    https://t.co/TH7x2tQ5Wz'
- datetime: 2022-01-07 04:58:00
  file_links:
  - target: ./string_func.f90
    text: string_func.f90
  ft_topic_id: character-variables
  title: Intrinsic character functions
  tweet_created_at: '2022-01-07T09:58:16.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Character
    functions:<br><br>scan(x,y): first position of a character in x found in y<br>verify(x,y):
    first position in x NOT found in y<br>index(x,y): first position of substring
    y in x<br>adjustl/adjustr: remove leading/trailing spaces and pad to preserve
    LEN<a href="https://t.co/ZQZUyRq86b">pic.twitter.com/ZQZUyRq86b</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1479391930744283144?ref_src=twsrc%5Etfw">January
    7, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1479391930744283144'
  tweet_text: 'Character functions:


    scan(x,y): first position of a character in x found in y

    verify(x,y): first position in x NOT found in y

    index(x,y): first position of substring y in x

    adjustl/adjustr: remove leading/trailing spaces and pad to preserve LEN

    https://t.co/ZQZUyRq86b'
- datetime: 2022-01-06 11:31:00
  file_links:
  - target: ./substring.f90
    text: substring.f90
  ft_topic_id: character-variables
  title: Substrings of character variable arrays
  tweet_created_at: '2022-01-06T16:31:56.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">For variables<br><br>character
    (len=10) :: s, v(5)<br><br>s(2:4) is the substring from positions 2 to 4 and v(1:3)(2:4)
    is an array of substrings from <br>positions 2 to 4 of the elements v(1) to v(3).
    <a href="https://t.co/h5AIaZwYL2">pic.twitter.com/h5AIaZwYL2</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1479128610623606787?ref_src=twsrc%5Etfw">January
    6, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1479128610623606787'
  tweet_text: "For variables\n\ncharacter (len=10) :: s, v(5)\n\ns(2:4) is the substring\
    \ from positions 2 to 4 and v(1:3)(2:4) is an array of substrings from \npositions\
    \ 2 to 4 of the elements v(1) to v(3). https://t.co/h5AIaZwYL2"
- datetime: 2022-01-06 07:44:00
  file_links:
  - target: ./overlapping_arg.f90
    text: overlapping_arg.f90
  ft_topic_id: basics
  title: Parenthesize a variable to copy it "on the fly".
  tweet_created_at: '2022-01-06T12:44:56.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Parenthesize
    a variable to copy it &quot;on the fly&quot; to avoid overlapping INTENT(IN) and
    INTENT(OUT) arguments, which is non-standard, for example writing<br><br>call
    double((i),i)<br><br>instead of<br><br>call double(i,i) ! bad if args are intent(in)
    and intent(out)<a href="https://t.co/WqS0AvVcCE">pic.twitter.com/WqS0AvVcCE</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1479071485859962880?ref_src=twsrc%5Etfw">January
    6, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1479071485859962880'
  tweet_text: 'Parenthesize a variable to copy it "on the fly" to avoid overlapping
    INTENT(IN) and INTENT(OUT) arguments, which is non-standard, for example writing


    call double((i),i)


    instead of


    call double(i,i) ! bad if args are intent(in) and intent(out)

    https://t.co/WqS0AvVcCE'
- datetime: 2022-01-05 11:28:00
  file_links:
  - target: ./pow_real.f90
    text: pow_real.f90
  ft_topic_id: basics
  title: Use integer powers when possible.
  tweet_created_at: '2022-01-05T16:28:42.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use integer
    powers when possible, writing x**2 instead of x**2.0, since depending on the compiler
    option used, the latter may be computed as exp(2*log(x)), which is slower. <a
    href="https://t.co/vlBznFvWIf">pic.twitter.com/vlBznFvWIf</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478765410405298176?ref_src=twsrc%5Etfw">January
    5, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1478765410405298176'
  tweet_text: Use integer powers when possible, writing x**2 instead of x**2.0, since
    depending on the compiler option used, the latter may be computed as exp(2*log(x)),
    which is slower. https://t.co/vlBznFvWIf
- datetime: 2022-01-05 08:02:00
  file_links:
  - target: ./precision.f90
    text: precision.f90
  ft_topic_id: data-types
  title: Use d0 or \_kind to make a constant double precision.
  tweet_created_at: '2022-01-05T13:02:34.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use d0 or
    _kind to make a constant double precision. Merely having many decimal places in
    a literal constant does not do so.<br><br>real(kind(1.0d0)) :: pi<br>pi = 3.14159265358979323846
    ! RHS is single precision<br><br>probably does not do what the programmer intends!
    <a href="https://t.co/T9hNCwfcE2">pic.twitter.com/T9hNCwfcE2</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478713534850736129?ref_src=twsrc%5Etfw">January
    5, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1478713534850736129'
  tweet_text: 'Use d0 or _kind to make a constant double precision. Merely having
    many decimal places in a literal constant does not do so.


    real(kind(1.0d0)) :: pi

    pi = 3.14159265358979323846 ! RHS is single precision


    probably does not do what the programmer intends! https://t.co/T9hNCwfcE2'
- datetime: 2022-01-04 19:39:00
  file_links: []
  ft_topic_id: data-types
  title: KIND numbers of types are not portable across compilers and should not be
    used directly.
  tweet_created_at: '2022-01-05T00:39:46.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">KIND numbers
    of types are not portable across compilers and should not be used directly. It&#39;s
    better to use the named constants from iso_fortran_env. For both gfortran and
    Intel Fortran<br><br>use iso_fortran_env<br>print*,int8,int16,int32,int64<br><br>gives
    1 2 4 8, but NAG gives 1 2 3 4.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478526602136981511?ref_src=twsrc%5Etfw">January
    5, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1478526602136981511'
  tweet_text: 'KIND numbers of types are not portable across compilers and should
    not be used directly. It''s better to use the named constants from iso_fortran_env.
    For both gfortran and Intel Fortran


    use iso_fortran_env

    print*,int8,int16,int32,int64


    gives 1 2 4 8, but NAG gives 1 2 3 4.'
- datetime: 2022-01-04 08:50:00
  file_links:
  - target: ./implicit_save.f90
    text: implicit_save.f90
  - target: https://onlinegdb.com/BCZzmjYxs
    text: run
  ft_topic_id: procedures
  title: Avoid implicit save
  tweet_created_at: '2022-01-04T13:50:50.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A variable
    given a value in the declaration has the implicit SAVE attribute and is not re-initialized
    in later calls to the procedure. Write<br><br>integer :: i<br>i = 0<br><br>instead
    of <br><br>integer :: i = 0<br><br>If SAVE is intended be explicit:<br><br>integer,
    save :: i = 0<a href="https://t.co/X1ZUSZblZX">pic.twitter.com/X1ZUSZblZX</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478363292028784645?ref_src=twsrc%5Etfw">January
    4, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1478363292028784645'
  tweet_text: "A variable given a value in the declaration has the implicit SAVE attribute\
    \ and is not re-initialized in later calls to the procedure. Write\n\ninteger\
    \ :: i\ni = 0\n\ninstead of \n\ninteger :: i = 0\n\nIf SAVE is intended be explicit:\n\
    \ninteger, save :: i = 0\nhttps://t.co/X1ZUSZblZX"
- datetime: 2022-01-04 06:45:00
  file_links: []
  ft_topic_id: arrays
  title: Use parameters to dimension fixed-size arrays to make a code easier to change
  tweet_created_at: '2022-01-04T11:45:14.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use parameters
    to dimension fixed-size arrays to make a code easier to change, for example<br><br>integer,
    parameter :: n1=3,n2=5<br>real :: x(n1,n2),y(n1,n2),z(n1,n2)<br><br>or<br><br>real,
    dimension(n1,n2) :: x,y,z<br><br>Numbers other than 0 or 1 should not appear repeatedly
    and should be parameters.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478331686412861440?ref_src=twsrc%5Etfw">January
    4, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1478331686412861440'
  tweet_text: 'Use parameters to dimension fixed-size arrays to make a code easier
    to change, for example


    integer, parameter :: n1=3,n2=5

    real :: x(n1,n2),y(n1,n2),z(n1,n2)


    or


    real, dimension(n1,n2) :: x,y,z


    Numbers other than 0 or 1 should not appear repeatedly and should be parameters.'
- datetime: 2022-01-03 19:24:00
  file_links:
  - target: ./im_re.f90
    text: im_re.f90
  ft_topic_id: data-types
  title: Fortran 2008 introduced z%re and z%im as alternatives to real(z) and aimag(z)
  tweet_created_at: '2022-01-04T00:24:05.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran 2008
    introduced z%re and z%im as alternatives to real(z) and aimag(z) to refer to the
    real and imaginary parts of a complex variable z, either scalar or array. The
    %re and %im syntax does not apply to expressions, so (2*z)%im is disallowed. <a
    href="https://t.co/GcspgfI4zB">pic.twitter.com/GcspgfI4zB</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478160269671124993?ref_src=twsrc%5Etfw">January
    4, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1478160269671124993'
  tweet_text: Fortran 2008 introduced z%re and z%im as alternatives to real(z) and
    aimag(z) to refer to the real and imaginary parts of a complex variable z, either
    scalar or array. The %re and %im syntax does not apply to expressions, so (2*z)%im
    is disallowed. https://t.co/GcspgfI4zB
- datetime: 2022-01-03 10:47:00
  file_links:
  - target: ./kindfind.f90
    text: kindfind.f90
  ft_topic_id: data-types
  title: KindFinder code finds all KIND Values implemented by a compiler
  tweet_created_at: '2022-01-03T15:47:43.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The KindFinder
    Fortran 90 code of Werner Schulz can also find<br>all KIND Values implemented
    by a compiler, list the properties of the associated numeric models, and generate
    a KIND parameter module.<a href="https://t.co/RY5uLdCMXl">pic.twitter.com/RY5uLdCMXl</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1478030318485577728?ref_src=twsrc%5Etfw">January
    3, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1478030318485577728'
  tweet_text: 'The KindFinder Fortran 90 code of Werner Schulz can also find

    all KIND Values implemented by a compiler, list the properties of the associated
    numeric models, and generate a KIND parameter module.

    https://t.co/RY5uLdCMXl'
- datetime: 2022-01-03 07:51:00
  file_links:
  - target: ./iso_kinds.f90
    text: iso_kinds.f90
  ft_topic_id: data-types
  title: Real and integer KIND constants from iso_fortran_env; HUGE() and TINY()
  tweet_created_at: '2022-01-03T12:51:13.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Module iso_fortran_env
    has KIND constants int8, int16, int32, int64 for integers with those storage sizes
    and real32, real64, real128 for reals.<br>Use huge(x) and tiny(x) to get the largest
    and smallest numbers of type real x and huge(i) for integer i.<a href="https://t.co/1T3srjZIsX">pic.twitter.com/1T3srjZIsX</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477985901145993221?ref_src=twsrc%5Etfw">January
    3, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1477985901145993221'
  tweet_text: 'Module iso_fortran_env has KIND constants int8, int16, int32, int64
    for integers with those storage sizes and real32, real64, real128 for reals.

    Use huge(x) and tiny(x) to get the largest and smallest numbers of type real x
    and huge(i) for integer i.

    https://t.co/1T3srjZIsX'
- datetime: 2022-01-02 18:47:00
  file_links:
  - target: ./advance_no.f90
    text: advance_no.f90
  ft_topic_id: input-and-output
  title: Advance="no" specifier of WRITE
  tweet_created_at: '2022-01-02T23:47:03.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">WRITE inserts
    a newline at the end, which can be avoided with the<br>advance=&quot;no&quot;
    specifier. This is useful for prompting input and reading it from the same line
    and for printing an unknown amount of data with one format before another format.
    From zoziha.<a href="https://t.co/38h3L99q8Q">pic.twitter.com/38h3L99q8Q</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477788560359141382?ref_src=twsrc%5Etfw">January
    2, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1477788560359141382'
  tweet_text: 'WRITE inserts a newline at the end, which can be avoided with the

    advance="no" specifier. This is useful for prompting input and reading it from
    the same line and for printing an unknown amount of data with one format before
    another format. From zoziha.

    https://t.co/38h3L99q8Q'
- datetime: 2022-01-02 08:27:00
  file_links:
  - target: ./join.f90
    text: join.f90
  ft_topic_id: procedures
  title: Len of character variable function result can depend on arguments
  tweet_created_at: '2022-01-02T13:27:41.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The LEN of
    a character variable function RESULT can also depend on intrinsic functions of
    the arguments.  <a href="https://t.co/6vXoO79BAK">pic.twitter.com/6vXoO79BAK</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477632693617799169?ref_src=twsrc%5Etfw">January
    2, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1477632693617799169'
  tweet_text: The LEN of a character variable function RESULT can also depend on intrinsic
    functions of the arguments.  https://t.co/6vXoO79BAK
- datetime: 2022-01-02 06:42:00
  file_links:
  - target: ./array_func.f90
    text: array_func.f90
  ft_topic_id: procedures
  title: How size of an array function result can depend on function arguments
  tweet_created_at: '2022-01-02T11:42:43.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The SIZE
    of a function result can be an argument, depend on an intrinsic function of an
    argument such as SIZE, or have an arbitrary dependence if the result is allocatable.
    <a href="https://t.co/MKlJOXn4yZ">pic.twitter.com/MKlJOXn4yZ</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477606275643019269?ref_src=twsrc%5Etfw">January
    2, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1477606275643019269'
  tweet_text: The SIZE of a function result can be an argument, depend on an intrinsic
    function of an argument such as SIZE, or have an arbitrary dependence if the result
    is allocatable. https://t.co/MKlJOXn4yZ
- datetime: 2022-01-01 11:46:00
  file_links: []
  ft_topic_id: fortran-resources
  title: List of the syntax and purpose of Fortran intrinsics, with usage examples
  tweet_created_at: '2022-01-01T16:46:29.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Urbanjost
    created a list of the syntax and purpose of all(?) Fortran intrinsics, along with
    examples of their use. A monumental effort! He has many other projects on GitHub.
    <a href="https://t.co/xeAFTdkacJ">https://t.co/xeAFTdkacJ</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477320332751130625?ref_src=twsrc%5Etfw">January
    1, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1477320332751130625'
  tweet_text: Urbanjost created a list of the syntax and purpose of all(?) Fortran
    intrinsics, along with examples of their use. A monumental effort! He has many
    other projects on GitHub. https://t.co/xeAFTdkacJ
- datetime: 2022-01-01 09:00:00
  file_links:
  - target: ./lower_case.f90
    text: lower_case.f90
  ft_topic_id: character-variables
  title: Do case-insensitive string comparisons by converting to lower case
  tweet_created_at: '2022-01-01T14:00:52.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Character
    variables are case-sensitive, and to compare two strings ignoring case you can
    first convert them to lower case. <a href="https://t.co/D4tnPO8tLE">pic.twitter.com/D4tnPO8tLE</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477278656376590340?ref_src=twsrc%5Etfw">January
    1, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1477278656376590340'
  tweet_text: Character variables are case-sensitive, and to compare two strings ignoring
    case you can first convert them to lower case. https://t.co/D4tnPO8tLE
- datetime: 2022-01-01 09:16:00
  file_links: []
  ft_topic_id: fortran-resources
  title: Fortran-lang suggested variable naming conventions
  tweet_created_at: '2022-01-01T14:16:40.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran-lang
    Best Practices:<br>1. Use lower case for all Fortran constructs, such as do, end
    do, if, then<br>2. Follow short mathematical notation for mathematical variables/functions<br>3.
    For other names use all lower case<br><br>Details at<a href="https://t.co/WHTD1MAbFq">https://t.co/WHTD1MAbFq</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477282631553269764?ref_src=twsrc%5Etfw">January
    1, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1477282631553269764'
  tweet_text: 'Fortran-lang Best Practices:

    1. Use lower case for all Fortran constructs, such as do, end do, if, then

    2. Follow short mathematical notation for mathematical variables/functions

    3. For other names use all lower case


    Details at

    https://t.co/WHTD1MAbFq'
- datetime: 2022-01-01 10:49:00
  file_links:
  - target: ./case_insensitivity.f90
    text: case_insensitivity.f90
  ft_topic_id: basics
  title: Case insensitivity
  tweet_created_at: '2022-01-01T10:49:47.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran used
    to be written entirely in UPPERCASE, but is now case insensitive. However, whilst
    the following example is completely valid, to ensure legibility it&#39;s highly
    recommended to choose a case convention and stick to it! <a href="https://t.co/AMXjjEVsOE">pic.twitter.com/AMXjjEVsOE</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1477230568781795334?ref_src=twsrc%5Etfw">January
    1, 2022</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1477230568781795334'
  tweet_text: Fortran used to be written entirely in UPPERCASE, but is now case insensitive.
    However, whilst the following example is completely valid, to ensure legibility
    it's highly recommended to choose a case convention and stick to it! https://t.co/AMXjjEVsOE
- datetime: 2021-12-30 20:20:00
  file_links:
  - target: ./subroutine_dt.f90
    text: subroutine_dt.f90
  ft_topic_id: procedures
  title: Returning multiple values from a subroutine or function
  tweet_created_at: '2021-12-31T01:20:34.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran cannot
    return multiple values with syntax like<br><br>c, d = f(x)<br><br>You can use
    a subroutine<br><br>call f(x,c,d)<br><br>or a function that returns a derived
    type containing c and d or a function that returns a size-2 array if c and d have
    the same type. <a href="https://t.co/vYr5h8FsMw">pic.twitter.com/vYr5h8FsMw</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1476724929299197962?ref_src=twsrc%5Etfw">December
    31, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1476724929299197962'
  tweet_text: 'Fortran cannot return multiple values with syntax like


    c, d = f(x)


    You can use a subroutine


    call f(x,c,d)


    or a function that returns a derived type containing c and d or a function that
    returns a size-2 array if c and d have the same type. https://t.co/vYr5h8FsMw'
- datetime: 2021-12-30 07:13:00
  file_links: []
  ft_topic_id: math-intrinsic-functions
  title: MODULO vs. MOD function
  tweet_created_at: '2021-12-30T13:13:25.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran has
    similar MODULO and MOD functions.<br>MODULO (MOD) takes the sign of the 2nd (1st)
    argument.<br><br>print*,modulo([-1,0,1],2)  !   1 0  1<br>print*,mod([-1,0,1],2)        !
    -1 0  1<br>print*,modulo([-1,0,1],-2) ! -1 0 -1<br>print*,mod([-1,0,1],-2)      !
    -1 0   1<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1476541936681066501?ref_src=twsrc%5Etfw">December
    30, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1476541936681066501'
  tweet_text: 'Fortran has similar MODULO and MOD functions.

    MODULO (MOD) takes the sign of the 2nd (1st) argument.


    print*,modulo([-1,0,1],2)  !   1 0  1

    print*,mod([-1,0,1],2)        ! -1 0  1

    print*,modulo([-1,0,1],-2) ! -1 0 -1

    print*,mod([-1,0,1],-2)      ! -1 0   1

    end'
- datetime: 2021-12-29 13:59:00
  file_links: []
  ft_topic_id: fortran-resources
  title: Compiler Support for the Fortran 2008 and 2018 Standards
  tweet_created_at: '2021-12-29T19:59:06.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">There is
    a paper &quot;Compiler Support for the Fortran 2008 and 2018 Standards&quot; April
    2020 by Chivers &amp; Sleightholme covering Absoft Arm Cray Fujitsu gfortran IBM
    Intel Nag NEC Oracle PGI <a href="https://t.co/dPp0cZaLBs">https://t.co/dPp0cZaLBs</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1476281645011505162?ref_src=twsrc%5Etfw">December
    29, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1476281645011505162'
  tweet_text: '@jeff_replies @axccl @OndrejCertik There is a paper "Compiler Support
    for the Fortran 2008 and 2018 Standards" April 2020 by Chivers &amp; Sleightholme
    covering Absoft Arm Cray Fujitsu gfortran IBM Intel Nag NEC Oracle PGI https://t.co/dPp0cZaLBs'
- datetime: 2021-12-29 12:16:00
  file_links: []
  ft_topic_id: arrays
  title: Many compilers evaluate ALL(x==y) efficiently with short-circuiting
  tweet_created_at: '2021-12-29T18:16:59.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">For a code
    that evaluates ALL(x==y) with a short-circuiting function and the intrinsic, gfortran,
    ifort, and nvfortran seem to short-circuit the intrinsic, so it may be OK to use
    ALL for large expressions.<a href="https://t.co/n99MPh7rKt">https://t.co/n99MPh7rKt</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1476255945923641347?ref_src=twsrc%5Etfw">December
    29, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1476255945923641347'
  tweet_text: 'For a code that evaluates ALL(x==y) with a short-circuiting function
    and the intrinsic, gfortran, ifort, and nvfortran seem to short-circuit the intrinsic,
    so it may be OK to use ALL for large expressions.

    https://t.co/n99MPh7rKt'
- datetime: 2021-12-29 08:41:00
  file_links:
  - target: ./deferred_character.f90
    text: deferred_character.f90
  ft_topic_id: character-variables
  title: LEN of a character variable may be deferred in Fortran 2003 on
  tweet_created_at: '2021-12-29T14:41:13.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The LEN of
    a character variable may be deferred in F2003 on.<br><br>character (len=:), allocatable
    :: s,t(:)<br><br>declares a scalar and an array of such variables. The LEN is
    taken from the RHS of an assignment but not from a READ. Elements of t(:) have
    same LEN.<br> <a href="https://t.co/wP6lXJ3XL2">pic.twitter.com/wP6lXJ3XL2</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1476201645885337611?ref_src=twsrc%5Etfw">December
    29, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1476201645885337611'
  tweet_text: "The LEN of a character variable may be deferred in F2003 on.\n\ncharacter\
    \ (len=:), allocatable :: s,t(:)\n\ndeclares a scalar and an array of such variables.\
    \ The LEN is taken from the RHS of an assignment but not from a READ. Elements\
    \ of t(:) have same LEN.\n https://t.co/wP6lXJ3XL2"
- datetime: 2021-12-29 05:18:00
  file_links: []
  ft_topic_id: fortran-resources
  title: To learn about Fortran beyond F95, read the New Features articles of John
    Reid
  tweet_created_at: '2021-12-29T11:18:23.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">To learn
    about Fortran beyond F95, read the 3 articles of John Reid, convenor (chairman)
    of the standards committee 1999-2017 on the New Features of Fortran 2018, 2008,
    and 2003 <a href="https://t.co/y7bBC94ZdB">https://t.co/y7bBC94ZdB</a><a href="https://t.co/NrcHEeED8r">https://t.co/NrcHEeED8r</a><a
    href="https://t.co/tPtqc8BU3J">https://t.co/tPtqc8BU3J</a><br>and his co-authored
    book.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1476150602866511873?ref_src=twsrc%5Etfw">December
    29, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1476150602866511873'
  tweet_text: 'To learn about Fortran beyond F95, read the 3 articles of John Reid,
    convenor (chairman) of the standards committee 1999-2017 on the New Features of
    Fortran 2018, 2008, and 2003 https://t.co/y7bBC94ZdB

    https://t.co/NrcHEeED8r

    https://t.co/tPtqc8BU3J

    and his co-authored book.'
- datetime: 2021-12-28 13:04:00
  file_links: []
  ft_topic_id: data-types
  title: Use .true. and .false. for Booleans, not 1 and 0
  tweet_created_at: '2021-12-28T19:04:47.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use .true.
    and .false. for Booleans and use the expression <br><br>merge(1,0,logical_variable)<br><br>if
    needed. Fortran standards have never specified an equivalence between integers
    and Booleans. <a href="https://t.co/V1ZfGdxAWT">https://t.co/V1ZfGdxAWT</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475905587774959616?ref_src=twsrc%5Etfw">December
    28, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1475905587774959616'
  tweet_text: "Use .true. and .false. for Booleans and use the expression \n\nmerge(1,0,logical_variable)\n\
    \nif needed. Fortran standards have never specified an equivalence between integers\
    \ and Booleans. https://t.co/V1ZfGdxAWT"
- datetime: 2021-12-28 08:47:00
  file_links: []
  ft_topic_id: conditionals
  title: Standards committee has approved conditional expressions
  tweet_created_at: '2021-12-28T14:47:54.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The standards
    committee has approved conditional expressions, with <br><br>y = ( i&gt;=1 .And.
    i&lt;=Size(a) ? a(i) : -Huge(y) )<br><br>equivalent to<br><br>if (i&gt;=1 .And.
    i&lt;=Size(a)) then<br>   y = a(i)<br>else<br>   y = -Huge(y)<br>end if<a href="https://t.co/NKcB9wR2kU">https://t.co/NKcB9wR2kU</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475840940791279616?ref_src=twsrc%5Etfw">December
    28, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1475840940791279616'
  tweet_text: "@arclight The standards committee has approved conditional expressions,\
    \ with \n\ny = ( i&gt;=1 .And. i&lt;=Size(a) ? a(i) : -Huge(y) )\n\nequivalent\
    \ to\n\nif (i&gt;=1 .And. i&lt;=Size(a)) then\n   y = a(i)\nelse\n   y = -Huge(y)\n\
    end if\n\nhttps://t.co/NKcB9wR2kU"
- datetime: 2021-12-28 08:02:00
  file_links: []
  ft_topic_id: conditionals
  title: ANY and ALL may not be the most efficient methods to compare arrays.
  tweet_created_at: '2021-12-28T14:02:13.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">ANY and ALL
    may not be the most efficient methods to compare arrays. They<br>may generate
    a logical array the size of the input arrays or always test all elements, depending
    on how they are<br>implemented. More from urbanjost:<a href="https://t.co/8I5ed7nnDT">pic.twitter.com/8I5ed7nnDT</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475829444543717378?ref_src=twsrc%5Etfw">December
    28, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1475829444543717378'
  tweet_text: 'ANY and ALL may not be the most efficient methods to compare arrays.
    They

    may generate a logical array the size of the input arrays or always test all elements,
    depending on how they are

    implemented. More from urbanjost:

    https://t.co/8I5ed7nnDT'
- datetime: 2021-12-28 07:51:00
  file_links:
  - target: ./compare_floats.f90
    text: compare_floats.f90
  ft_topic_id: basics
  title: Consider using a tolerance to compare floats
  tweet_created_at: '2021-12-28T13:51:07.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If the arrays
    are INTEGER or CHARACTER, then the comparison can be exact. For REAL or COMPLEX
    arrays, you should consider using a suitably small tolerance when comparing values.
    This and the previous tip are from urbanjost. <a href="https://t.co/qjaMf5T06W">pic.twitter.com/qjaMf5T06W</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475826650835214338?ref_src=twsrc%5Etfw">December
    28, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1475826650835214338'
  tweet_text: If the arrays are INTEGER or CHARACTER, then the comparison can be exact.
    For REAL or COMPLEX arrays, you should consider using a suitably small tolerance
    when comparing values. This and the previous tip are from urbanjost. https://t.co/qjaMf5T06W
- datetime: 2021-12-28 07:33:00
  file_links:
  - target: ./all_any.f90
    text: all_any.f90
  ft_topic_id: arrays
  title: Use ALL(A==B) to test for array equality
  tweet_created_at: '2021-12-28T13:33:04.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If size(A)==size(B),
    use ALL(A==B) to test for equality of arrays A and B and ANY(A==B) to test for
    equality of any corresponding elements. <a href="https://t.co/sx1gxm5XIh">pic.twitter.com/sx1gxm5XIh</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475822105358913540?ref_src=twsrc%5Etfw">December
    28, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1475822105358913540'
  tweet_text: If size(A)==size(B), use ALL(A==B) to test for equality of arrays A
    and B and ANY(A==B) to test for equality of any corresponding elements. https://t.co/sx1gxm5XIh
- datetime: 2021-12-27 09:52:00
  file_links: []
  ft_topic_id: fortran-resources
  title: Intel Fortran Compiler (ifx)
  tweet_created_at: '2021-12-27T15:52:37.000Z'
  tweet_embed: "<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">The\
    \ Intel\xAE Fortran Compiler (ifx), available in the oneAPI HPC Toolkit 2022.1,\
    \ is production-ready for CPUs and GPUs. ifx is based on the Intel\xAE Fortran\
    \ Compiler Classic (ifort) frontend and runtime libraries, but uses LLVM backend\
    \ compiler technology.  <a href=\"https://t.co/YC72lJcOVC\">https://t.co/YC72lJcOVC</a></p>&mdash;\
    \ FortranTip (@fortrantip) <a href=\"https://twitter.com/fortrantip/status/1475494838074318852?ref_src=twsrc%5Etfw\"\
    >December 27, 2021</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\"\
    \ charset=\"utf-8\"></script>"
  tweet_id: '1475494838074318852'
  tweet_text: "The Intel\xAE Fortran Compiler (ifx), available in the oneAPI HPC Toolkit\
    \ 2022.1, is production-ready for CPUs and GPUs. ifx is based on the Intel\xAE\
    \ Fortran Compiler Classic (ifort) frontend and runtime libraries, but uses LLVM\
    \ backend compiler technology.  https://t.co/YC72lJcOVC"
- datetime: 2021-12-27 07:07:00
  file_links:
  - target: ./doubled_delim.f90
    text: doubled_delim.f90
  ft_topic_id: character-variables
  title: Doubled delimiter in a string is regarded as a single character of the constant
  tweet_created_at: '2021-12-27T13:07:38.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A doubled
    delimiter in a string without any embedded intervening blanks is regarded as a
    single character of the constant. One can also put a single quote in double quotes
    or a double quote in single quotes. Thanks to Amir Shahmoradi for tip.<br> <a
    href="https://t.co/JSneWjHZgo">pic.twitter.com/JSneWjHZgo</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475453317526528003?ref_src=twsrc%5Etfw">December
    27, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1475453317526528003'
  tweet_text: "A doubled delimiter in a string without any embedded intervening blanks\
    \ is regarded as a single character of the constant. One can also put a single\
    \ quote in double quotes or a double quote in single quotes. Thanks to Amir Shahmoradi\
    \ for tip.\n https://t.co/JSneWjHZgo"
- datetime: 2021-12-26 09:55:00
  file_links:
  - target: ./derived_type_array.f90
    text: derived_type_array.f90
  ft_topic_id: derived-types
  title: Store data as an array of derived types or a derived type with array components?
  tweet_created_at: '2021-12-26T15:55:31.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Whether to
    store data as an array of derived types or a derived type with array components
    also depends on how the data will typically be accessed.<a href="https://t.co/UUqiYkaLO7">pic.twitter.com/UUqiYkaLO7</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475133178763427848?ref_src=twsrc%5Etfw">December
    26, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1475133178763427848'
  tweet_text: 'Whether to store data as an array of derived types or a derived type
    with array components also depends on how the data will typically be accessed.

    https://t.co/UUqiYkaLO7'
- datetime: 2021-12-26 04:22:00
  file_links:
  - target: ./column_major.f90
    text: column_major.f90
  ft_topic_id: arrays
  title: Fortran is column-major
  tweet_created_at: '2021-12-26T10:22:26.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The order
    you loop through multidimensional arrays can have a big impact on speed. Fortran
    is column-major, meaning consecutive elements of a column are stored next to each
    other in memory, and you should loop through arrays in this order. <a href="https://t.co/oEtrOaMbzC">pic.twitter.com/oEtrOaMbzC</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1475049356155883524?ref_src=twsrc%5Etfw">December
    26, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1475049356155883524'
  tweet_text: The order you loop through multidimensional arrays can have a big impact
    on speed. Fortran is column-major, meaning consecutive elements of a column are
    stored next to each other in memory, and you should loop through arrays in this
    order. https://t.co/oEtrOaMbzC
- datetime: 2021-12-24 18:30:00
  file_links:
  - target: ./cmplx.f90
    text: cmplx.f90
  ft_topic_id: data-types
  title: CMPLX should be used with a KIND argument
  tweet_created_at: '2021-12-25T00:30:25.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">CMPLX(X,Y,[KIND])
    returns a single precision complex variable, even if X and Y are double precision,
    unless a KIND is specified. <br><br>Merry Christmas and Happy Holidays! Posts
    may be sparse until the new year. <a href="https://t.co/MD9tCw4pTB">pic.twitter.com/MD9tCw4pTB</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1474537984066301959?ref_src=twsrc%5Etfw">December
    25, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1474537984066301959'
  tweet_text: "CMPLX(X,Y,[KIND]) returns a single precision complex variable, even\
    \ if X and Y are double precision, unless a KIND is specified. \n\nMerry Christmas\
    \ and Happy Holidays! Posts may be sparse until the new year. \nhttps://t.co/MD9tCw4pTB"
- datetime: 2021-12-24 09:00:00
  file_links:
  - target: ./reshape_array.f90
    text: reshape_array.f90
  ft_topic_id: arrays
  title: RESHAPE with the optional ORDER and PAD arguments
  tweet_created_at: '2021-12-24T15:00:41.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">RESHAPE returns
    an array with a different shape than the SOURCE array. Optional ORDER argument
    changes the order of elements of SOURCE from the usual column major. Optional
    PAD argument fills the result, with recycling, after source is exhausted. <a href="https://t.co/Xb3RCZ6LcW">pic.twitter.com/Xb3RCZ6LcW</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1474394605890244614?ref_src=twsrc%5Etfw">December
    24, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1474394605890244614'
  tweet_text: RESHAPE returns an array with a different shape than the SOURCE array.
    Optional ORDER argument changes the order of elements of SOURCE from the usual
    column major. Optional PAD argument fills the result, with recycling, after source
    is exhausted. https://t.co/Xb3RCZ6LcW
- datetime: 2021-12-24 06:35:00
  file_links:
  - target: ./factorial.f90
    text: factorial.f90
  ft_topic_id: math-intrinsic-functions
  title: Use GAMMA to compute factorials
  tweet_created_at: '2021-12-24T12:35:00.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Why does
    Fortran not have a factorial function? It does, as for positive whole values of
    X the Gamma function simplifies to the factorial function for (X-1).<br>That is,<br><br>x!
    == gamma(x+1)<br><br>Thanks to urbanjost for tip! <a href="https://t.co/fTAPvhKEpr">pic.twitter.com/fTAPvhKEpr</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1474357943667671060?ref_src=twsrc%5Etfw">December
    24, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1474357943667671060'
  tweet_text: "Why does Fortran not have a factorial function? It does, as for positive\
    \ whole values of X the Gamma function simplifies to the factorial function for\
    \ (X-1).\nThat is,\n\nx! == gamma(x+1)\n\nThanks to urbanjost for tip! \nhttps://t.co/fTAPvhKEpr"
- datetime: 2021-12-23 18:04:00
  file_links:
  - target: ./date.f90
    text: date.f90
  ft_topic_id: derived-types
  title: Derived type definition, initialization, and operator overloading
  tweet_created_at: '2021-12-24T00:04:30.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">How to define
    a derived type, initialize it, access its components, convert it to a string,
    and define operators for it. <a href="https://t.co/jcai3Usy25">pic.twitter.com/jcai3Usy25</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1474169072665440259?ref_src=twsrc%5Etfw">December
    24, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1474169072665440259'
  tweet_text: How to define a derived type, initialize it, access its components,
    convert it to a string, and define operators for it. https://t.co/jcai3Usy25
- datetime: 2021-12-23 13:52:00
  file_links: []
  ft_topic_id: input-and-output
  title: List-directed vs. explicitly formatted output
  tweet_created_at: '2021-12-23T19:52:23.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">List-directed
    output (format *) is convenient, but don&#39;t use it when you care about layout
    as you&#39;ll lose control over spacing, line breaks and number of significant
    digits. If you care, use explicit formats instead.</p>&mdash; FortranTip (@fortrantip)
    <a href="https://twitter.com/fortrantip/status/1474105626611662857?ref_src=twsrc%5Etfw">December
    23, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1474105626611662857'
  tweet_text: List-directed output (format *) is convenient, but don't use it when
    you care about layout as you'll lose control over spacing, line breaks and number
    of significant digits. If you care, use explicit formats instead.
- datetime: 2021-12-23 04:08:00
  file_links: []
  ft_topic_id: arrays
  title: Fortran equivalents of NumPy
  tweet_created_at: '2021-12-23T10:08:41.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Used to NumPy?
    Lots of the Fortran intrinsics to deal with arrays will already be familiar to
    you. <a href="https://t.co/GnKnbscsDX">pic.twitter.com/GnKnbscsDX</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473958733571104773?ref_src=twsrc%5Etfw">December
    23, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1473958733571104773'
  tweet_text: Used to NumPy? Lots of the Fortran intrinsics to deal with arrays will
    already be familiar to you. https://t.co/GnKnbscsDX
- datetime: 2021-12-22 20:51:00
  file_links:
  - target: ./zero_size.f90
    text: zero_size.f90
  ft_topic_id: arrays
  title: Zero-size array constructor such as [real ::]
  tweet_created_at: '2021-12-23T02:51:21.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">[data_type
    :: ] is a zero-size array of type data_type.<a href="https://t.co/XmBx5W4ZBG">pic.twitter.com/XmBx5W4ZBG</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473848675566858242?ref_src=twsrc%5Etfw">December
    23, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1473848675566858242'
  tweet_text: '[data_type :: ] is a zero-size array of type data_type.

    https://t.co/XmBx5W4ZBG'
- datetime: 2021-12-22 09:44:00
  file_links: []
  ft_topic_id: input-and-output
  title: Use G0.d and colon edit descriptors with infinite repeat count to write delimited
    (CSV, etc.) output
  tweet_created_at: '2021-12-22T15:44:11.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Combine the
    G0.d and colon edit descriptors, along with infinite repeat count, to write delimited
    (CSV, etc.) output. <a href="https://t.co/QfMmdEj7Fn">pic.twitter.com/QfMmdEj7Fn</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473680777279852553?ref_src=twsrc%5Etfw">December
    22, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1473680777279852553'
  tweet_text: Combine the G0.d and colon edit descriptors, along with infinite repeat
    count, to write delimited (CSV, etc.) output. https://t.co/QfMmdEj7Fn
- datetime: 2021-12-22 06:48:00
  file_links:
  - target: ./automatic.f90
    text: automatic.f90
  ft_topic_id: allocation
  title: If allocation errors must be handled, use ALLOCATABLE rather than automatic
    arrays in procedures
  tweet_created_at: '2021-12-22T12:48:07.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If allocation
    errors must be handled, use ALLOCATABLE rather than automatic arrays in procedures,
    and check the STAT of ALLOCATE. <a href="https://t.co/EV4jE4pfdx">pic.twitter.com/EV4jE4pfdx</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473636468405030913?ref_src=twsrc%5Etfw">December
    22, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1473636468405030913'
  tweet_text: If allocation errors must be handled, use ALLOCATABLE rather than automatic
    arrays in procedures, and check the STAT of ALLOCATE. https://t.co/EV4jE4pfdx
- datetime: 2021-12-21 11:13:00
  file_links: []
  ft_topic_id: modules
  title: Name modules and the source files containing them consistently, with one
    module per file.
  tweet_created_at: '2021-12-21T17:13:00.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Name modules
    and the source files containing them consistently, with one module per file. The
    convention I use is that a module named  m_mod is defined in a source file m.f90.
    That way if I see <br><br>use m_mod, only: foo<br><br>in my code I know to look
    in m.f90 for the definition of foo.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473340740055015431?ref_src=twsrc%5Etfw">December
    21, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1473340740055015431'
  tweet_text: "Name modules and the source files containing them consistently, with\
    \ one module per file. The convention I use is that a module named  m_mod is defined\
    \ in a source file m.f90. That way if I see \n\nuse m_mod, only: foo\n\nin my\
    \ code I know to look in m.f90 for the definition of foo."
- datetime: 2021-12-21 05:59:00
  file_links:
  - target: ./stream_io.f90
    text: stream_io.f90
  ft_topic_id: input-and-output
  title: Use unformatted stream of Fortran 2003 for large-scale I/O.
  tweet_created_at: '2021-12-21T11:59:56.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Use unformatted
    stream of Fortran 2003 for large-scale I/O. <a href="https://t.co/I2PHa3YiaA">pic.twitter.com/I2PHa3YiaA</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1473261954244435973?ref_src=twsrc%5Etfw">December
    21, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1473261954244435973'
  tweet_text: Use unformatted stream of Fortran 2003 for large-scale I/O. https://t.co/I2PHa3YiaA
- datetime: 2021-12-20 12:38:00
  file_links:
  - target: ./read_write_file.f90
    text: read_write_file.f90
  ft_topic_id: input-and-output
  title: Using READ and WRITE for file i/o
  tweet_created_at: '2021-12-20T18:38:36.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Using READ
    and WRITE for file i/o. <a href="https://t.co/Be3gH8SLnL">pic.twitter.com/Be3gH8SLnL</a></p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472999893631447043?ref_src=twsrc%5Etfw">December
    20, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472999893631447043'
  tweet_text: Using READ and WRITE for file i/o. https://t.co/Be3gH8SLnL
- datetime: 2021-12-20 08:47:00
  file_links:
  - target: ./read_sum.f90
    text: read_sum.f90
  ft_topic_id: input-and-output
  title: Reading user input
  tweet_created_at: '2021-12-20T14:47:57.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/pzKMXlNriJ">pic.twitter.com/pzKMXlNriJ</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472941850218700805?ref_src=twsrc%5Etfw">December
    20, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472941850218700805'
  tweet_text: Created with @carbon_app https://t.co/pzKMXlNriJ
- datetime: 2021-12-20 08:02:00
  file_links:
  - target: ./select_case.f90
    text: select_case.f90
  ft_topic_id: conditionals
  title: SELECT CASE for conditional execution
  tweet_created_at: '2021-12-20T14:02:38.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/5R6yeSnvpY">pic.twitter.com/5R6yeSnvpY</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472930444572336128?ref_src=twsrc%5Etfw">December
    20, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472930444572336128'
  tweet_text: Created with @carbon_app https://t.co/5R6yeSnvpY
- datetime: 2021-12-19 21:32:00
  file_links:
  - target: ./kind.f90
    text: kind.f90
  ft_topic_id: data-types
  title: Declare floating point variables with KINDs
  tweet_created_at: '2021-12-20T03:32:24.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/Pxu7PbR5b6">pic.twitter.com/Pxu7PbR5b6</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472771842242920451?ref_src=twsrc%5Etfw">December
    20, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472771842242920451'
  tweet_text: Created with @carbon_app https://t.co/Pxu7PbR5b6
- datetime: 2021-12-19 21:35:00
  file_links: []
  ft_topic_id: data-types
  title: Replace non-standard REAL\*8 declaration with REAL(KIND=REAL64)
  tweet_created_at: '2021-12-20T03:35:19.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In older
    code, declarations such as<br><br>real*8 x<br><br>are common but non-standard.
    They should be replaced by<br><br>real(kind=real64) :: x<br><br>or <br><br>real(kind=wp)
    :: x<br><br>with wp set appropriately.</p>&mdash; FortranTip (@fortrantip) <a
    href="https://twitter.com/fortrantip/status/1472772577600942083?ref_src=twsrc%5Etfw">December
    20, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472772577600942083'
  tweet_text: "In older code, declarations such as\n\nreal*8 x\n\nare common but non-standard.\
    \ They should be replaced by\n\nreal(kind=real64) :: x\n\nor \n\nreal(kind=wp)\
    \ :: x\n\nwith wp set appropriately."
- datetime: 2021-12-19 18:00:00
  file_links:
  - target: ./module_parameter.f90
    text: module_parameter.f90
  ft_topic_id: modules
  title: Use PARAMETERs in modules to define physical and mathematical constants
  tweet_created_at: '2021-12-20T00:00:11.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/vWJuAwle97">pic.twitter.com/vWJuAwle97</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472718436040073226?ref_src=twsrc%5Etfw">December
    20, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472718436040073226'
  tweet_text: Created with @carbon_app https://t.co/vWJuAwle97
- datetime: 2021-12-19 16:56:00
  file_links: []
  ft_topic_id: procedures
  title: Procedures can be RECURSIVE
  tweet_created_at: '2021-12-19T22:56:34.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/czICWzekYU">pic.twitter.com/czICWzekYU</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472702427740745728?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472702427740745728'
  tweet_text: Created with @carbon_app https://t.co/czICWzekYU
- datetime: 2021-12-19 16:39:00
  file_links: []
  ft_topic_id: procedures
  title: Specify function and subroutine argument INTENTs
  tweet_created_at: '2021-12-19T22:39:54.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Function
    and subroutine argument INTENTs were introduced in the Fortran 90 standard. Much
    Fortran code does not specify intents, which is legal, but all new code should.
    Arguments should be intent(in) or intent(out) unless intent(in out) is necessary.</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472698233298333699?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472698233298333699'
  tweet_text: Function and subroutine argument INTENTs were introduced in the Fortran
    90 standard. Much Fortran code does not specify intents, which is legal, but all
    new code should. Arguments should be intent(in) or intent(out) unless intent(in
    out) is necessary.
- datetime: 2021-12-19 16:34:00
  file_links:
  - target: ./intent_in_out.f90
    text: intent_in_out.f90
  ft_topic_id: procedures
  title: Subroutines can have INTENT(IN OUT) arguments, but functions should not
  tweet_created_at: '2021-12-19T22:34:39.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/3FjJkJUHSn">pic.twitter.com/3FjJkJUHSn</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472696912541364224?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472696912541364224'
  tweet_text: Created with @carbon_app https://t.co/3FjJkJUHSn
- datetime: 2021-12-19 16:16:00
  file_links:
  - target: ./subroutine.f90
    text: subroutine.f90
  ft_topic_id: procedures
  title: Define and call a subroutine
  tweet_created_at: '2021-12-19T22:16:21.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/Wi7Imqi5vW">pic.twitter.com/Wi7Imqi5vW</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472692305522044932?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472692305522044932'
  tweet_text: Created with @carbon_app https://t.co/Wi7Imqi5vW
- datetime: 2021-12-19 15:44:00
  file_links:
  - target: ./optional.f90
    text: optional.f90
  ft_topic_id: procedures
  title: Demonstrate optional arguments and RANDOM_NUMBER
  tweet_created_at: '2021-12-19T21:44:07.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/ZNqwgg3Wgq">pic.twitter.com/ZNqwgg3Wgq</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472684194765672450?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472684194765672450'
  tweet_text: Created with @carbon_app https://t.co/ZNqwgg3Wgq
- datetime: 2021-12-19 12:05:00
  file_links:
  - target: ./interface.f90
    text: interface.f90
  ft_topic_id: modules
  title: Function overloading using an interface with module procedures
  tweet_created_at: '2021-12-19T18:05:10.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Created with
    <a href="https://twitter.com/carbon_app?ref_src=twsrc%5Etfw">@carbon_app</a> <a
    href="https://t.co/qsfPFLVUkl">pic.twitter.com/qsfPFLVUkl</a></p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472629090758836229?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472629090758836229'
  tweet_text: Created with @carbon_app https://t.co/qsfPFLVUkl
- datetime: 2021-12-19 11:04:00
  file_links: []
  ft_topic_id: modules
  title: USE, ONLY to avoid polluting the namespace
  tweet_created_at: '2021-12-19T17:04:53.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In Fortran,
    <br><br>use m<br><br>is equivalent to Python<br><br>from m import *<br><br>It
    is better to write <br><br>use m, only: foo, bar<br><br>to avoid polluting the
    namespace and to clarify the origin of imported entities.</p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472613921886552065?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472613921886552065'
  tweet_text: "In Fortran, \n\nuse m\n\nis equivalent to Python\n\nfrom m import *\n\
    \nIt is better to write \n\nuse m, only: foo, bar\n\nto avoid polluting the namespace\
    \ and to clarify the origin of imported entities."
- datetime: 2021-12-19 10:50:00
  file_links:
  - target: ./module.f90
    text: module.f90
  ft_topic_id: procedures
  title: Put functions and subroutines in modules to ensure that interfaces are checked.
  tweet_created_at: '2021-12-19T16:50:54.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran procedures
    should be defined in modules to<br>ensure that interfaces are checked.<br><br>module
    m<br>contains<br>integer function area(length,width)<br>integer, intent(in) ::
    length,width<br>area = length*width<br>end<br>end module m<br>program main<br>use
    m<br>print*,area(3,4) ! 12<br>end program main</p>&mdash; FortranTip (@fortrantip)
    <a href="https://twitter.com/fortrantip/status/1472610403884670976?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472610403884670976'
  tweet_text: 'Fortran procedures should be defined in modules to

    ensure that interfaces are checked.


    module m

    contains

    integer function area(length,width)

    integer, intent(in) :: length,width

    area = length*width

    end

    end module m

    program main

    use m

    print*,area(3,4) ! 12

    end program main'
- datetime: 2021-12-19 10:37:00
  file_links:
  - target: ./elemental.f90
    text: elemental.f90
  ft_topic_id: procedures
  title: ELEMENTAL functions broadcast arguments
  tweet_created_at: '2021-12-19T16:37:02.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Elemental
    functions broadcast arguments. Neat Fortran feature!<br><br>print*,area(3,4) !
    12<br>print*,area(3,[4,5]) ! 12 15<br>print*,area([3,4],[4,5]) ! 12 20<br>contains<br>integer
    elemental function area(length,width)<br>integer, intent(in) :: length,width<br>area
    = length*width<br>end function area<br>end</p>&mdash; FortranTip (@fortrantip)
    <a href="https://twitter.com/fortrantip/status/1472606914857078793?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472606914857078793'
  tweet_text: 'Elemental functions broadcast arguments. Neat Fortran feature!


    print*,area(3,4) ! 12

    print*,area(3,[4,5]) ! 12 15

    print*,area([3,4],[4,5]) ! 12 20

    contains

    integer elemental function area(length,width)

    integer, intent(in) :: length,width

    area = length*width

    end function area

    end'
- datetime: 2021-12-19 10:25:00
  file_links:
  - target: ./func.f90
    text: func.f90
  ft_topic_id: procedures
  title: Functions should be PURE and have INTENT(IN) arguments
  tweet_created_at: '2021-12-19T16:25:02.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Demo of a
    Fortran function. Intent(in) arguments<br>cannot be changed. Function arguments
    should be intent(in). Pure = no side-effects.<br><br>print*,area(3.,4.) ! 12<br>contains<br>real
    pure function area(length,width)<br>real, intent(in) :: length,width<br>area =
    length*width<br>end function area<br>end</p>&mdash; FortranTip (@fortrantip) <a
    href="https://twitter.com/fortrantip/status/1472603894886932482?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472603894886932482'
  tweet_text: 'Demo of a Fortran function. Intent(in) arguments

    cannot be changed. Function arguments should be intent(in). Pure = no side-effects.


    print*,area(3.,4.) ! 12

    contains

    real pure function area(length,width)

    real, intent(in) :: length,width

    area = length*width

    end function area

    end'
- datetime: 2021-12-19 10:13:00
  file_links:
  - target: ./count_pack.f90
    text: count_pack.f90
  ft_topic_id: arrays
  title: PACK selects elements
  tweet_created_at: '2021-12-19T16:13:01.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Pack selects
    elements<br><br>integer :: v(3) = [1,-4,9]<br>print*,pack(v,v&gt;0) ! 1 9 -- keep
    values &gt; 0<br>print*,count(v&gt;0)  ! 2   -- count values &gt; 0<br>print*,size(v)     !
    3<br>print*,sum(v)      ! 6<br>print*,sum(v,v&gt;0)  ! 10  -- sum has optional
    mask<br>print*,sum(pack(v,v&gt;0)) ! 10<br>end</p>&mdash; FortranTip (@fortrantip)
    <a href="https://twitter.com/fortrantip/status/1472600871192125451?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472600871192125451'
  tweet_text: 'Pack selects elements


    integer :: v(3) = [1,-4,9]

    print*,pack(v,v&gt;0) ! 1 9 -- keep values &gt; 0

    print*,count(v&gt;0)  ! 2   -- count values &gt; 0

    print*,size(v)     ! 3

    print*,sum(v)      ! 6

    print*,sum(v,v&gt;0)  ! 10  -- sum has optional mask

    print*,sum(pack(v,v&gt;0)) ! 10

    end'
- datetime: 2021-12-19 10:04:00
  file_links:
  - target: ./do_loop_index.f90
    text: do_loop_index.f90
  ft_topic_id: loops
  title: Loop variable equals the upper bound plus the stride after normal completion
    of a loop
  tweet_created_at: '2021-12-19T16:04:23.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The loop
    variable equals the upper bound plus the stride<br>after normal completion of
    a loop<br><br>integer :: i<br>do i=1,3<br>  if (i &gt; 1) exit<br>end do<br>print*,i
    ! 2<br>do i=1,3 ! stride of 1<br>  continue ! placeholder<br>end do<br>print*,i
    ! 4<br>do i=1,3,2 ! stride of 2<br>  continue<br>end do<br>print*,i ! 5<br>end</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472598697489965061?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472598697489965061'
  tweet_text: "The loop variable equals the upper bound plus the stride\nafter normal\
    \ completion of a loop\n\ninteger :: i\ndo i=1,3\n  if (i &gt; 1) exit\nend do\n\
    print*,i ! 2\ndo i=1,3 ! stride of 1\n  continue ! placeholder\nend do\nprint*,i\
    \ ! 4\ndo i=1,3,2 ! stride of 2\n  continue\nend do\nprint*,i ! 5\nend"
- datetime: 2021-12-19 07:52:00
  file_links:
  - target: ./assoc.f90
    text: assoc.f90
  ft_topic_id: associate
  title: Associate creates an alias for expressions or variables.
  tweet_created_at: '2021-12-19T13:52:31.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Associate
    creates an alias for expressions or variables.<br><br>integer, allocatable ::
    u(:)<br>u = [4,9]<br>associate (v =&gt; u)<br>v = v - 2<br>print*,v ! 2 7<br>print*,u
    ! 2 7<br>associate (w =&gt; [4,9])<br>print*,w<br>w = w - 2 ! illegal since w
    set to a constant expression<br>end associate<br>end associate<br>end</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472565511628197891?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472565511628197891'
  tweet_text: 'Associate creates an alias for expressions or variables.


    integer, allocatable :: u(:)

    u = [4,9]

    associate (v =&gt; u)

    v = v - 2

    print*,v ! 2 7

    print*,u ! 2 7

    associate (w =&gt; [4,9])

    print*,w

    w = w - 2 ! illegal since w set to a constant expression

    end associate

    end associate

    end'
- datetime: 2021-12-18 18:36:00
  file_links:
  - target: ./one_line_if.f90
    text: one_line_if.f90
  ft_topic_id: conditionals
  title: In addition to if-elseif, Fortran has a one-line if
  tweet_created_at: '2021-12-19T00:36:05.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">In addition
    to if-elseif, Fortran has a one-line if:<br>if (condition) executable_statement<br><br>integer
    :: i<br>do i=-1,1<br>   if (i /= 0) print*,i,1/i ! one-line if equivalent to below<br>   if
    (i /= 0) then<br>      print*,i,1/i<br>   end if<br>end do<br>end<br>! output:<br>!
    -1  -1<br>! -1  -1<br>!  1   1<br>!  1   1</p>&mdash; FortranTip (@fortrantip)
    <a href="https://twitter.com/fortrantip/status/1472365082067755017?ref_src=twsrc%5Etfw">December
    19, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472365082067755017'
  tweet_text: "In addition to if-elseif, Fortran has a one-line if:\nif (condition)\
    \ executable_statement\n\ninteger :: i\ndo i=-1,1\n   if (i /= 0) print*,i,1/i\
    \ ! one-line if equivalent to below\n   if (i /= 0) then\n      print*,i,1/i\n\
    \   end if\nend do\nend\n! output:\n! -1  -1\n! -1  -1\n!  1   1\n!  1   1"
- datetime: 2021-12-18 08:18:00
  file_links: []
  ft_topic_id: character-variables
  title: Character variables are padded with spaces at the end if necessary.
  tweet_created_at: '2021-12-18T14:18:16.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran character
    variables are padded with spaces at the end if necessary. The // operator concatenates.
    Trim removes trailing spaces.<br><br>character (len=5) :: v = &quot;one&quot;<br>print*,&quot;&#39;&quot;
    // v // &quot;&#39;&quot; ! &#39;one  &#39;<br>print*,&quot;&#39;&quot; // trim(v)
    // &quot;&#39;&quot; ! &#39;one&#39;<br>print*,len(v),len_trim(v) ! 5 3<br>end</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472209602074849285?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472209602074849285'
  tweet_text: 'Fortran character variables are padded with spaces at the end if necessary.
    The // operator concatenates. Trim removes trailing spaces.


    character (len=5) :: v = "one"

    print*,"''" // v // "''" ! ''one  ''

    print*,"''" // trim(v) // "''" ! ''one''

    print*,len(v),len_trim(v) ! 5 3

    end'
- datetime: 2021-12-18 08:10:00
  file_links:
  - target: ./char.f90
    text: char.f90
  ft_topic_id: character-variables
  title: An array of character variables has elements of the same LEN(gth).
  tweet_created_at: '2021-12-18T14:10:13.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">An array
    of character variables has elements of the same LEN(gth).<br><br>character(len=5)
    :: w(3)<br>w = [&quot;one&quot;,&quot;four&quot;,&quot;seven&quot;] ! invalid<br>w
    = [&quot;one  &quot;,&quot;four &quot;,&quot;seven&quot;] ! same as below<br>w
    = [character(5) :: &quot;one&quot;,&quot;four&quot;,&quot;seven&quot;] <br>print*,w<br>end</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472207576133783564?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472207576133783564'
  tweet_text: "An array of character variables has elements of the same LEN(gth).\n\
    \ncharacter(len=5) :: w(3)\nw = [\"one\",\"four\",\"seven\"] ! invalid\nw = [\"\
    one  \",\"four \",\"seven\"] ! same as below\nw = [character(5) :: \"one\",\"\
    four\",\"seven\"] \nprint*,w\nend"
- datetime: 2021-12-18 08:01:00
  file_links:
  - target: ./merge.f90
    text: merge.f90
  ft_topic_id: conditionals
  title: MERGE(x,y,condition) returns x if condition is true, otherwise y
  tweet_created_at: '2021-12-18T14:01:16.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">merge(x,y,condition)
    returns x if condition is true, otherwise y. Same output as previous:<br><br>integer
    :: i<br>do i=-1,1<br>   print*,i<br>   ! &quot;zero&quot; padded to have same
    length as &quot;negative&quot;<br>   print*,merge(&quot;negative&quot;,merge(&quot;zero    &quot;,
    &amp;  <br>                &quot;positive&quot;,i==0),i&lt;0)<br>end do<br>end</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472205323763073026?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472205323763073026'
  tweet_text: "merge(x,y,condition) returns x if condition is true, otherwise y. Same\
    \ output as previous:\n\ninteger :: i\ndo i=-1,1\n   print*,i\n   ! \"zero\" padded\
    \ to have same length as \"negative\"\n   print*,merge(\"negative\",merge(\"zero\
    \    \", &amp;  \n                \"positive\",i==0),i&lt;0)\nend do\nend"
- datetime: 2021-12-18 07:50:00
  file_links:
  - target: ./if.f90
    text: if.f90
  ft_topic_id: conditionals
  title: IF-ELSEIF-ENDIF block
  tweet_created_at: '2021-12-18T13:50:45.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If-elseif-endif
    block:<br><br>integer :: i<br>do i=-1,1<br>   print*,i<br>   if (i &lt; 0) then<br>      print*,&quot;negative&quot;<br>   else
    if (i == 0) then<br>      print*,&quot;zero&quot;<br>   else<br>      print*,&quot;positive&quot;<br>   end
    if<br>end do<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472202678054920196?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472202678054920196'
  tweet_text: "If-elseif-endif block:\n\ninteger :: i\ndo i=-1,1\n   print*,i\n  \
    \ if (i &lt; 0) then\n      print*,\"negative\"\n   else if (i == 0) then\n  \
    \    print*,\"zero\"\n   else\n      print*,\"positive\"\n   end if\nend do\n\
    end"
- datetime: 2021-12-18 06:36:00
  file_links: []
  ft_topic_id: style
  title: New Fortran code should be written using free source form and stored in a
    file with the .f90 suffix.
  tweet_created_at: '2021-12-18T12:36:16.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">New Fortran
    code should be written using free source form and stored in a file with the .f90
    suffix. Free form was introduced in the Fortran 90 standard, but using the .f90
    suffix does NOT mean the code is restricted to Fortran 90 features. Don&#39;t
    use .f95 .f08 .f18 suffixes.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472183935044145157?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472183935044145157'
  tweet_text: New Fortran code should be written using free source form and stored
    in a file with the .f90 suffix. Free form was introduced in the Fortran 90 standard,
    but using the .f90 suffix does NOT mean the code is restricted to Fortran 90 features.
    Don't use .f95 .f08 .f18 suffixes.
- datetime: 2021-12-18 06:26:00
  file_links:
  - target: ./alloc.f90
    text: alloc.f90
  ft_topic_id: allocation
  title: Fortran has allocation on assignment.
  tweet_created_at: '2021-12-18T12:26:59.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran has
    allocation on assignment, but you cannot use the ALLOCATE statement for an array
    that is allocated<br><br>integer, allocatable :: v(:)<br>v = [4,9]<br>deallocate(v)
    ! necessary for line below to work<br>allocate (v,source=[4,9]) ! same as above</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472181598833549316?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472181598833549316'
  tweet_text: 'Fortran has allocation on assignment, but you cannot use the ALLOCATE
    statement for an array that is allocated


    integer, allocatable :: v(:)

    v = [4,9]

    deallocate(v) ! necessary for line below to work

    allocate (v,source=[4,9]) ! same as above'
- datetime: 2021-12-17 19:40:00
  file_links:
  - target: ./2d_array.f90
    text: 2d_array.f90
  ft_topic_id: arrays
  title: SUM and other array functions have an optional DIM(ension) argument.
  tweet_created_at: '2021-12-18T01:40:03.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">sum and other
    array functions have an optional dim(ension) argument<br><br>integer :: v(2,3)
    ! 2x3 matrix<br>v(1,:) = [1,2,3]<br>v(2,:) = 10*v(1,:) ! set to [10,20,30]<br>print*,sum(v)
    ! all elements: 66<br>print*,sum(v,dim=1) ! sum each row: 6 60<br>print*,sum(v,dim=2)
    ! sum each col: 11 22 33</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1472018791525720069?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1472018791525720069'
  tweet_text: 'sum and other array functions have an optional dim(ension) argument


    integer :: v(2,3) ! 2x3 matrix

    v(1,:) = [1,2,3]

    v(2,:) = 10*v(1,:) ! set to [10,20,30]

    print*,sum(v) ! all elements: 66

    print*,sum(v,dim=1) ! sum each row: 6 60

    print*,sum(v,dim=2) ! sum each col: 11 22 33'
- datetime: 2021-12-17 18:16:00
  file_links:
  - target: ./bounds.f90
    text: bounds.f90
  ft_topic_id: arrays
  title: Fortran arrays can have any lower bound. The default is 1.
  tweet_created_at: '2021-12-18T00:16:29.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran arrays
    can have any lower bound. <br>The default is 1. Array functions have optional
    mask arguments to determine the elements used.<br><br>integer :: v(-1:1) = [1,-2,3]<br>print*,lbound(v),ubound(v),size(v)
    ! -1 1 3<br>print*,sum(v) ! 2<br>print*,sum(v,mask=v&gt;0) ! 4 -- sum excludes
    -2<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471997763848183810?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471997763848183810'
  tweet_text: "Fortran arrays can have any lower bound. \nThe default is 1. Array\
    \ functions have optional mask arguments to determine the elements used.\n\ninteger\
    \ :: v(-1:1) = [1,-2,3]\nprint*,lbound(v),ubound(v),size(v) ! -1 1 3\nprint*,sum(v)\
    \ ! 2\nprint*,sum(v,mask=v&gt;0) ! 4 -- sum excludes -2\nend"
- datetime: 2021-12-17 18:01:00
  file_links:
  - target: ./sections.f90
    text: sections.f90
  ft_topic_id: arrays
  title: Fortran array sections contain both endpoints
  tweet_created_at: '2021-12-18T00:01:56.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran array
    sections contain both endpoints like Julia, Matlab and R, unlike Python.<br><br>integer,
    parameter :: v(3) = [10,20,30]<br>print*,v(1:2) ! output 10 20<br>print*,v(:2)  !
    10 20<br>print*,v(2:3) ! 20 30<br>print*,v(2:)  ! 20 30<br>print*,v(::2) ! 10
    30 -- stride of 2</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471994100161388545?ref_src=twsrc%5Etfw">December
    18, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471994100161388545'
  tweet_text: 'Fortran array sections contain both endpoints like Julia, Matlab and
    R, unlike Python.


    integer, parameter :: v(3) = [10,20,30]

    print*,v(1:2) ! output 10 20

    print*,v(:2)  ! 10 20

    print*,v(2:3) ! 20 30

    print*,v(2:)  ! 20 30

    print*,v(::2) ! 10 30 -- stride of 2'
- datetime: 2021-12-17 17:44:00
  file_links:
  - target: ./array_intrinsics.f90
    text: array_intrinsics.f90
  ft_topic_id: arrays
  title: 'Array intrinsic functions: SUM, MINVAL, MAXVAL, MINLOC, FINDLOC'
  tweet_created_at: '2021-12-17T23:44:41.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="fr" dir="ltr">Fortran has
    many array intrinsic functions. Below, ! starts a comment.<br><br>integer, parameter
    :: vec(3) = [4,1,9]<br>print*,minval(vec),maxval(vec) ! output: 1 9<br>print*,sum(vec),product(vec)
    ! 14 36<br>print*,minloc(vec),maxloc(vec) ! 2 3<br>print*,findloc(vec,9),findloc(vec,8)
    ! 3 0<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471989760046641153?ref_src=twsrc%5Etfw">December
    17, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471989760046641153'
  tweet_text: 'Fortran has many array intrinsic functions. Below, ! starts a comment.


    integer, parameter :: vec(3) = [4,1,9]

    print*,minval(vec),maxval(vec) ! output: 1 9

    print*,sum(vec),product(vec) ! 14 36

    print*,minloc(vec),maxloc(vec) ! 2 3

    print*,findloc(vec,9),findloc(vec,8) ! 3 0

    end'
- datetime: 2021-12-17 14:14:00
  file_links: []
  ft_topic_id: basics
  title: Integer division truncates.
  tweet_created_at: '2021-12-17T20:14:04.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">print*,2+3,2-3,2*3,2/3,2/3.0,2.0/3,2**3<br><br>gives<br><br>5
    -1 6 0 0.6666667 0.6666667 8<br><br>2/3 = 0 in Fortran because the quotient of
    two integers is truncated to an integer. The quotient of an integer and a real
    is a real.</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471936756857643008?ref_src=twsrc%5Etfw">December
    17, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471936756857643008'
  tweet_text: 'print*,2+3,2-3,2*3,2/3,2/3.0,2.0/3,2**3


    gives


    5 -1 6 0 0.6666667 0.6666667 8


    2/3 = 0 in Fortran because the quotient of two integers is truncated to an integer.
    The quotient of an integer and a real is a real.'
- datetime: 2021-12-17 12:03:00
  file_links:
  - target: ./power.f90
    text: power.f90
  ft_topic_id: basics
  title: \** is the exponentiation operator.
  tweet_created_at: '2021-12-17T18:03:07.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The exponentiation
    operator in Fortran is **, as in Python. <br><br>print*,1.2**2<br><br>gives 1.44<br><br>Many
    Fortran operators and intrinsic functions are elemental, and brackets denote arrays,
    so<br><br>print*,[1.0,1.1,1.2,1.3]**2<br><br>gives<br><br>1.00000000       1.21000004       1.44000006       1.68999982</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471903802185986050?ref_src=twsrc%5Etfw">December
    17, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471903802185986050'
  tweet_text: "The exponentiation operator in Fortran is **, as in Python. \n\nprint*,1.2**2\n\
    \ngives 1.44\n\nMany Fortran operators and intrinsic functions are elemental,\
    \ and brackets denote arrays, so\n\nprint*,[1.0,1.1,1.2,1.3]**2\n\ngives\n\n1.00000000\
    \       1.21000004       1.44000006       1.68999982"
- datetime: 2021-12-17 11:37:00
  file_links: []
  ft_topic_id: fortran-resources
  title: Fortran compilers and tutorials
  tweet_created_at: '2021-12-17T17:37:22.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Two good
    sites to get started with Fortran are <a href="https://t.co/i6lkcIfPqy">https://t.co/i6lkcIfPqy</a>
    and <a href="https://t.co/uxmVspKsPm">https://t.co/uxmVspKsPm</a> . A good free
    compiler is gfortran, part of gcc. Intel Fortran is also free. LFortran is an
    interactive compiler that covers most but not yet all of Fortran.</p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471897319671046147?ref_src=twsrc%5Etfw">December
    17, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471897319671046147'
  tweet_text: Two good sites to get started with Fortran are https://t.co/i6lkcIfPqy
    and https://t.co/uxmVspKsPm . A good free compiler is gfortran, part of gcc. Intel
    Fortran is also free. LFortran is an interactive compiler that covers most but
    not yet all of Fortran.
- datetime: 2021-12-17 11:30:00
  file_links:
  - target: ./sum_exit.f90
    text: sum_exit.f90
  ft_topic_id: loops
  title: EXIT a loop
  tweet_created_at: '2021-12-17T17:30:06.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">You EXIT
    a loop as shown in the code below, which accumulates the sums of squared integers
    until the sum exceeds 100<br><br>implicit none<br>integer :: i,ssq<br>ssq = 0<br>i
    = 0<br>do<br>   i = i+1<br>   ssq = ssq + i**2<br>   if (ssq &gt; 100) exit<br>end
    do  <br>print*,&quot;sum of squares from 1 to &quot;,i,&quot; is&quot;,ssq<br>end</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471895490346291206?ref_src=twsrc%5Etfw">December
    17, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471895490346291206'
  tweet_text: "You EXIT a loop as shown in the code below, which accumulates the sums\
    \ of squared integers until the sum exceeds 100\n\nimplicit none\ninteger :: i,ssq\n\
    ssq = 0\ni = 0\ndo\n   i = i+1\n   ssq = ssq + i**2\n   if (ssq &gt; 100) exit\n\
    end do  \nprint*,\"sum of squares from 1 to \",i,\" is\",ssq\nend"
- datetime: 2021-12-17 11:14:00
  file_links:
  - target: ./loop.f90
    text: loop.f90
  ft_topic_id: loops
  title: DO-ENDDO loop
  tweet_created_at: '2021-12-17T17:14:49.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The primary
    looping construct in Fortran is do ... end do. A program to print the sum the
    squares of the integers from 1 to 5 is<br><br>implicit none<br>integer :: i,ssq<br>ssq
    = 0<br>do i=1,5<br>   ssq = ssq + i**2<br>end do<br>print*,&quot;sum of squares
    is &quot;,ssq<br>end</p>&mdash; FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471891644370796550?ref_src=twsrc%5Etfw">December
    17, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471891644370796550'
  tweet_text: "The primary looping construct in Fortran is do ... end do. A program\
    \ to print the sum the squares of the integers from 1 to 5 is\n\nimplicit none\n\
    integer :: i,ssq\nssq = 0\ndo i=1,5\n   ssq = ssq + i**2\nend do\nprint*,\"sum\
    \ of squares is \",ssq\nend"
- datetime: 2021-12-17 11:09:00
  file_links: []
  ft_topic_id: data-types
  title: 'Intrinsic data types: integer, real, complex, logical, and character'
  tweet_created_at: '2021-12-17T17:09:41.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Fortran has
    5 intrinsic data types: integer, real, complex, logical, and character. The types
    have various KINDs that determine the range of data they can represent.</p>&mdash;
    FortranTip (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471890355561943054?ref_src=twsrc%5Etfw">December
    17, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471890355561943054'
  tweet_text: 'Fortran has 5 intrinsic data types: integer, real, complex, logical,
    and character. The types have various KINDs that determine the range of data they
    can represent.'
- datetime: 2021-12-17 10:58:00
  file_links:
  - target: ./hello_world.f90
    text: hello_world.f90
  ft_topic_id: basics
  title: Hello World
  tweet_created_at: '2021-12-17T16:58:36.000Z'
  tweet_embed: '<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Hello World
    in Fortran is<br><br>print*,&quot;Hello, World.&quot;<br>end</p>&mdash; FortranTip
    (@fortrantip) <a href="https://twitter.com/fortrantip/status/1471887565745799173?ref_src=twsrc%5Etfw">December
    17, 2021</a></blockquote>

    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>'
  tweet_id: '1471887565745799173'
  tweet_text: 'Hello World in Fortran is


    print*,"Hello, World."

    end'
